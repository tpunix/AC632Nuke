
rom.exe:	file format ELF32-q32s

Disassembly of section .rom_code:
_start:
  100000:    c0 f3 05 28       	goto 0x500a <_startup : 10500e >			  ## startup.S:26:0


memcmp:
  100004:    74 01             	[--sp] = {rets, r4}
  100006:    42 e0 05 30       	if (r2 < 0x4) goto 0xa <memcmp+0x10 : 100014 >
  10000a:    e0 fd 00 31       	r3 = r1 | r0
  10000e:    60 ff 03 39 0d 00 	if ((r3 & 0x3) == 0) goto 0x1a <memcmp+0x2A : 10002e >
  100014:    13 24             	if (r2 == 0x0) goto 0x26 <memcmp+0x38 : 10003c >
  100016:    83 f9 01 10       	r3 = b[r1 ++= 0x1] (u)
  10001a:    84 f9 01 00       	r4 = b[r0 ++= 0x1] (u)
  10001e:    f2 8f             	r2 += -0x1
  100020:    34 f2 f8 0f       	if (r4 == r3) goto -0x10 <memcmp+0x10 : 100014 >
  100024:    e0 b8             	r0 = r4 - r3
  100026:    54 01             	{pc, r4} = [sp++]
  100028:    c2 8f             	r2 += -0x4
  10002a:    41 80             	r1 += 0x4
  10002c:    40 80             	r0 += 0x4
  10002e:    42 e0 f1 3f       	if (r2 < 0x4) goto -0x1e <memcmp+0x10 : 100014 >
  100032:    03 42             	r3 = [r1 + 0x0]
  100034:    04 40             	r4 = [r0 + 0x0]
  100036:    34 f2 f7 0f       	if (r4 == r3) goto -0x12 <memcmp+0x24 : 100028 >
  10003a:    ec 1f             	goto -0x28 <memcmp+0x10 : 100014 >
  10003c:    00 70             	r0 = 0x0
  10003e:    54 01             	{pc, r4} = [sp++]


memmove:
  100040:    77 01             	[--sp] = {rets, r7-r4}
  100042:    01 f2 03 80       	if (r1 > r0) goto 0x6 <memmove+0xC : 10004c >
  100046:    83 b2             	r3 = r1 + r2
  100048:    03 f2 3a 80       	if (r3 > r0) goto 0x74 <memmove+0x80 : 1000c0 >
  10004c:    03 08             	r3 = r0
  10004e:    82 e0 1b 30       	if (r2 < 0x8) goto 0x36 <memmove+0x48 : 100088 >
  100052:    25 fd 03 19       	r5 = r1 & 0x3
  100056:    24 fd 03 39       	r4 = r3 & 0x3
  10005a:    0a 28             	if (r4 == 0x0) goto 0x14 <memmove+0x30 : 100070 >
  10005c:    66 fb 04 49       	r6 = 0x4 - r4
  100060:    a2 b5             	r2 = r2 - r6
  100062:    06 2c             	if (r6 == 0x0) goto 0xc <memmove+0x30 : 100070 >
  100064:    87 f9 01 10       	r7 = b[r1 ++= 0x1] (u)
  100068:    97 f9 01 30       	b[r3 ++= 0x1] = r7
  10006c:    56 f3 f9 ff       	if (--r6 != 0) goto -0xe <memmove+0x22 : 100062 >
  100070:    d4 ba             	r4 ^= r5
  100072:    95 d0             	r5 = r2 >> 0x2
  100074:    11 38             	if (r4 != 0x0) goto 0x22 <memmove+0x58 : 100098 >
  100076:    06 2a             	if (r5 == 0x0) goto 0xc <memmove+0x44 : 100084 >
  100078:    46 f6 04 10       	r6 = [r1 ++= 0x4]
  10007c:    56 f6 04 30       	[r3 ++= 0x4] = r6
  100080:    55 f3 f9 ff       	if (--r5 != 0) goto -0xe <memmove+0x36 : 100076 >
  100084:    22 fd 03 29       	r2 = r2 & 0x3
  100088:    06 24             	if (r2 == 0x0) goto 0xc <memmove+0x56 : 100096 >
  10008a:    84 f9 01 10       	r4 = b[r1 ++= 0x1] (u)
  10008e:    94 f9 01 30       	b[r3 ++= 0x1] = r4
  100092:    52 f3 f9 ff       	if (--r2 != 0) goto -0xe <memmove+0x48 : 100088 >
  100096:    57 01             	{pc, r7-r4} = [sp++]
  100098:    f5 2b             	if (r5 == 0x0) goto -0x16 <memmove+0x44 : 100084 >
  10009a:    86 f9 01 10       	r6 = b[r1 ++= 0x1] (u)
  10009e:    84 f9 01 10       	r4 = b[r1 ++= 0x1] (u)
  1000a2:    c8 fd 40 64       	r6 <= insert(r4, p:0x8, l:0x8)
  1000a6:    84 f9 01 10       	r4 = b[r1 ++= 0x1] (u)
  1000aa:    c8 fd 80 64       	r6 <= insert(r4, p:0x10, l:0x8)
  1000ae:    84 f9 01 10       	r4 = b[r1 ++= 0x1] (u)
  1000b2:    c8 fd c0 64       	r6 <= insert(r4, p:0x18, l:0x8)
  1000b6:    56 f6 04 30       	[r3 ++= 0x4] = r6
  1000ba:    55 fb 01 59       	r5 = r5 - 0x1
  1000be:    ec 1f             	goto -0x28 <memmove+0x58 : 100098 >
  1000c0:    83 b0             	r3 = r0 + r2
  1000c2:    21 09             	r1 += r2
  1000c4:    82 e0 1e 30       	if (r2 < 0x8) goto 0x3c <memmove+0xC4 : 100104 >
  1000c8:    25 fd 03 19       	r5 = r1 & 0x3
  1000cc:    24 fd 03 39       	r4 = r3 & 0x3
  1000d0:    0b 28             	if (r4 == 0x0) goto 0x16 <memmove+0xA8 : 1000e8 >
  1000d2:    22 b5             	r2 = r2 - r4
  1000d4:    46 08             	r6 = r4
  1000d6:    08 2c             	if (r6 == 0x0) goto 0x10 <memmove+0xA8 : 1000e8 >
  1000d8:    51 fb 01 19       	r1 = r1 - 0x1
  1000dc:    07 62             	r7 = b[r1 + 0x0] (u)
  1000de:    53 fb 01 39       	r3 = r3 - 0x1
  1000e2:    0f 66             	b[r3 + 0x0] = r7
  1000e4:    56 f3 f7 ff       	if (--r6 != 0) goto -0x12 <memmove+0x96 : 1000d6 >
  1000e8:    d4 ba             	r4 ^= r5
  1000ea:    95 d0             	r5 = r2 >> 0x2
  1000ec:    15 38             	if (r4 != 0x0) goto 0x2a <memmove+0xD8 : 100118 >
  1000ee:    08 2a             	if (r5 == 0x0) goto 0x10 <memmove+0xC0 : 100100 >
  1000f0:    51 fb 04 19       	r1 = r1 - 0x4
  1000f4:    06 42             	r6 = [r1 + 0x0]
  1000f6:    53 fb 04 39       	r3 = r3 - 0x4
  1000fa:    0e 46             	[r3 + 0x0] = r6
  1000fc:    55 f3 f7 ff       	if (--r5 != 0) goto -0x12 <memmove+0xAE : 1000ee >
  100100:    22 fd 03 29       	r2 = r2 & 0x3
  100104:    08 24             	if (r2 == 0x0) goto 0x10 <memmove+0xD6 : 100116 >
  100106:    51 fb 01 19       	r1 = r1 - 0x1
  10010a:    06 62             	r6 = b[r1 + 0x0] (u)
  10010c:    53 fb 01 39       	r3 = r3 - 0x1
  100110:    0e 66             	b[r3 + 0x0] = r6
  100112:    52 f3 f7 ff       	if (--r2 != 0) goto -0x12 <memmove+0xC4 : 100104 >
  100116:    57 01             	{pc, r7-r4} = [sp++]
  100118:    f1 8f             	r1 += -0x1
  10011a:    13 2a             	if (r5 == 0x0) goto 0x26 <memmove+0x102 : 100142 >
  10011c:    86 f9 ff 1f       	r6 = b[r1 ++= -0x1] (u)
  100120:    36 c6             	r6 = r6 << 0x18
  100122:    84 f9 ff 1f       	r4 = b[r1 ++= -0x1] (u)
  100126:    c8 fd 80 64       	r6 <= insert(r4, p:0x10, l:0x8)
  10012a:    84 f9 ff 1f       	r4 = b[r1 ++= -0x1] (u)
  10012e:    c8 fd 40 64       	r6 <= insert(r4, p:0x8, l:0x8)
  100132:    84 f9 ff 1f       	r4 = b[r1 ++= -0x1] (u)
  100136:    56 b8             	r6 |= r4
  100138:    53 fb 04 39       	r3 = r3 - 0x4
  10013c:    0e 46             	[r3 + 0x0] = r6
  10013e:    55 f3 ec ff       	if (--r5 != 0) goto -0x28 <memmove+0xDA : 10011a >
  100142:    11 80             	r1 += 0x1
  100144:    dd 1f             	goto -0x46 <memmove+0xC0 : 100100 >


memmem:
  100146:    77 01             	[--sp] = {rets, r7-r4}
  100148:    35 08             	r5 = r3
  10014a:    26 08             	r6 = r2
  10014c:    17 08             	r7 = r1
  10014e:    04 08             	r4 = r0
  100150:    09 3a             	if (r5 != 0x0) goto 0x12 <memmem+0x1E : 100164 >
  100152:    0b 18             	goto 0x16 <memmem+0x24 : 10016a >
  100154:    40 08             	r0 = r4
  100156:    61 08             	r1 = r6
  100158:    52 08             	r2 = r5
  10015a:    bf f3 53 ff       	call -0x15a <memcmp : 100004 >
  10015e:    05 20             	if (r0 == 0x0) goto 0xa <memmem+0x24 : 10016a >
  100160:    f7 8f             	r7 += -0x1
  100162:    14 80             	r4 += 0x1
  100164:    57 f2 f6 2f       	if (r7 >= r5) goto -0x14 <memmem+0xE : 100154 >
  100168:    04 70             	r4 = 0x0
  10016a:    40 08             	r0 = r4
  10016c:    57 01             	{pc, r7-r4} = [sp++]


memset:
  10016e:    75 01             	[--sp] = {rets, r5, r4}
  100170:    03 08             	r3 = r0
  100172:    27 24             	if (r2 == 0x0) goto 0x4e <memset+0x54 : 1001c2 >
  100174:    60 ff 03 39 05 00 	if ((r3 & 0x3) == 0) goto 0xa <memset+0x16 : 100184 >
  10017a:    52 fb 01 29       	r2 = r2 - 0x1
  10017e:    91 f9 01 30       	b[r3 ++= 0x1] = r1
  100182:    f7 1f             	goto -0x12 <memset+0x4 : 100172 >
  100184:    94 d0             	r4 = r2 >> 0x2
  100186:    c8 fd 40 11       	r1 <= insert(r1, p:0x8, l:0x8)
  10018a:    d0 fd 80 11       	r1 <= insert(r1, p:0x10, l:0x10)
  10018e:    a5 d0             	r5 = r4 >> 0x2
  100190:    0a 2a             	if (r5 == 0x0) goto 0x14 <memset+0x38 : 1001a6 >
  100192:    51 f6 04 30       	[r3 ++= 0x4] = r1
  100196:    51 f6 04 30       	[r3 ++= 0x4] = r1
  10019a:    51 f6 04 30       	[r3 ++= 0x4] = r1
  10019e:    51 f6 04 30       	[r3 ++= 0x4] = r1
  1001a2:    55 f3 f6 ff       	if (--r5 != 0) goto -0x14 <memset+0x24 : 100192 >
  1001a6:    24 fd 03 49       	r4 = r4 & 0x3
  1001aa:    04 28             	if (r4 == 0x0) goto 0x8 <memset+0x46 : 1001b4 >
  1001ac:    51 f6 04 30       	[r3 ++= 0x4] = r1
  1001b0:    54 f3 fc ff       	if (--r4 != 0) goto -0x8 <memset+0x3E : 1001ac >
  1001b4:    22 fd 03 29       	r2 = r2 & 0x3
  1001b8:    04 24             	if (r2 == 0x0) goto 0x8 <memset+0x54 : 1001c2 >
  1001ba:    91 f9 01 30       	b[r3 ++= 0x1] = r1
  1001be:    52 f3 fc ff       	if (--r2 != 0) goto -0x8 <memset+0x4C : 1001ba >
  1001c2:    55 01             	{pc, r5, r4} = [sp++]


strchr:
  1001c4:    f0 8f             	r0 += -0x1
  1001c6:    41 04             	r1 = r1.b0 (u)
  1001c8:    12 60             	r2 = b[r0 + 0x1] (u)
  1001ca:    10 80             	r0 += 0x1
  1001cc:    12 f2 01 00       	if (r2 == r1) goto 0x2 <strchr+0xE : 1001d2 >
  1001d0:    fb 35             	if (r2 != 0x0) goto -0xa <strchr+0x4 : 1001c8 >
  1001d2:    12 f2 01 00       	if (r2 == r1) goto 0x2 <strchr+0x14 : 1001d8 >
  1001d6:    00 70             	r0 = 0x0
  1001d8:    20 00             	rts


strcmp:
  1001da:    77 01             	[--sp] = {rets, r7-r4}
  1001dc:    24 fd 03 09       	r4 = r0 & 0x3
  1001e0:    0b 28             	if (r4 == 0x0) goto 0x16 <strcmp+0x1E : 1001f8 >
  1001e2:    64 fb 04 49       	r4 = 0x4 - r4
  1001e6:    02 60             	r2 = b[r0 + 0x0] (u)
  1001e8:    45 24             	if (r2 == 0x0) goto 0x8a <strcmp+0x9A : 100274 >
  1001ea:    03 62             	r3 = b[r1 + 0x0] (u)
  1001ec:    32 f2 43 10       	if (r2 != r3) goto 0x86 <strcmp+0x9C : 100276 >
  1001f0:    10 80             	r0 += 0x1
  1001f2:    11 80             	r1 += 0x1
  1001f4:    54 f3 f7 ff       	if (--r4 != 0) goto -0x12 <strcmp+0xC : 1001e6 >
  1001f8:    e0 fd 00 21       	r2 = r1 | r0
  1001fc:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_uECC_vli_cmp_unsafe+0xFEEE8F02 : fefefefe >
  100202:    61 ff 03 29 13 00 	if ((r2 & 0x3) != 0) goto 0x26 <strcmp+0x54 : 10022e >
  100208:    02 40             	r2 = [r0 + 0x0]
  10020a:    03 42             	r3 = [r1 + 0x0]
  10020c:    32 f2 2a 10       	if (r2 != r3) goto 0x54 <strcmp+0x8A : 100264 >
  100210:    14 08             	r4 = r1
  100212:    81 b5             	r1 = r2 + r6
  100214:    e3 fd 20 11       	r1 = r1 & ~r2
  100218:    61 ff 80 1f 30 00 	if ((r1 & 0x80808080) != 0) goto 0x60 <strcmp+0xA4 : 10027e >
  10021e:    12 40             	r2 = [r0 + 0x4]
  100220:    15 48             	r5 = [r4 + 0x4]
  100222:    41 98             	r1 = r4 + 0x4
  100224:    40 80             	r0 += 0x4
  100226:    14 08             	r4 = r1
  100228:    52 f2 f3 0f       	if (r2 == r5) goto -0x1a <strcmp+0x38 : 100212 >
  10022c:    1b 18             	goto 0x36 <strcmp+0x8A : 100264 >
  10022e:    14 08             	r4 = r1
  100230:    02 40             	r2 = [r0 + 0x0]
  100232:    83 f9 01 40       	r3 = b[r4 ++= 0x1] (u)
  100236:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  10023a:    c8 fd 40 35       	r3 <= insert(r5, p:0x8, l:0x8)
  10023e:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  100242:    c8 fd 80 35       	r3 <= insert(r5, p:0x10, l:0x8)
  100246:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  10024a:    c8 fd c0 35       	r3 <= insert(r5, p:0x18, l:0x8)
  10024e:    32 f2 09 10       	if (r2 != r3) goto 0x12 <strcmp+0x8A : 100264 >
  100252:    85 b5             	r5 = r2 + r6
  100254:    e3 fd 20 55       	r5 = r5 & ~r2
  100258:    61 ff 80 5f 10 00 	if ((r5 & 0x80808080) != 0) goto 0x20 <strcmp+0xA4 : 10027e >
  10025e:    40 80             	r0 += 0x4
  100260:    41 80             	r1 += 0x4
  100262:    e5 1f             	goto -0x36 <strcmp+0x54 : 10022e >
  100264:    02 60             	r2 = b[r0 + 0x0] (u)
  100266:    06 24             	if (r2 == 0x0) goto 0xc <strcmp+0x9A : 100274 >
  100268:    04 62             	r4 = b[r1 + 0x0] (u)
  10026a:    42 f2 04 10       	if (r2 != r4) goto 0x8 <strcmp+0x9C : 100276 >
  10026e:    10 80             	r0 += 0x1
  100270:    11 80             	r1 += 0x1
  100272:    f8 1f             	goto -0x10 <strcmp+0x8A : 100264 >
  100274:    02 70             	r2 = 0x0
  100276:    13 08             	r3 = r1
  100278:    00 66             	r0 = b[r3 + 0x0] (u)
  10027a:    20 b4             	r0 = r2 - r0
  10027c:    57 01             	{pc, r7-r4} = [sp++]
  10027e:    00 70             	r0 = 0x0
  100280:    57 01             	{pc, r7-r4} = [sp++]


strcpy:
  100282:    77 01             	[--sp] = {rets, r7-r4}
  100284:    07 08             	r7 = r0
  100286:    24 fd 03 09       	r4 = r0 & 0x3
  10028a:    09 28             	if (r4 == 0x0) goto 0x12 <strcpy+0x1C : 10029e >
  10028c:    64 fb 04 49       	r4 = 0x4 - r4
  100290:    82 f9 01 10       	r2 = b[r1 ++= 0x1] (u)
  100294:    92 f9 01 00       	b[r0 ++= 0x1] = r2
  100298:    33 24             	if (r2 == 0x0) goto 0x66 <strcpy+0x7E : 100300 >
  10029a:    54 f3 f9 ff       	if (--r4 != 0) goto -0xe <strcpy+0xE : 100290 >
  10029e:    e0 fd 00 21       	r2 = r1 | r0
  1002a2:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_uECC_vli_cmp_unsafe+0xFEEE8F02 : fefefefe >
  1002a8:    61 ff 03 29 0b 00 	if ((r2 & 0x3) != 0) goto 0x16 <strcpy+0x42 : 1002c4 >
  1002ae:    02 42             	r2 = [r1 + 0x0]
  1002b0:    83 b5             	r3 = r2 + r6
  1002b2:    e3 fd 20 33       	r3 = r3 & ~r2
  1002b6:    61 ff 80 3f 1d 00 	if ((r3 & 0x80808080) != 0) goto 0x3a <strcpy+0x74 : 1002f6 >
  1002bc:    41 80             	r1 += 0x4
  1002be:    52 f6 04 00       	[r0 ++= 0x4] = r2
  1002c2:    f5 1f             	goto -0x16 <strcpy+0x2C : 1002ae >
  1002c4:    14 08             	r4 = r1
  1002c6:    82 f9 01 40       	r2 = b[r4 ++= 0x1] (u)
  1002ca:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  1002ce:    c8 fd 40 25       	r2 <= insert(r5, p:0x8, l:0x8)
  1002d2:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  1002d6:    c8 fd 80 25       	r2 <= insert(r5, p:0x10, l:0x8)
  1002da:    85 f9 01 40       	r5 = b[r4 ++= 0x1] (u)
  1002de:    c8 fd c0 25       	r2 <= insert(r5, p:0x18, l:0x8)
  1002e2:    85 b5             	r5 = r2 + r6
  1002e4:    e3 fd 20 55       	r5 = r5 & ~r2
  1002e8:    61 ff 80 5f 04 00 	if ((r5 & 0x80808080) != 0) goto 0x8 <strcpy+0x74 : 1002f6 >
  1002ee:    52 f6 04 00       	[r0 ++= 0x4] = r2
  1002f2:    41 08             	r1 = r4
  1002f4:    e7 1f             	goto -0x32 <strcpy+0x42 : 1002c4 >
  1002f6:    82 f9 01 10       	r2 = b[r1 ++= 0x1] (u)
  1002fa:    92 f9 01 00       	b[r0 ++= 0x1] = r2
  1002fe:    fb 35             	if (r2 != 0x0) goto -0xa <strcpy+0x74 : 1002f6 >
  100300:    70 08             	r0 = r7
  100302:    57 01             	{pc, r7-r4} = [sp++]


strlen:
  100304:    01 fc ff ff       	r1 = r0 + -0x1
  100308:    12 62             	r2 = b[r1 + 0x1] (u)
  10030a:    11 80             	r1 += 0x1
  10030c:    fd 35             	if (r2 != 0x0) goto -0x6 <strlen+0x4 : 100308 >
  10030e:    20 b2             	r0 = r1 - r0
  100310:    20 00             	rts


strncmp:
  100312:    74 01             	[--sp] = {rets, r4}
  100314:    0e 24             	if (r2 == 0x0) goto 0x1c <strncmp+0x20 : 100332 >
  100316:    62 fb 01 29       	r2 = 0x1 - r2
  10031a:    04 18             	goto 0x8 <strncmp+0x12 : 100324 >
  10031c:    08 24             	if (r2 == 0x0) goto 0x10 <strncmp+0x1C : 10032e >
  10031e:    34 f2 06 10       	if (r4 != r3) goto 0xc <strncmp+0x1C : 10032e >
  100322:    12 80             	r2 += 0x1
  100324:    83 f9 01 10       	r3 = b[r1 ++= 0x1] (u)
  100328:    84 f9 01 00       	r4 = b[r0 ++= 0x1] (u)
  10032c:    f7 39             	if (r4 != 0x0) goto -0x12 <strncmp+0xA : 10031c >
  10032e:    e0 b8             	r0 = r4 - r3
  100330:    54 01             	{pc, r4} = [sp++]
  100332:    00 70             	r0 = 0x0
  100334:    54 01             	{pc, r4} = [sp++]


strstr:
  100336:    74 01             	[--sp] = {rets, r4}
  100338:    02 60             	r2 = b[r0 + 0x0] (u)
  10033a:    0f 34             	if (r2 != 0x0) goto 0x1e <strstr+0x24 : 10035a >
  10033c:    01 62             	r1 = b[r1 + 0x0] (u)
  10033e:    0f 22             	if (r1 == 0x0) goto 0x1e <strstr+0x28 : 10035e >
  100340:    00 70             	r0 = 0x0
  100342:    54 01             	{pc, r4} = [sp++]
  100344:    02 70             	r2 = 0x0
  100346:    03 fa 00 12       	r3 = b[r1+r2] (u)
  10034a:    09 26             	if (r3 == 0x0) goto 0x12 <strstr+0x28 : 10035e >
  10034c:    04 fa 00 02       	r4 = b[r0+r2] (u)
  100350:    12 80             	r2 += 0x1
  100352:    43 f2 f8 0f       	if (r3 == r4) goto -0x10 <strstr+0x10 : 100346 >
  100356:    12 60             	r2 = b[r0 + 0x1] (u)
  100358:    10 80             	r0 += 0x1
  10035a:    f4 35             	if (r2 != 0x0) goto -0x18 <strstr+0xE : 100344 >
  10035c:    f1 1f             	goto -0x1e <strstr+0xA : 100340 >
  10035e:    54 01             	{pc, r4} = [sp++]


nvram_ota_tag:
  100360:	 4f 54 41 85 66 3a 7b 63         OTA.f:{c


nvram_uart_tag:
  100368:	 75 61 72 74 d9 c4 05 a8         uart....


nvram_usb_tag:
  100370:	 75 73 62 ed 63 81 67 ef         usb.c.g.


nvram_boot_state:
  100378:    74 01             	[--sp] = {rets, r4}			  ## boot_nvram.c:52:0
  10037a:    c4 ff 00 08 00 00 	r4 = 0x800 <stack_bss_size : 800 >			  ## boot_nvram.c:52:0
  100380:    c1 ff 70 03 10 00 	r1 = 0x100370 <nvram_usb_tag : 100370 >			  ## boot_nvram.c:53:9
  100386:    82 70             	r2 = 0x8			  ## boot_nvram.c:53:9
  100388:    40 08             	r0 = r4			  ## boot_nvram.c:53:9
  10038a:    bf f3 3b fe       	call -0x38a <memcmp : 100004 >			  ## boot_nvram.c:53:9
  10038e:    14 20             	if (r0 == 0x0) goto 0x28 <nvram_boot_state+0x40 : 1003b8 >			  ## boot_nvram.c:53:9
  100390:    c1 ff 68 03 10 00 	r1 = 0x100368 <nvram_uart_tag : 100368 >			  ## boot_nvram.c:56:16
  100396:    82 70             	r2 = 0x8			  ## boot_nvram.c:56:16
  100398:    40 08             	r0 = r4			  ## boot_nvram.c:56:16
  10039a:    bf f3 33 fe       	call -0x39a <memcmp : 100004 >			  ## boot_nvram.c:56:16
  10039e:    0e 20             	if (r0 == 0x0) goto 0x1c <nvram_boot_state+0x44 : 1003bc >			  ## boot_nvram.c:56:16
  1003a0:    c1 ff 60 03 10 00 	r1 = 0x100360 <nvram_ota_tag : 100360 >			  ## boot_nvram.c:59:16
  1003a6:    82 70             	r2 = 0x8			  ## boot_nvram.c:59:16
  1003a8:    40 08             	r0 = r4			  ## boot_nvram.c:59:16
  1003aa:    bf f3 2b fe       	call -0x3aa <memcmp : 100004 >			  ## boot_nvram.c:59:16
  1003ae:    01 08             	r1 = r0			  ## boot_nvram.c:59:16
  1003b0:    00 70             	r0 = 0x0			  ## boot_nvram.c:59:16
  1003b2:    08 32             	if (r1 != 0x0) goto 0x10 <nvram_boot_state+0x4C : 1003c4 >			  ## boot_nvram.c:59:16
  1003b4:    60 70             	r0 = 0x6
  1003b6:    03 18             	goto 0x6 <nvram_boot_state+0x46 : 1003be >
  1003b8:    20 70             	r0 = 0x2
  1003ba:    01 18             	goto 0x2 <nvram_boot_state+0x46 : 1003be >
  1003bc:    30 70             	r0 = 0x3
  1003be:    01 70             	r1 = 0x0			  ## boot_nvram.c:49:5
  1003c0:    19 48             	[r4 + 0x4] = r1			  ## boot_nvram.c:49:5
  1003c2:    09 48             	[r4 + 0x0] = r1			  ## boot_nvram.c:49:5
  1003c4:    54 01             	{pc, r4} = [sp++]			  ## boot_nvram.c:64:1


nvram_set_boot_state:
  1003c6:    20 e0 0b 00       	if (r0 == 0x2) goto 0x16 <nvram_set_boot_state+0x1A : 1003e0 >			  ## boot_nvram.c:66:0
  1003ca:    60 e0 10 00       	if (r0 == 0x6) goto 0x20 <nvram_set_boot_state+0x28 : 1003ee >			  ## boot_nvram.c:66:0
  1003ce:    30 e0 19 10       	if (r0 != 0x3) goto 0x32 <nvram_set_boot_state+0x3E : 100404 >			  ## boot_nvram.c:66:0
  1003d2:    c0 ff d9 c4 05 a8 	r0 = 0xa805c4d9 <__stub_uECC_vli_cmp_unsafe+0xA7F554DC : a805c4d8 >			  ## boot_nvram.c:66:0
  1003d8:    c1 ff 75 61 72 74 	r1 = 0x74726175 <__stub_uECC_vli_cmp_unsafe+0x7461F178 : 74726174 >			  ## boot_nvram.c:66:0
  1003de:    0d 18             	goto 0x1a <nvram_set_boot_state+0x34 : 1003fa >			  ## boot_nvram.c:66:0
  1003e0:    c0 ff 63 81 67 ef 	r0 = 0xef678163 <__stub_uECC_vli_cmp_unsafe+0xEF571166 : ef678162 >			  ## boot_nvram.c:66:0
  1003e6:    c1 ff 75 73 62 ed 	r1 = 0xed627375 <__stub_uECC_vli_cmp_unsafe+0xED520378 : ed627374 >			  ## boot_nvram.c:66:0
  1003ec:    06 18             	goto 0xc <nvram_set_boot_state+0x34 : 1003fa >			  ## boot_nvram.c:66:0
  1003ee:    c0 ff 66 3a 7b 63 	r0 = 0x637b3a66 <__stub_uECC_vli_cmp_unsafe+0x636ACA6A : 637b3a66 >			  ## boot_nvram.c:66:0
  1003f4:    c1 ff 4f 54 41 85 	r1 = 0x8541544f <__stub_uECC_vli_cmp_unsafe+0x8530E452 : 8541544e >			  ## boot_nvram.c:66:0
  1003fa:    c2 ff 00 08 00 00 	r2 = 0x800 <stack_bss_size : 800 >			  ## boot_nvram.c:66:0
  100400:    09 44             	[r2 + 0x0] = r1			  ## boot_nvram.c:66:0
  100402:    18 44             	[r2 + 0x4] = r0			  ## boot_nvram.c:66:0
  100404:    20 00             	rts			  ## boot_nvram.c:80:1


chip_reset:
  100406:    c0 ff a0 18 1a 00 	r0 = 0x1a18a0 <__stub_uECC_vli_cmp_unsafe+0x9A8A4 : 1a18a0 >			  ## main.c:67:0
  10040c:    01 60             	r1 = b[r0 + 0x0] (u)			  ## main.c:68:15
  10040e:    11 b2             	r1 |= 0x10			  ## main.c:68:15
  100410:    09 60             	b[r0 + 0x0] = r1			  ## main.c:68:15
  100412:    ff 1f             	goto -0x2 <chip_reset+0xC : 100412 >			  ## main.c:69:5


os_code_begin:
  100414:    c0 ff 8c fc 00 00 	r0 = 0xfc8c <the_debug_isr_stack : fc8c >			  ## mask_export.c:81:0
  10041a:    c0 f4 00 09       	[r0 + 0x0] = 0x0			  ## mask_export.c:82:5
  10041e:    20 00             	rts			  ## mask_export.c:83:1


local_irq_disable:
  100420:    18 00             	cli			  ## mask_export.c:74:0
  100422:    c0 ff 8c fc 00 00 	r0 = 0xfc8c <the_debug_isr_stack : fc8c >			  ## mask_export.c:76:35
  100428:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:76:35
  10042a:    11 80             	r1 += 0x1			  ## mask_export.c:76:35
  10042c:    09 40             	[r0 + 0x0] = r1			  ## mask_export.c:76:35
  10042e:    20 00             	rts			  ## mask_export.c:77:1


local_irq_enable:
  100430:    c0 ff 8c fc 00 00 	r0 = 0xfc8c <the_debug_isr_stack : fc8c >			  ## mask_export.c:85:0
  100436:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:86:9
  100438:    f1 8f             	r1 += -0x1			  ## mask_export.c:86:9
  10043a:    09 40             	[r0 + 0x0] = r1			  ## mask_export.c:86:9
  10043c:    01 32             	if (r1 != 0x0) goto 0x2 <local_irq_enable+0x10 : 100440 >			  ## mask_export.c:86:9
  10043e:    1c 00             	sti			  ## mask_export.c:87:9
  100440:    20 00             	rts			  ## mask_export.c:89:1


free:
  100442:    c1 ff cc fc 00 00 	r1 = 0xfccc <mask_free : fccc >			  ## mask_export.c:22:0
  100448:    01 42             	r1 = [r1 + 0x0]			  ## mask_export.c:23:5
  10044a:    91 00             	goto r1			  ## mask_export.c:23:5


malloc:
  10044c:    c1 ff d0 fc 00 00 	r1 = 0xfcd0 <mask_malloc : fcd0 >			  ## mask_export.c:26:0
  100452:    01 42             	r1 = [r1 + 0x0]			  ## mask_export.c:27:12
  100454:    91 00             	goto r1			  ## mask_export.c:27:12


mask_init:
  100456:    77 01             	[--sp] = {rets, r7-r4}			  ## mask_export.c:57:0
  100458:    34 08             	r4 = r3			  ## mask_export.c:57:0
  10045a:    25 08             	r5 = r2			  ## mask_export.c:57:0
  10045c:    16 08             	r6 = r1			  ## mask_export.c:57:0
  10045e:    07 08             	r7 = r0			  ## mask_export.c:57:0
  100460:    c0 ff 8c fc 00 00 	r0 = 0xfc8c <the_debug_isr_stack : fc8c >			  ## mask_export.c:82:5
  100466:    01 70             	r1 = 0x0			  ## mask_export.c:82:5
  100468:    09 40             	[r0 + 0x0] = r1			  ## mask_export.c:82:5
  10046a:    c0 ff 8c fc 00 00 	r0 = 0xfc8c <the_debug_isr_stack : fc8c >			  ## mask_export.c:59:5
  100470:    c2 ff e8 01 00 00 	r2 = 0x1e8 <os_bss_size : 1e8 >			  ## mask_export.c:59:5
  100476:    bf f3 7a fe       	call -0x30c <memset : 10016e >			  ## mask_export.c:59:5
  10047a:    c0 ff cc fc 00 00 	r0 = 0xfccc <mask_free : fccc >			  ## mask_export.c:60:15
  100480:    0f 40             	[r0 + 0x0] = r7			  ## mask_export.c:60:15
  100482:    c0 ff d0 fc 00 00 	r0 = 0xfcd0 <mask_malloc : fcd0 >			  ## mask_export.c:61:17
  100488:    0e 40             	[r0 + 0x0] = r6			  ## mask_export.c:61:17
  10048a:    c0 ff d8 fc 00 00 	r0 = 0xfcd8 <mask_stack_free : fcd8 >			  ## mask_export.c:62:21
  100490:    0d 40             	[r0 + 0x0] = r5			  ## mask_export.c:62:21
  100492:    c0 ff d4 fc 00 00 	r0 = 0xfcd4 <mask_stack_malloc : fcd4 >			  ## mask_export.c:63:23
  100498:    61 02             	r1 = [sp+24]			  ## mask_export.c:63:23
  10049a:    0c 40             	[r0 + 0x0] = r4			  ## mask_export.c:63:23
  10049c:    c0 ff dc fc 00 00 	r0 = 0xfcdc <vPortStartFirstTask : fcdc >			  ## mask_export.c:64:25
  1004a2:    52 02             	r2 = [sp+20]			  ## mask_export.c:64:25
  1004a4:    09 40             	[r0 + 0x0] = r1			  ## mask_export.c:64:25
  1004a6:    c0 ff e0 fc 00 00 	r0 = 0xfce0 <mask_portSUPPRESS_TICKS_AND_SLEEP : fce0 >			  ## mask_export.c:65:39
  1004ac:    91 02             	r1 = [sp+36]			  ## mask_export.c:65:39
  1004ae:    0a 40             	[r0 + 0x0] = r2			  ## mask_export.c:65:39
  1004b0:    c0 ff e4 fc 00 00 	r0 = 0xfce4 <mask_putchar : fce4 >			  ## mask_export.c:67:18
  1004b6:    a2 02             	r2 = [sp+40]			  ## mask_export.c:67:18
  1004b8:    09 40             	[r0 + 0x0] = r1			  ## mask_export.c:67:18
  1004ba:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## mask_export.c:68:16
  1004c0:    71 02             	r1 = [sp+28]			  ## mask_export.c:68:16
  1004c2:    0a 40             	[r0 + 0x0] = r2			  ## mask_export.c:68:16
  1004c4:    80 02             	r0 = [sp+32]			  ## mask_export.c:68:16
  1004c6:    c2 ff ec fc 00 00 	r2 = 0xfcec <exception_irq_hook : fcec >			  ## mask_export.c:69:24
  1004cc:    09 44             	[r2 + 0x0] = r1			  ## mask_export.c:69:24
  1004ce:    c1 ff f0 fc 00 00 	r1 = 0xfcf0 <idle_hook : fcf0 >			  ## mask_export.c:70:15
  1004d4:    08 42             	[r1 + 0x0] = r0			  ## mask_export.c:70:15
  1004d6:    57 01             	{pc, r7-r4} = [sp++]			  ## mask_export.c:71:1


uxListRemove:
  1004d8:    34 00             	[--sp] = rets			  ## list.c:218:0
  1004da:    02 08             	r2 = r0			  ## list.c:218:0
  1004dc:    a1 17             	call -0xbe <local_irq_disable : 100420 >			  ## list.c:221:5
  1004de:    08 00             	csync			  ## list.c:221:5
  1004e0:    11 44             	r1 = [r2 + 0x4]			  ## list.c:224:21
  1004e2:    20 44             	r0 = [r2 + 0x8]			  ## list.c:224:58
  1004e4:    43 44             	r3 = [r2 + 0x10]			  ## list.c:222:55
  1004e6:    28 42             	[r1 + 0x8] = r0			  ## list.c:224:40
  1004e8:    20 44             	r0 = [r2 + 0x8]			  ## list.c:225:21
  1004ea:    19 40             	[r0 + 0x4] = r1			  ## list.c:225:40
  1004ec:    11 46             	r1 = [r3 + 0x4]			  ## list.c:231:17
  1004ee:    21 f2 01 10       	if (r1 != r2) goto 0x2 <uxListRemove+0x1C : 1004f4 >			  ## list.c:231:17
  1004f2:    18 46             	[r3 + 0x4] = r0			  ## list.c:232:25
  1004f4:    c4 f4 00 29       	[r2 + 0x10] = 0x0			  ## list.c:237:33
  1004f8:    00 46             	r0 = [r3 + 0x0]			  ## list.c:238:30
  1004fa:    f0 8f             	r0 += -0x1			  ## list.c:238:30
  1004fc:    08 46             	[r3 + 0x0] = r0			  ## list.c:238:30
  1004fe:    98 17             	call -0xd0 <local_irq_enable : 100430 >			  ## list.c:239:5
  100500:    00 46             	r0 = [r3 + 0x0]			  ## list.c:240:20
  100502:    30 00             	pc = [sp++]			  ## list.c:240:5


vListInsertEnd:
  100504:    12 40             	r2 = [r0 + 0x4]			  ## list.c:124:0
  100506:    1a 42             	[r1 + 0x4] = r2			  ## list.c:136:27
  100508:    23 44             	r3 = [r2 + 0x8]			  ## list.c:137:42
  10050a:    2b 42             	[r1 + 0x8] = r3			  ## list.c:137:31
  10050c:    23 44             	r3 = [r2 + 0x8]			  ## list.c:142:14
  10050e:    19 46             	[r3 + 0x4] = r1			  ## list.c:142:33
  100510:    29 44             	[r2 + 0x8] = r1			  ## list.c:143:25
  100512:    48 42             	[r1 + 0x10] = r0			  ## list.c:146:32
  100514:    01 40             	r1 = [r0 + 0x0]			  ## list.c:148:30
  100516:    11 80             	r1 += 0x1			  ## list.c:148:30
  100518:    09 40             	[r0 + 0x0] = r1			  ## list.c:148:30
  10051a:    20 00             	rts			  ## list.c:151:1


prvResetNextTaskUnblockTime:
  10051c:    c0 ff f8 fd 00 00 	r0 = 0xfdf8 <pxDelayedTaskList : fdf8 >			  ## tasks.c:3479:0
  100522:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:3482:9
  100524:    01 42             	r1 = [r1 + 0x0]			  ## tasks.c:3482:9
  100526:    05 22             	if (r1 == 0x0) goto 0xa <prvResetNextTaskUnblockTime+0x16 : 100532 >			  ## tasks.c:3482:9
  100528:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3493:29
  10052a:    30 40             	r0 = [r0 + 0xc]			  ## tasks.c:3493:29
  10052c:    30 40             	r0 = [r0 + 0xc]			  ## tasks.c:3493:29
  10052e:    50 40             	r0 = [r0 + 0x14]			  ## tasks.c:3494:32
  100530:    01 18             	goto 0x2 <prvResetNextTaskUnblockTime+0x18 : 100534 >
  100532:    f0 07             	r0 = -0x1
  100534:    c1 ff ac fc 00 00 	r1 = 0xfcac <xNextTaskUnblockTime : fcac >
  10053a:    08 42             	[r1 + 0x0] = r0
  10053c:    20 00             	rts			  ## tasks.c:3496:1


xTaskRemoveFromEventList:
  10053e:    75 01             	[--sp] = {rets, r5, r4}			  ## tasks.c:2788:0
  100540:    02 08             	r2 = r0			  ## tasks.c:2788:0
  100542:    6e 17             	call -0x124 <local_irq_disable : 100420 >			  ## tasks.c:2805:5
  100544:    08 00             	csync			  ## tasks.c:2805:5
  100546:    30 44             	r0 = [r2 + 0xc]			  ## tasks.c:2806:32
  100548:    35 40             	r5 = [r0 + 0xc]			  ## tasks.c:2806:32
  10054a:    0d 3a             	if (r5 != 0x0) goto 0x1a <xTaskRemoveFromEventList+0x28 : 100566 >
  10054c:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  100552:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100554:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  10055a:    c1 ff f9 23 10 00 	r1 = 0x1023f9 <$data.__1+0x21A : 1023f8 >			  ## FreeRTOSConfig.h:181:5
  100560:    02 fb f7 0a       	r2 = 0xaf7 <usb_code_size+0x75 : af6 >			  ## FreeRTOSConfig.h:181:5
  100564:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100566:    54 fc 28 00       	r4 = r5 + 0x28			  ## tasks.c:2808:43
  10056a:    40 08             	r0 = r4			  ## tasks.c:2808:12
  10056c:    b5 17             	call -0x96 <uxListRemove : 1004d8 >			  ## tasks.c:2808:12
  10056e:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:2810:9
  100574:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2810:9
  100576:    04 20             	if (r0 == 0x0) goto 0x8 <xTaskRemoveFromEventList+0x42 : 100580 >			  ## tasks.c:2810:9
  100578:    c0 ff bc fd 00 00 	r0 = 0xfdbc <xPendingReadyList : fdbc >			  ## tasks.c:2816:9
  10057e:    12 18             	goto 0x24 <xTaskRemoveFromEventList+0x66 : 1005a4 >			  ## tasks.c:2816:9
  100580:    44 9b             	r4 = r5 + 0x14			  ## tasks.c:2811:47
  100582:    40 08             	r0 = r4			  ## tasks.c:2811:16
  100584:    a9 17             	call -0xae <uxListRemove : 1004d8 >			  ## tasks.c:2811:16
  100586:    f1 4a             	r1 = [r5 + 0x3c]			  ## tasks.c:2812:9
  100588:    c0 ff a0 fc 00 00 	r0 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:2812:9
  10058e:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:2812:9
  100590:    13 70             	r3 = 0x1			  ## tasks.c:2812:9
  100592:    43 0c             	r3 <<= r1			  ## tasks.c:2812:9
  100594:    52 b6             	r2 |= r3			  ## tasks.c:2812:9
  100596:    0a 40             	[r0 + 0x0] = r2			  ## tasks.c:2812:9
  100598:    42 71             	r2 = 0x14			  ## tasks.c:2812:9
  10059a:    c0 ff f4 fc 00 00 	r0 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:2812:9
  1005a0:    80 fe 20 01       	r0 += r1 * r2			  ## tasks.c:2812:9
  1005a4:    41 08             	r1 = r4
  1005a6:    ae 17             	call -0xa4 <vListInsertEnd : 100504 >
  1005a8:    52 fc 3c 00       	r2 = r5 + 0x3c
  1005ac:    41 17             	call -0x17e <local_irq_enable : 100430 >			  ## tasks.c:2818:5
  1005ae:    03 44             	r3 = [r2 + 0x0]			  ## tasks.c:2819:25
  1005b0:    37 17             	call -0x192 <local_irq_disable : 100420 >			  ## tasks.c:2819:38
  1005b2:    08 00             	csync			  ## tasks.c:2819:38
  1005b4:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2819:38
  1005ba:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:2819:38
  1005bc:    39 17             	call -0x18e <local_irq_enable : 100430 >			  ## tasks.c:2819:38
  1005be:    f0 44             	r0 = [r2 + 0x3c]			  ## tasks.c:2819:52
  1005c0:    02 70             	r2 = 0x0			  ## tasks.c:2819:52
  1005c2:    03 f2 05 90       	if (r3 <= r0) goto 0xa <xTaskRemoveFromEventList+0x92 : 1005d0 >
  1005c6:    c0 ff b4 fc 00 00 	r0 = 0xfcb4 <xYieldPending : fcb4 >			  ## tasks.c:2827:23
  1005cc:    12 70             	r2 = 0x1			  ## tasks.c:2827:23
  1005ce:    0a 40             	[r0 + 0x0] = r2			  ## tasks.c:2827:23
  1005d0:    a5 17             	call -0xb6 <prvResetNextTaskUnblockTime : 10051c >			  ## tasks.c:2842:9
  1005d2:    20 08             	r0 = r2			  ## tasks.c:2846:5
  1005d4:    55 01             	{pc, r5, r4} = [sp++]			  ## tasks.c:2846:5


xTaskSwitchContext:
  1005d6:    75 01             	[--sp] = {rets, r5, r4}			  ## tasks.c:2653:0
  1005d8:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:2655:9
  1005de:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:2655:9
  1005e0:    c0 ff b4 fc 00 00 	r0 = 0xfcb4 <xYieldPending : fcb4 >			  ## tasks.c:2655:9
  1005e6:    04 22             	if (r1 == 0x0) goto 0x8 <xTaskSwitchContext+0x1A : 1005f0 >			  ## tasks.c:2655:9
  1005e8:    c0 f4 01 09       	[r0 + 0x0] = 0x1			  ## tasks.c:2658:23
  1005ec:    00 70             	r0 = 0x0			  ## tasks.c:2658:23
  1005ee:    55 01             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1
  1005f0:    c0 f4 00 09       	[r0 + 0x0] = 0x0			  ## tasks.c:2661:23
  1005f4:    15 17             	call -0x1d6 <local_irq_disable : 100420 >			  ## tasks.c:2596:5
  1005f6:    08 00             	csync			  ## tasks.c:2596:5
  1005f8:    c0 ff a0 fc 00 00 	r0 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:2598:5
  1005fe:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2598:5
  100600:    e8 fd 00 00       	r0 = clz(r0)			  ## tasks.c:2598:5
  100604:    15 fd 1f 09       	r5 = r0 ^ 0x1f			  ## tasks.c:2598:5
  100608:    00 fe 14 59       	r0 = r5 * 0x14			  ## tasks.c:2616:5
  10060c:    c4 ff f4 fc 00 00 	r4 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:2616:5
  100612:    80 f6 00 04       	r0 = [r0+r4]			  ## tasks.c:2616:5
  100616:    0d 30             	if (r0 != 0x0) goto 0x1a <xTaskSwitchContext+0x5C : 100632 >			  ## tasks.c:2616:5
  100618:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  10061e:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100620:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  100626:    c1 ff 7d 23 10 00 	r1 = 0x10237d <$data.__1+0x19E : 10237c >			  ## FreeRTOSConfig.h:181:5
  10062c:    02 fb 38 0a       	r2 = 0xa38 <stack_bss_begin+0x218 : a38 >			  ## FreeRTOSConfig.h:181:5
  100630:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100632:    40 71             	r0 = 0x14
  100634:    80 fe 00 45       	r4 += r5 * r0			  ## tasks.c:2618:5
  100638:    10 48             	r0 = [r4 + 0x4]			  ## tasks.c:2618:5
  10063a:    10 40             	r0 = [r0 + 0x4]			  ## tasks.c:2618:5
  10063c:    81 98             	r1 = r4 + 0x8			  ## tasks.c:2618:5
  10063e:    18 48             	[r4 + 0x4] = r0			  ## tasks.c:2618:5
  100640:    10 f2 02 10       	if (r0 != r1) goto 0x4 <xTaskSwitchContext+0x72 : 100648 >			  ## tasks.c:2618:5
  100644:    10 40             	r0 = [r0 + 0x4]			  ## tasks.c:2618:5
  100646:    18 48             	[r4 + 0x4] = r0			  ## tasks.c:2618:5
  100648:    30 40             	r0 = [r0 + 0xc]			  ## tasks.c:2618:5
  10064a:    c1 ff c0 fc 00 00 	r1 = 0xfcc0 <highCurrentTCB : fcc0 >			  ## tasks.c:2618:5
  100650:    08 42             	[r1 + 0x0] = r0			  ## tasks.c:2618:5
  100652:    ee 16             	call -0x224 <local_irq_enable : 100430 >			  ## tasks.c:2649:5
  100654:    10 70             	r0 = 0x1			  ## tasks.c:2649:5
  100656:    55 01             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1


vPortYield:
  100658:    75 01             	[--sp] = {rets, r5, r4}			  ## port.c:310:0
  10065a:    e2 16             	call -0x23c <local_irq_disable : 100420 >			  ## port.c:324:5
  10065c:    08 00             	csync			  ## port.c:324:5
  10065e:    bb 17             	call -0x8a <xTaskSwitchContext : 1005d6 >			  ## port.c:326:9
  100660:    16 20             	if (r0 == 0x0) goto 0x2c <vPortYield+0x36 : 10068e >			  ## port.c:326:9
  100662:    00 70             	r0 = 0x0
  100664:    c1 ff c0 fc 00 00 	r1 = 0xfcc0 <highCurrentTCB : fcc0 >
  10066a:    c2 ff 94 fc 00 00 	r2 = 0xfc94 <CurrentTCB : fc94 >
  100670:    c3 ff a0 e1 1b 00 	r3 = 0x1be1a0 <__stub_uECC_vli_cmp_unsafe+0xB71A4 : 1be1a0 >
  100676:    09 18             	goto 0x12 <vPortYield+0x32 : 10068a >
  100678:    84 f6 00 01       	r4 = [r0+r1]			  ## port.c:349:30
  10067c:    85 f6 00 02       	r5 = [r0+r2]			  ## port.c:349:13
  100680:    45 f2 02 00       	if (r5 == r4) goto 0x4 <vPortYield+0x30 : 100688 >			  ## port.c:349:13
  100684:    00 f4 08 39       	[r3 + 0x0] |= 0x8			  ## port.c:356:35
  100688:    40 80             	r0 += 0x4			  ## port.c:347:5
  10068a:    40 e0 f5 1f       	if (r0 != 0x4) goto -0x16 <vPortYield+0x20 : 100678 >
  10068e:    15 01             	{rets, r5, r4} = [sp++]
  100690:    cf 1e             	goto -0x262 <local_irq_enable : 100430 >


vListInitialise:
  100692:    81 90             	r1 = r0 + 0x8			  ## list.c:87:0
  100694:    19 40             	[r0 + 0x4] = r1			  ## list.c:91:21
  100696:    c2 f4 ff 0f       	[r0 + 0x8] = 0xffffffff			  ## list.c:95:33
  10069a:    39 40             	[r0 + 0xc] = r1			  ## list.c:99:29
  10069c:    49 40             	[r0 + 0x10] = r1			  ## list.c:100:33
  10069e:    c0 f4 00 09       	[r0 + 0x0] = 0x0			  ## list.c:102:29
  1006a2:    20 00             	rts			  ## list.c:108:1


xQueueGenericReset:
  1006a4:    75 01             	[--sp] = {rets, r5, r4}			  ## queue.c:284:0
  1006a6:    15 08             	r5 = r1			  ## queue.c:284:0
  1006a8:    04 08             	r4 = r0			  ## queue.c:284:0
  1006aa:    0d 38             	if (r4 != 0x0) goto 0x1a <xQueueGenericReset+0x22 : 1006c6 >			  ## queue.c:284:0
  1006ac:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1006b2:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1006b4:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  1006ba:    c1 ff de 21 10 00 	r1 = 0x1021de <$data.__1 : 1021de >			  ## FreeRTOSConfig.h:181:5
  1006c0:    02 fb 1f 01       	r2 = 0x11f <var_bss_size+0x16 : 11e >			  ## FreeRTOSConfig.h:181:5
  1006c4:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1006c6:    ac 16             	call -0x2a8 <local_irq_disable : 100420 >			  ## queue.c:289:5
  1006c8:    08 00             	csync			  ## queue.c:289:5
  1006ca:    f0 48             	r0 = [r4 + 0x3c]			  ## queue.c:291:55
  1006cc:    01 48             	r1 = [r4 + 0x0]			  ## queue.c:291:36
  1006ce:    02 49             	r2 = [r4 + 0x40]			  ## queue.c:291:75
  1006d0:    13 08             	r3 = r1			  ## queue.c:291:43
  1006d2:    80 fe 00 32       	r3 += r2 * r0			  ## queue.c:291:43
  1006d6:    1b 48             	[r4 + 0x4] = r3			  ## queue.c:291:25
  1006d8:    ce f4 00 49       	[r4 + 0x38] = 0x0			  ## queue.c:292:36
  1006dc:    29 48             	[r4 + 0x8] = r1			  ## queue.c:293:28
  1006de:    f0 8f             	r0 += -0x1			  ## queue.c:294:71
  1006e0:    80 fe 20 10       	r1 += r0 * r2			  ## queue.c:294:49
  1006e4:    39 48             	[r4 + 0xc] = r1			  ## queue.c:294:31
  1006e6:    f0 7f             	r0 = 0xff			  ## queue.c:294:31
  1006e8:    10 f9 44 40       	b[r4 + 0x44] = r0			  ## queue.c:295:26
  1006ec:    10 f9 45 40       	b[r4 + 0x45] = r0			  ## queue.c:296:26
  1006f0:    00 99             	r0 = r4 + 0x10			  ## queue.c:296:26
  1006f2:    05 2a             	if (r5 == 0x0) goto 0xa <xQueueGenericReset+0x5A : 1006fe >			  ## queue.c:296:26
  1006f4:    ce 17             	call -0x64 <vListInitialise : 100692 >			  ## queue.c:315:13
  1006f6:    40 fc 24 00       	r0 = r4 + 0x24			  ## queue.c:316:40
  1006fa:    cb 17             	call -0x6a <vListInitialise : 100692 >			  ## queue.c:316:13
  1006fc:    05 18             	goto 0xa <xQueueGenericReset+0x64 : 100708 >			  ## queue.c:316:13
  1006fe:    41 48             	r1 = [r4 + 0x10]			  ## queue.c:304:17
  100700:    03 22             	if (r1 == 0x0) goto 0x6 <xQueueGenericReset+0x64 : 100708 >			  ## queue.c:304:17
  100702:    1d 17             	call -0x1c6 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:305:21
  100704:    01 20             	if (r0 == 0x0) goto 0x2 <xQueueGenericReset+0x64 : 100708 >			  ## queue.c:305:21
  100706:    a8 17             	call -0xb0 <vPortYield : 100658 >			  ## queue.c:306:21
  100708:    93 16             	call -0x2da <local_irq_enable : 100430 >			  ## queue.c:319:5
  10070a:    10 70             	r0 = 0x1			  ## queue.c:323:5
  10070c:    55 01             	{pc, r5, r4} = [sp++]			  ## queue.c:323:5


xQueueGenericCreateStatic:
  10070e:    7b 01             	[--sp] = {rets, r11-r4}			  ## queue.c:330:0
  100710:    fe 0b             	sp += -0x4			  ## queue.c:330:0
  100712:    34 08             	r4 = r3			  ## queue.c:330:0
  100714:    27 08             	r7 = r2			  ## queue.c:330:0
  100716:    15 08             	r5 = r1			  ## queue.c:330:0
  100718:    0b 08             	r11 = r0			  ## queue.c:330:0
  10071a:    ca ff e8 fc 00 00 	r10 = 0xfce8 <mask_log_e : fce8 >			  ## queue.c:330:0
  100720:    c8 ff f1 21 10 00 	r8 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## queue.c:330:0
  100726:    c9 ff f8 21 10 00 	r9 = 0x1021f8 <$data.__1+0x1A : 1021f8 >			  ## queue.c:330:0
  10072c:    07 30             	if (r0 != 0x0) goto 0xe <xQueueGenericCreateStatic+0x2E : 10073c >			  ## queue.c:330:0
  10072e:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100732:    02 fb 4d 01       	r2 = 0x14d <var_bss_size+0x44 : 14c >			  ## FreeRTOSConfig.h:181:5
  100736:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  100738:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  10073a:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10073c:    07 38             	if (r4 != 0x0) goto 0xe <xQueueGenericCreateStatic+0x3E : 10074c >
  10073e:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100742:    02 fb 51 01       	r2 = 0x151 <var_bss_size+0x48 : 150 >			  ## FreeRTOSConfig.h:181:5
  100746:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  100748:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  10074a:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10074c:    08 3a             	if (r5 != 0x0) goto 0x10 <xQueueGenericCreateStatic+0x50 : 10075e >
  10074e:    07 2e             	if (r7 == 0x0) goto 0xe <xQueueGenericCreateStatic+0x50 : 10075e >
  100750:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100754:    02 fb 55 01       	r2 = 0x155 <var_bss_size+0x4C : 154 >			  ## FreeRTOSConfig.h:181:5
  100758:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  10075a:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  10075c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10075e:    08 2a             	if (r5 == 0x0) goto 0x10 <xQueueGenericCreateStatic+0x62 : 100770 >
  100760:    07 3e             	if (r7 != 0x0) goto 0xe <xQueueGenericCreateStatic+0x62 : 100770 >
  100762:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100766:    02 fb 56 01       	r2 = 0x156 <var_bss_size+0x4E : 156 >			  ## FreeRTOSConfig.h:181:5
  10076a:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  10076c:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  10076e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100770:    00 75             	r0 = 0x50			  ## queue.c:349:25
  100772:    08 02             	[sp] = r0			  ## queue.c:349:25
  100774:    00 02             	r0 = [sp]			  ## queue.c:350:9
  100776:    00 e5 07 00       	if (r0 == 0x50) goto 0xe <xQueueGenericCreateStatic+0x7A : 100788 >
  10077a:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10077e:    02 fb 5e 01       	r2 = 0x15e <var_bss_size+0x56 : 15e >			  ## FreeRTOSConfig.h:181:5
  100782:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  100784:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  100786:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100788:    10 28             	if (r4 == 0x0) goto 0x20 <xQueueGenericCreateStatic+0x9C : 1007aa >
  10078a:    a6 02             	r6 = [sp+40]
  10078c:    10 70             	r0 = 0x1
  10078e:    10 f9 46 40       	b[r4 + 0x46] = r0			  ## queue.c:365:47
  100792:    40 08             	r0 = r4			  ## queue.c:428:9
  100794:    01 2a             	if (r5 == 0x0) goto 0x2 <xQueueGenericCreateStatic+0x8A : 100798 >			  ## queue.c:428:9
  100796:    70 08             	r0 = r7			  ## queue.c:428:9
  100798:    08 48             	[r4 + 0x0] = r0
  10079a:    1b f6 3c 40       	[r4 + 0x3c] = r11			  ## queue.c:441:26
  10079e:    0d 49             	[r4 + 0x40] = r5			  ## queue.c:442:28
  1007a0:    11 70             	r1 = 0x1			  ## queue.c:443:12
  1007a2:    40 08             	r0 = r4			  ## queue.c:443:12
  1007a4:    7f 17             	call -0x102 <xQueueGenericReset : 1006a4 >			  ## queue.c:443:12
  1007a6:    16 f9 4c 40       	b[r4 + 0x4c] = r6			  ## queue.c:447:33
  1007aa:    40 08             	r0 = r4			  ## queue.c:372:5
  1007ac:    02 0a             	sp += 0x4			  ## queue.c:372:5
  1007ae:    5b 01             	{pc, r11-r4} = [sp++]			  ## queue.c:372:5


prvCopyDataToQueue:
  1007b0:    7a 01             	[--sp] = {rets, r10-r4}			  ## queue.c:1526:0
  1007b2:    04 08             	r4 = r0			  ## queue.c:1526:0
  1007b4:    e7 48             	r7 = [r4 + 0x38]			  ## queue.c:1532:34
  1007b6:    03 49             	r3 = [r4 + 0x40]			  ## queue.c:1534:18
  1007b8:    26 08             	r6 = r2			  ## queue.c:1534:18
  1007ba:    1c 26             	if (r3 == 0x0) goto 0x38 <prvCopyDataToQueue+0x44 : 1007f4 >
  1007bc:    78 2c             	if (r6 == 0x0) goto 0xf0 <prvCopyDataToQueue+0xFE : 1008ae >
  1007be:    30 48             	r0 = [r4 + 0xc]			  ## queue.c:1557:43
  1007c0:    32 08             	r2 = r3			  ## queue.c:1557:16
  1007c2:    bf f3 3d fc       	call -0x786 <memmove : 100040 >			  ## queue.c:1557:16
  1007c6:    00 49             	r0 = [r4 + 0x40]			  ## queue.c:1558:43
  1007c8:    31 48             	r1 = [r4 + 0xc]			  ## queue.c:1558:31
  1007ca:    21 b2             	r1 = r1 - r0			  ## queue.c:1558:31
  1007cc:    39 48             	[r4 + 0xc] = r1			  ## queue.c:1558:31
  1007ce:    02 48             	r2 = [r4 + 0x0]			  ## queue.c:1559:46
  1007d0:    21 f2 05 20       	if (r1 >= r2) goto 0xa <prvCopyDataToQueue+0x2E : 1007de >			  ## queue.c:1559:46
  1007d4:    11 48             	r1 = [r4 + 0x4]			  ## queue.c:1560:47
  1007d6:    60 fb 00 09       	r0 = 0x0 - r0			  ## queue.c:1558:31
  1007da:    10 09             	r0 += r1			  ## queue.c:1560:54
  1007dc:    38 48             	[r4 + 0xc] = r0			  ## queue.c:1560:35
  1007de:    05 70             	r5 = 0x0
  1007e0:    10 70             	r0 = 0x1
  1007e2:    11 70             	r1 = 0x1			  ## queue.c:1566:35
  1007e4:    01 3e             	if (r7 != 0x0) goto 0x2 <prvCopyDataToQueue+0x38 : 1007e8 >			  ## queue.c:1566:35
  1007e6:    01 70             	r1 = 0x0			  ## queue.c:1566:35
  1007e8:    26 e0 01 00       	if (r6 == 0x2) goto 0x2 <prvCopyDataToQueue+0x3E : 1007ee >
  1007ec:    00 70             	r0 = 0x0			  ## queue.c:1565:23
  1007ee:    50 b3             	r0 &= r1			  ## queue.c:1565:13
  1007f0:    27 be             	r7 = r7 - r0			  ## queue.c:1565:13
  1007f2:    6b 18             	goto 0xd6 <prvCopyDataToQueue+0x11A : 1008ca >
  1007f4:    00 48             	r0 = [r4 + 0x0]			  ## queue.c:1537:26
  1007f6:    05 70             	r5 = 0x0			  ## queue.c:1537:26
  1007f8:    68 30             	if (r0 != 0x0) goto 0xd0 <prvCopyDataToQueue+0x11A : 1008ca >			  ## queue.c:1537:26
  1007fa:    16 48             	r6 = [r4 + 0x4]			  ## queue.c:1540:69
  1007fc:    08 70             	r8 = 0x0
  1007fe:    54 2c             	if (r6 == 0x0) goto 0xa8 <prvCopyDataToQueue+0xF8 : 1008a8 >
  100800:    0f 16             	call -0x3e2 <local_irq_disable : 100420 >			  ## tasks.c:3603:9
  100802:    08 00             	csync			  ## tasks.c:3603:9
  100804:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:3603:9
  10080a:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:3603:9
  10080c:    11 16             	call -0x3de <local_irq_enable : 100430 >			  ## tasks.c:3603:9
  10080e:    c5 ff e8 fc 00 00 	r5 = 0xfce8 <mask_log_e : fce8 >			  ## tasks.c:3603:9
  100814:    c9 ff 3b 23 10 00 	r9 = 0x10233b <$data.__1+0x15C : 10233a >			  ## tasks.c:3603:9
  10081a:    ca ff 3c 24 10 00 	r10 = 0x10243c <$data.__1+0x25E : 10243c >			  ## tasks.c:3603:9
  100820:    26 f2 06 00       	if (r6 == r2) goto 0xc <prvCopyDataToQueue+0x80 : 100830 >			  ## tasks.c:3603:9
  100824:    03 4a             	r3 = [r5 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100826:    02 fb 13 0e       	r2 = 0xe13 <_stack+0x1F2 : e12 >			  ## FreeRTOSConfig.h:181:5
  10082a:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  10082c:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  10082e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100830:    40 4d             	r0 = [r6 + 0x50]			  ## tasks.c:3605:9
  100832:    07 30             	if (r0 != 0x0) goto 0xe <prvCopyDataToQueue+0x92 : 100842 >			  ## tasks.c:3605:9
  100834:    03 4a             	r3 = [r5 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100836:    02 fb 15 0e       	r2 = 0xe15 <_stack+0x1F4 : e14 >			  ## FreeRTOSConfig.h:181:5
  10083a:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  10083c:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  10083e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100840:    40 4d             	r0 = [r6 + 0x50]			  ## FreeRTOSConfig.h:181:5
  100842:    f0 8f             	r0 += -0x1			  ## tasks.c:3606:31
  100844:    48 4d             	[r6 + 0x50] = r0			  ## tasks.c:3606:31
  100846:    05 70             	r5 = 0x0			  ## tasks.c:3606:31
  100848:    2f 30             	if (r0 != 0x0) goto 0x5e <prvCopyDataToQueue+0xF8 : 1008a8 >			  ## tasks.c:3606:31
  10084a:    30 4d             	r0 = [r6 + 0x4c]			  ## tasks.c:3610:41
  10084c:    f1 4c             	r1 = [r6 + 0x3c]			  ## tasks.c:3610:20
  10084e:    01 f2 2b 00       	if (r1 == r0) goto 0x56 <prvCopyDataToQueue+0xF8 : 1008a8 >			  ## tasks.c:3610:20
  100852:    e6 15             	call -0x434 <local_irq_disable : 100420 >			  ## tasks.c:3618:17
  100854:    08 00             	csync			  ## tasks.c:3618:17
  100856:    49 9d             	r9 = r6 + 0x14			  ## tasks.c:3619:43
  100858:    90 08             	r0 = r9			  ## tasks.c:3619:21
  10085a:    3e 16             	call -0x384 <uxListRemove : 1004d8 >			  ## tasks.c:3619:21
  10085c:    01 08             	r1 = r0			  ## tasks.c:3619:21
  10085e:    c0 ff f4 fc 00 00 	r0 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:3619:21
  100864:    c2 ff a0 fc 00 00 	r2 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:3619:21
  10086a:    0d 32             	if (r1 != 0x0) goto 0x1a <prvCopyDataToQueue+0xD6 : 100886 >			  ## tasks.c:3619:21
  10086c:    f1 4c             	r1 = [r6 + 0x3c]			  ## tasks.c:3620:21
  10086e:    03 fe 14 19       	r3 = r1 * 0x14			  ## tasks.c:3620:21
  100872:    83 f6 00 30       	r3 = [r3+r0]			  ## tasks.c:3620:21
  100876:    07 36             	if (r3 != 0x0) goto 0xe <prvCopyDataToQueue+0xD6 : 100886 >			  ## tasks.c:3620:21
  100878:    03 44             	r3 = [r2 + 0x0]			  ## tasks.c:3620:21
  10087a:    15 70             	r5 = 0x1			  ## tasks.c:3620:21
  10087c:    f8 fd 10 15       	r1 = r5 << r1			  ## tasks.c:3620:21
  100880:    e3 fd 10 13       	r1 = r3 & ~r1			  ## tasks.c:3620:21
  100884:    09 44             	[r2 + 0x0] = r1			  ## tasks.c:3620:21
  100886:    31 4d             	r1 = [r6 + 0x4c]			  ## tasks.c:3628:44
  100888:    f9 4c             	[r6 + 0x3c] = r1			  ## tasks.c:3628:35
  10088a:    63 fb 08 19       	r3 = 0x8 - r1			  ## tasks.c:3633:17
  10088e:    ab 4c             	[r6 + 0x28] = r3			  ## tasks.c:3633:17
  100890:    03 44             	r3 = [r2 + 0x0]			  ## tasks.c:3634:17
  100892:    15 70             	r5 = 0x1			  ## tasks.c:3634:17
  100894:    f8 fd 10 65       	r6 = r5 << r1			  ## tasks.c:3634:17
  100898:    53 bc             	r3 |= r6			  ## tasks.c:3634:17
  10089a:    0b 44             	[r2 + 0x0] = r3			  ## tasks.c:3634:17
  10089c:    42 71             	r2 = 0x14			  ## tasks.c:3634:17
  10089e:    80 fe 20 01       	r0 += r1 * r2			  ## tasks.c:3634:17
  1008a2:    91 08             	r1 = r9			  ## tasks.c:3634:17
  1008a4:    2f 16             	call -0x3a2 <vListInsertEnd : 100504 >			  ## tasks.c:3634:17
  1008a6:    c4 15             	call -0x478 <local_irq_enable : 100430 >			  ## tasks.c:3635:17
  1008a8:    18 f6 04 40       	[r4 + 0x4] = r8			  ## queue.c:1541:40
  1008ac:    0e 18             	goto 0x1c <prvCopyDataToQueue+0x11A : 1008ca >			  ## queue.c:1541:40
  1008ae:    20 48             	r0 = [r4 + 0x8]			  ## queue.c:1549:41
  1008b0:    32 08             	r2 = r3			  ## queue.c:1549:16
  1008b2:    bf f3 c5 fb       	call -0x876 <memmove : 100040 >			  ## queue.c:1549:16
  1008b6:    00 49             	r0 = [r4 + 0x40]			  ## queue.c:1550:40
  1008b8:    21 48             	r1 = [r4 + 0x8]			  ## queue.c:1550:28
  1008ba:    10 09             	r0 += r1			  ## queue.c:1550:28
  1008bc:    28 48             	[r4 + 0x8] = r0			  ## queue.c:1550:28
  1008be:    11 48             	r1 = [r4 + 0x4]			  ## queue.c:1551:44
  1008c0:    05 70             	r5 = 0x0			  ## queue.c:1551:44
  1008c2:    10 f2 02 30       	if (r0 < r1) goto 0x4 <prvCopyDataToQueue+0x11A : 1008ca >			  ## queue.c:1551:44
  1008c6:    00 48             	r0 = [r4 + 0x0]			  ## queue.c:1552:43
  1008c8:    28 48             	[r4 + 0x8] = r0			  ## queue.c:1552:32
  1008ca:    10 9e             	r0 = r7 + 0x1			  ## queue.c:1580:52
  1008cc:    e8 48             	[r4 + 0x38] = r0			  ## queue.c:1580:32
  1008ce:    50 08             	r0 = r5			  ## queue.c:1582:5
  1008d0:    5a 01             	{pc, r10-r4} = [sp++]			  ## queue.c:1582:5


vTaskSuspendAll:
  1008d2:    34 00             	[--sp] = rets			  ## tasks.c:1854:0
  1008d4:    a5 15             	call -0x4b6 <local_irq_disable : 100420 >			  ## tasks.c:1860:5
  1008d6:    08 00             	csync			  ## tasks.c:1860:5
  1008d8:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:1862:5
  1008de:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:1862:5
  1008e0:    11 80             	r1 += 0x1			  ## tasks.c:1862:5
  1008e2:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1862:5
  1008e4:    30 00             	pc = [sp++]			  ## tasks.c:1866:1


vTaskSetTimeOutState:
  1008e6:    74 01             	[--sp] = {rets, r4}			  ## tasks.c:2894:0
  1008e8:    04 08             	r4 = r0			  ## tasks.c:2894:0
  1008ea:    0d 38             	if (r4 != 0x0) goto 0x1a <vTaskSetTimeOutState+0x20 : 100906 >			  ## tasks.c:2894:0
  1008ec:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1008f2:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1008f4:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  1008fa:    c1 ff 12 24 10 00 	r1 = 0x102412 <$data.__1+0x234 : 102412 >			  ## FreeRTOSConfig.h:181:5
  100900:    02 fb 4f 0b       	r2 = 0xb4f <usb_code_size+0xCD : b4e >			  ## FreeRTOSConfig.h:181:5
  100904:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100906:    c0 ff bc fc 00 00 	r0 = 0xfcbc <xNumOfOverflows : fcbc >			  ## tasks.c:2896:33
  10090c:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2896:33
  10090e:    08 48             	[r4 + 0x0] = r0			  ## tasks.c:2896:31
  100910:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:2897:34
  100916:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2897:34
  100918:    18 48             	[r4 + 0x4] = r0			  ## tasks.c:2897:32
  10091a:    54 01             	{pc, r4} = [sp++]			  ## tasks.c:2898:1


xTaskCheckForTimeOut:
  10091c:    78 01             	[--sp] = {rets, r8-r4}			  ## tasks.c:2902:0
  10091e:    15 08             	r5 = r1			  ## tasks.c:2902:0
  100920:    04 08             	r4 = r0			  ## tasks.c:2902:0
  100922:    c6 ff e8 fc 00 00 	r6 = 0xfce8 <mask_log_e : fce8 >			  ## tasks.c:2902:0
  100928:    c8 ff 3b 23 10 00 	r8 = 0x10233b <$data.__1+0x15C : 10233a >			  ## tasks.c:2902:0
  10092e:    c7 ff 27 24 10 00 	r7 = 0x102427 <$data.__1+0x248 : 102426 >			  ## tasks.c:2902:0
  100934:    06 38             	if (r4 != 0x0) goto 0xc <xTaskCheckForTimeOut+0x26 : 100942 >			  ## tasks.c:2902:0
  100936:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100938:    02 fb 59 0b       	r2 = 0xb59 <usb_code_size+0xD7 : b58 >			  ## FreeRTOSConfig.h:181:5
  10093c:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  10093e:    71 08             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  100940:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100942:    06 3a             	if (r5 != 0x0) goto 0xc <xTaskCheckForTimeOut+0x34 : 100950 >
  100944:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100946:    02 fb 5a 0b       	r2 = 0xb5a <usb_code_size+0xD9 : b5a >			  ## FreeRTOSConfig.h:181:5
  10094a:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  10094c:    71 08             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  10094e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100950:    67 15             	call -0x532 <local_irq_disable : 100420 >			  ## tasks.c:2908:5
  100952:    08 00             	csync			  ## tasks.c:2908:5
  100954:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:2911:44
  10095a:    03 40             	r3 = [r0 + 0x0]			  ## tasks.c:2911:44
  10095c:    61 15             	call -0x53e <local_irq_disable : 100420 >			  ## tasks.c:2914:13
  10095e:    08 00             	csync			  ## tasks.c:2914:13
  100960:    c2 ff 94 fc 00 00 	r2 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2914:13
  100966:    06 44             	r6 = [r2 + 0x0]			  ## tasks.c:2914:13
  100968:    63 15             	call -0x53a <local_irq_enable : 100430 >			  ## tasks.c:2914:13
  10096a:    00 f9 59 60       	r0 = b[r6 + 0x59] (u)			  ## tasks.c:2914:27
  10096e:    0b 20             	if (r0 == 0x0) goto 0x16 <xTaskCheckForTimeOut+0x6A : 100986 >			  ## tasks.c:2914:13
  100970:    57 15             	call -0x552 <local_irq_disable : 100420 >			  ## tasks.c:2917:13
  100972:    08 00             	csync			  ## tasks.c:2917:13
  100974:    02 44             	r2 = [r2 + 0x0]			  ## tasks.c:2917:13
  100976:    5c 15             	call -0x548 <local_irq_enable : 100430 >			  ## tasks.c:2917:13
  100978:    00 70             	r0 = 0x0			  ## tasks.c:2917:42
  10097a:    10 f9 59 20       	b[r2 + 0x59] = r0			  ## tasks.c:2917:42
  10097e:    12 70             	r2 = 0x1
  100980:    57 15             	call -0x552 <local_irq_enable : 100430 >			  ## tasks.c:2947:5
  100982:    20 08             	r0 = r2			  ## tasks.c:2949:5
  100984:    58 01             	{pc, r8-r4} = [sp++]			  ## tasks.c:2949:5
  100986:    00 4a             	r0 = [r5 + 0x0]			  ## tasks.c:2923:17
  100988:    02 70             	r2 = 0x0			  ## tasks.c:2923:17
  10098a:    f0 ef f9 0f       	if (r0 == -0x1) goto -0xe <xTaskCheckForTimeOut+0x64 : 100980 >			  ## tasks.c:2923:17
  10098e:    c1 ff bc fc 00 00 	r1 = 0xfcbc <xNumOfOverflows : fcbc >			  ## tasks.c:2931:22
  100994:    06 42             	r6 = [r1 + 0x0]			  ## tasks.c:2931:22
  100996:    07 48             	r7 = [r4 + 0x0]			  ## tasks.c:2931:52
  100998:    11 48             	r1 = [r4 + 0x4]			  ## tasks.c:2931:52
  10099a:    12 70             	r2 = 0x1			  ## tasks.c:2931:52
  10099c:    76 f2 02 00       	if (r6 == r7) goto 0x4 <xTaskCheckForTimeOut+0x88 : 1009a4 >			  ## tasks.c:2931:52
  1009a0:    13 f2 ee 2f       	if (r3 >= r1) goto -0x24 <xTaskCheckForTimeOut+0x64 : 100980 >
  1009a4:    61 b6             	r1 = r3 - r1			  ## tasks.c:2938:58
  1009a6:    10 f2 eb 9f       	if (r0 <= r1) goto -0x2a <xTaskCheckForTimeOut+0x64 : 100980 >			  ## tasks.c:2938:58
  1009aa:    60 b0             	r0 = r0 - r1			  ## tasks.c:2940:36
  1009ac:    08 4a             	[r5 + 0x0] = r0			  ## tasks.c:2940:36
  1009ae:    40 08             	r0 = r4			  ## tasks.c:2941:21
  1009b0:    9a 17             	call -0xcc <vTaskSetTimeOutState : 1008e6 >			  ## tasks.c:2941:21
  1009b2:    02 70             	r2 = 0x0
  1009b4:    e5 1f             	goto -0x36 <xTaskCheckForTimeOut+0x64 : 100980 >


vListInsert:
  1009b6:    75 01             	[--sp] = {rets, r5, r4}			  ## list.c:155:0
  1009b8:    04 42             	r4 = [r1 + 0x0]			  ## list.c:157:57
  1009ba:    f4 ef 07 00       	if (r4 == -0x1) goto 0xe <vListInsert+0x16 : 1009cc >
  1009be:    83 90             	r3 = r0 + 0x8
  1009c0:    32 08             	r2 = r3
  1009c2:    13 44             	r3 = [r2 + 0x4]			  ## list.c:198:76
  1009c4:    05 46             	r5 = [r3 + 0x0]			  ## list.c:198:84
  1009c6:    45 f2 fb 9f       	if (r5 <= r4) goto -0xa <vListInsert+0xA : 1009c0 >			  ## list.c:198:84
  1009ca:    02 18             	goto 0x4 <vListInsert+0x1A : 1009d0 >			  ## list.c:198:84
  1009cc:    42 40             	r2 = [r0 + 0x10]			  ## list.c:174:39
  1009ce:    13 44             	r3 = [r2 + 0x4]
  1009d0:    1b 42             	[r1 + 0x4] = r3			  ## list.c:204:27
  1009d2:    29 46             	[r3 + 0x8] = r1			  ## list.c:205:39
  1009d4:    2a 42             	[r1 + 0x8] = r2			  ## list.c:206:31
  1009d6:    19 44             	[r2 + 0x4] = r1			  ## list.c:207:24
  1009d8:    48 42             	[r1 + 0x10] = r0			  ## list.c:211:32
  1009da:    01 40             	r1 = [r0 + 0x0]			  ## list.c:213:30
  1009dc:    11 80             	r1 += 0x1			  ## list.c:213:30
  1009de:    09 40             	[r0 + 0x0] = r1			  ## list.c:213:30
  1009e0:    55 01             	{pc, r5, r4} = [sp++]			  ## list.c:214:1


prvAddCurrentTaskToDelayedList:
  1009e2:    77 01             	[--sp] = {rets, r7-r4}			  ## tasks.c:4419:0
  1009e4:    c2 ff b0 fc 00 00 	r2 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:4421:40
  1009ea:    07 44             	r7 = [r2 + 0x0]			  ## tasks.c:4421:40
  1009ec:    15 08             	r5 = r1
  1009ee:    04 08             	r4 = r0
  1009f0:    17 15             	call -0x5d2 <local_irq_disable : 100420 >			  ## tasks.c:4431:9
  1009f2:    08 00             	csync			  ## tasks.c:4431:9
  1009f4:    c6 ff 94 fc 00 00 	r6 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:4431:9
  1009fa:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:4431:9
  1009fc:    19 15             	call -0x5ce <local_irq_enable : 100430 >			  ## tasks.c:4431:9
  1009fe:    00 70             	r0 = 0x0			  ## tasks.c:4431:9
  100a00:    10 f9 59 20       	b[r2 + 0x59] = r0			  ## tasks.c:4431:38
  100a04:    0d 15             	call -0x5e6 <local_irq_disable : 100420 >			  ## tasks.c:4434:5
  100a06:    08 00             	csync			  ## tasks.c:4434:5
  100a08:    0b 15             	call -0x5ea <local_irq_disable : 100420 >			  ## tasks.c:4437:24
  100a0a:    08 00             	csync			  ## tasks.c:4437:24
  100a0c:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:4437:24
  100a0e:    10 15             	call -0x5e0 <local_irq_enable : 100430 >			  ## tasks.c:4437:24
  100a10:    40 95             	r0 = r2 + 0x14			  ## tasks.c:4437:38
  100a12:    62 15             	call -0x53c <uxListRemove : 1004d8 >			  ## tasks.c:4437:9
  100a14:    0f 30             	if (r0 != 0x0) goto 0x1e <prvAddCurrentTaskToDelayedList+0x52 : 100a34 >
  100a16:    04 15             	call -0x5f8 <local_irq_disable : 100420 >			  ## tasks.c:4442:9
  100a18:    08 00             	csync			  ## tasks.c:4442:9
  100a1a:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:4442:9
  100a1c:    09 15             	call -0x5ee <local_irq_enable : 100430 >			  ## tasks.c:4442:9
  100a1e:    f0 44             	r0 = [r2 + 0x3c]			  ## tasks.c:4442:9
  100a20:    c1 ff a0 fc 00 00 	r1 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:4442:9
  100a26:    02 42             	r2 = [r1 + 0x0]			  ## tasks.c:4442:9
  100a28:    13 70             	r3 = 0x1			  ## tasks.c:4442:9
  100a2a:    f8 fd 00 03       	r0 = r3 << r0			  ## tasks.c:4442:9
  100a2e:    e3 fd 00 02       	r0 = r2 & ~r0			  ## tasks.c:4442:9
  100a32:    08 42             	[r1 + 0x0] = r0			  ## tasks.c:4442:9
  100a34:    fd 14             	call -0x606 <local_irq_enable : 100430 >			  ## tasks.c:4446:5
  100a36:    f4 ef 0b 10       	if (r4 != -0x1) goto 0x16 <prvAddCurrentTaskToDelayedList+0x6E : 100a50 >			  ## tasks.c:4446:5
  100a3a:    0a 2a             	if (r5 == 0x0) goto 0x14 <prvAddCurrentTaskToDelayedList+0x6E : 100a50 >
  100a3c:    f1 14             	call -0x61e <local_irq_disable : 100420 >			  ## tasks.c:4453:51
  100a3e:    08 00             	csync			  ## tasks.c:4453:51
  100a40:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:4453:51
  100a42:    f6 14             	call -0x614 <local_irq_enable : 100430 >			  ## tasks.c:4453:51
  100a44:    41 95             	r1 = r2 + 0x14			  ## tasks.c:4453:65
  100a46:    c0 ff e4 fd 00 00 	r0 = 0xfde4 <xSuspendedTaskList : fde4 >			  ## tasks.c:4453:13
  100a4c:    17 01             	{rets, r7-r4} = [sp++]			  ## tasks.c:4453:13
  100a4e:    5a 1d             	goto -0x54c <vListInsertEnd : 100504 >			  ## tasks.c:4453:13
  100a50:    74 09             	r4 += r7
  100a52:    e6 14             	call -0x634 <local_irq_disable : 100420 >			  ## tasks.c:4461:13
  100a54:    08 00             	csync			  ## tasks.c:4461:13
  100a56:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:4461:13
  100a58:    eb 14             	call -0x62a <local_irq_enable : 100430 >			  ## tasks.c:4461:13
  100a5a:    5c 44             	[r2 + 0x14] = r4			  ## tasks.c:4461:13
  100a5c:    10 70             	r0 = 0x1			  ## tasks.c:4461:13
  100a5e:    74 f2 01 30       	if (r4 < r7) goto 0x2 <prvAddCurrentTaskToDelayedList+0x82 : 100a64 >			  ## tasks.c:4461:13
  100a62:    00 70             	r0 = 0x0
  100a64:    10 e0 0c 10       	if (r0 != 0x1) goto 0x18 <prvAddCurrentTaskToDelayedList+0x9E : 100a80 >			  ## tasks.c:4463:17
  100a68:    c0 ff fc fd 00 00 	r0 = 0xfdfc <pxOverflowDelayedTaskList : fdfc >			  ## tasks.c:4466:29
  100a6e:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:4466:29
  100a70:    d7 14             	call -0x652 <local_irq_disable : 100420 >			  ## tasks.c:4466:58
  100a72:    08 00             	csync			  ## tasks.c:4466:58
  100a74:    03 4c             	r3 = [r6 + 0x0]			  ## tasks.c:4466:58
  100a76:    dc 14             	call -0x648 <local_irq_enable : 100430 >			  ## tasks.c:4466:58
  100a78:    41 97             	r1 = r3 + 0x14			  ## tasks.c:4466:72
  100a7a:    20 08             	r0 = r2			  ## tasks.c:4466:17
  100a7c:    17 01             	{rets, r7-r4} = [sp++]			  ## tasks.c:4466:17
  100a7e:    9b 1f             	goto -0xca <vListInsert : 1009b6 >			  ## tasks.c:4466:17
  100a80:    c0 ff f8 fd 00 00 	r0 = 0xfdf8 <pxDelayedTaskList : fdf8 >			  ## tasks.c:4470:29
  100a86:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:4470:29
  100a88:    cb 14             	call -0x66a <local_irq_disable : 100420 >			  ## tasks.c:4470:50
  100a8a:    08 00             	csync			  ## tasks.c:4470:50
  100a8c:    03 4c             	r3 = [r6 + 0x0]			  ## tasks.c:4470:50
  100a8e:    d0 14             	call -0x660 <local_irq_enable : 100430 >			  ## tasks.c:4470:50
  100a90:    41 97             	r1 = r3 + 0x14			  ## tasks.c:4470:64
  100a92:    20 08             	r0 = r2			  ## tasks.c:4470:17
  100a94:    90 17             	call -0xe0 <vListInsert : 1009b6 >			  ## tasks.c:4470:17
  100a96:    c0 ff ac fc 00 00 	r0 = 0xfcac <xNextTaskUnblockTime : fcac >
  100a9c:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:4475:35
  100a9e:    14 f2 01 20       	if (r4 >= r1) goto 0x2 <prvAddCurrentTaskToDelayedList+0xC2 : 100aa4 >			  ## tasks.c:4475:35
  100aa2:    0c 40             	[r0 + 0x0] = r4			  ## tasks.c:4476:42
  100aa4:    57 01             	{pc, r7-r4} = [sp++]			  ## tasks.c:4514:1


vTaskPlaceOnEventList:
  100aa6:    75 01             	[--sp] = {rets, r5, r4}			  ## tasks.c:2715:0
  100aa8:    14 08             	r4 = r1			  ## tasks.c:2715:0
  100aaa:    05 08             	r5 = r0			  ## tasks.c:2715:0
  100aac:    0d 3a             	if (r5 != 0x0) goto 0x1a <vTaskPlaceOnEventList+0x22 : 100ac8 >			  ## tasks.c:2715:0
  100aae:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  100ab4:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100ab6:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  100abc:    c1 ff e3 23 10 00 	r1 = 0x1023e3 <$data.__1+0x204 : 1023e2 >			  ## FreeRTOSConfig.h:181:5
  100ac2:    02 fb 9c 0a       	r2 = 0xa9c <usb_code_size+0x1B : a9c >			  ## FreeRTOSConfig.h:181:5
  100ac6:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100ac8:    ab 14             	call -0x6aa <local_irq_disable : 100420 >			  ## tasks.c:2725:32
  100aca:    08 00             	csync			  ## tasks.c:2725:32
  100acc:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2725:32
  100ad2:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:2725:32
  100ad4:    ad 14             	call -0x6a6 <local_irq_enable : 100430 >			  ## tasks.c:2725:32
  100ad6:    21 fc 28 00       	r1 = r2 + 0x28			  ## tasks.c:2725:46
  100ada:    50 08             	r0 = r5			  ## tasks.c:2725:5
  100adc:    6c 17             	call -0x128 <vListInsert : 1009b6 >			  ## tasks.c:2725:5
  100ade:    11 70             	r1 = 0x1			  ## tasks.c:2727:5
  100ae0:    40 08             	r0 = r4			  ## tasks.c:2727:5
  100ae2:    15 01             	{rets, r5, r4} = [sp++]			  ## tasks.c:2727:5
  100ae4:    7e 1f             	goto -0x104 <prvAddCurrentTaskToDelayedList : 1009e2 >			  ## tasks.c:2727:5


prvUnlockQueue:
  100ae6:    78 01             	[--sp] = {rets, r8-r4}			  ## queue.c:1601:0
  100ae8:    04 08             	r4 = r0			  ## queue.c:1601:0
  100aea:    9a 14             	call -0x6cc <local_irq_disable : 100420 >			  ## queue.c:1608:5
  100aec:    08 00             	csync			  ## queue.c:1608:5
  100aee:    48 fc 44 00       	r8 = r4 + 0x44			  ## queue.c:1608:5
  100af2:    06 f9 01 80       	r6 = b[r8 + 0x1] (u)			  ## queue.c:1610:35
  100af6:    45 fc 24 00       	r5 = r4 + 0x24			  ## queue.c:1648:21
  100afa:    c7 ff b4 fc 00 00 	r7 = 0xfcb4 <xYieldPending : fcb4 >			  ## queue.c:1648:21
  100b00:    08 18             	goto 0x10 <prvUnlockQueue+0x2C : 100b12 >			  ## queue.c:1648:21
  100b02:    90 48             	r0 = [r4 + 0x24]			  ## queue.c:1648:21
  100b04:    09 20             	if (r0 == 0x0) goto 0x12 <prvUnlockQueue+0x32 : 100b18 >			  ## queue.c:1648:21
  100b06:    50 08             	r0 = r5			  ## queue.c:1649:25
  100b08:    1a 15             	call -0x5cc <xTaskRemoveFromEventList : 10053e >			  ## queue.c:1649:25
  100b0a:    02 20             	if (r0 == 0x0) goto 0x4 <prvUnlockQueue+0x2A : 100b10 >			  ## queue.c:1649:25
  100b0c:    c0 f4 01 79       	[r7 + 0x0] = 0x1			  ## tasks.c:2955:19
  100b10:    f6 8f             	r6 += -0x1			  ## queue.c:1662:13
  100b12:    90 05             	r0 = r6.b0 (s)			  ## queue.c:1613:24
  100b14:    10 e0 f5 af       	ifs (r0 >= 0x1) goto -0x16 <prvUnlockQueue+0x1C : 100b02 >			  ## queue.c:1613:24
  100b18:    f0 7f             	r0 = 0xff			  ## queue.c:1665:26
  100b1a:    10 f9 01 80       	b[r8 + 0x1] = r0			  ## queue.c:1665:26
  100b1e:    88 14             	call -0x6f0 <local_irq_enable : 100430 >			  ## queue.c:1667:5
  100b20:    7f 14             	call -0x702 <local_irq_disable : 100420 >			  ## queue.c:1670:5
  100b22:    08 00             	csync			  ## queue.c:1670:5
  100b24:    06 f9 00 80       	r6 = b[r8 + 0x0] (u)			  ## queue.c:1672:35
  100b28:    05 99             	r5 = r4 + 0x10			  ## queue.c:1675:17
  100b2a:    08 18             	goto 0x10 <prvUnlockQueue+0x56 : 100b3c >			  ## queue.c:1675:17
  100b2c:    40 48             	r0 = [r4 + 0x10]			  ## queue.c:1675:17
  100b2e:    09 20             	if (r0 == 0x0) goto 0x12 <prvUnlockQueue+0x5C : 100b42 >			  ## queue.c:1675:17
  100b30:    50 08             	r0 = r5			  ## queue.c:1676:21
  100b32:    05 15             	call -0x5f6 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:1676:21
  100b34:    02 20             	if (r0 == 0x0) goto 0x4 <prvUnlockQueue+0x54 : 100b3a >			  ## queue.c:1676:21
  100b36:    c0 f4 01 79       	[r7 + 0x0] = 0x1			  ## tasks.c:2955:19
  100b3a:    f6 8f             	r6 += -0x1			  ## queue.c:1682:17
  100b3c:    90 05             	r0 = r6.b0 (s)			  ## queue.c:1674:24
  100b3e:    10 e0 f5 af       	ifs (r0 >= 0x1) goto -0x16 <prvUnlockQueue+0x46 : 100b2c >			  ## queue.c:1674:24
  100b42:    f0 7f             	r0 = 0xff			  ## queue.c:1688:26
  100b44:    10 f9 00 80       	b[r8 + 0x0] = r0			  ## queue.c:1688:26
  100b48:    18 01             	{rets, r8-r4} = [sp++]			  ## queue.c:1690:5
  100b4a:    72 1c             	goto -0x71c <local_irq_enable : 100430 >			  ## queue.c:1690:5


xTaskIncrementTick:
  100b4c:    7d 01             	[--sp] = {rets, r13-r4}			  ## tasks.c:2362:0
  100b4e:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:2370:9
  100b54:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2370:9
  100b56:    08 20             	if (r0 == 0x0) goto 0x10 <xTaskIncrementTick+0x1C : 100b68 >			  ## tasks.c:2370:9
  100b58:    c0 ff b8 fc 00 00 	r0 = 0xfcb8 <uxPendedTicks : fcb8 >			  ## tasks.c:2491:9
  100b5e:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:2491:9
  100b60:    11 80             	r1 += 0x1			  ## tasks.c:2491:9
  100b62:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:2491:9
  100b64:    00 70             	r0 = 0x0			  ## tasks.c:2491:9
  100b66:    7a 18             	goto 0xf4 <xTaskIncrementTick+0x110 : 100c5c >			  ## tasks.c:2491:9
  100b68:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:2373:44
  100b6e:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:2373:44
  100b70:    15 92             	r5 = r1 + 0x1			  ## tasks.c:2373:55
  100b72:    0d 40             	[r0 + 0x0] = r5			  ## tasks.c:2377:20
  100b74:    cd ff f8 fd 00 00 	r13 = 0xfdf8 <pxDelayedTaskList : fdf8 >			  ## tasks.c:2377:20
  100b7a:    21 3a             	if (r5 != 0x0) goto 0x42 <xTaskIncrementTick+0x72 : 100bbe >			  ## tasks.c:2377:20
  100b7c:    00 f6 00 d0       	r0 = [r13 + 0x0]			  ## tasks.c:2380:13
  100b80:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2380:13
  100b82:    0d 20             	if (r0 == 0x0) goto 0x1a <xTaskIncrementTick+0x52 : 100b9e >			  ## tasks.c:2380:13
  100b84:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  100b8a:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100b8c:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  100b92:    c1 ff 6a 23 10 00 	r1 = 0x10236a <$data.__1+0x18C : 10236a >			  ## FreeRTOSConfig.h:181:5
  100b98:    02 fb 4c 09       	r2 = 0x94c <stack_bss_begin+0x12C : 94c >			  ## FreeRTOSConfig.h:181:5
  100b9c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100b9e:    00 f6 00 d0       	r0 = [r13 + 0x0]			  ## tasks.c:2380:13
  100ba2:    c1 ff fc fd 00 00 	r1 = 0xfdfc <pxOverflowDelayedTaskList : fdfc >			  ## tasks.c:2380:13
  100ba8:    02 42             	r2 = [r1 + 0x0]			  ## tasks.c:2380:13
  100baa:    12 f6 00 d0       	[r13 + 0x0] = r2			  ## tasks.c:2380:13
  100bae:    08 42             	[r1 + 0x0] = r0			  ## tasks.c:2380:13
  100bb0:    c0 ff bc fc 00 00 	r0 = 0xfcbc <xNumOfOverflows : fcbc >			  ## tasks.c:2380:13
  100bb6:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:2380:13
  100bb8:    11 80             	r1 += 0x1			  ## tasks.c:2380:13
  100bba:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:2380:13
  100bbc:    af 14             	call -0x6a2 <prvResetNextTaskUnblockTime : 10051c >			  ## tasks.c:2380:13
  100bbe:    ca ff ac fc 00 00 	r10 = 0xfcac <xNextTaskUnblockTime : fcac >
  100bc4:    00 f6 00 a0       	r0 = [r10 + 0x0]			  ## tasks.c:2390:32
  100bc8:    0b 70             	r11 = 0x0			  ## tasks.c:2390:32
  100bca:    c8 ff f4 fc 00 00 	r8 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:2390:32
  100bd0:    c9 ff 94 fc 00 00 	r9 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2390:32
  100bd6:    05 f2 31 30       	if (r5 < r0) goto 0x62 <xTaskIncrementTick+0xF0 : 100c3c >			  ## tasks.c:2390:32
  100bda:    22 14             	call -0x7bc <local_irq_disable : 100420 >			  ## tasks.c:2391:13
  100bdc:    08 00             	csync			  ## tasks.c:2391:13
  100bde:    c7 ff a0 fc 00 00 	r7 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:2391:13
  100be4:    4c 71             	r12 = 0x14			  ## tasks.c:2391:13
  100be6:    21 18             	goto 0x42 <xTaskIncrementTick+0xDE : 100c2a >			  ## tasks.c:2391:13
  100be8:    00 f6 00 d0       	r0 = [r13 + 0x0]			  ## tasks.c:2406:39
  100bec:    30 40             	r0 = [r0 + 0xc]			  ## tasks.c:2406:39
  100bee:    36 40             	r6 = [r0 + 0xc]			  ## tasks.c:2406:39
  100bf0:    50 4c             	r0 = [r6 + 0x14]			  ## tasks.c:2407:34
  100bf2:    05 f2 1f 30       	if (r5 < r0) goto 0x3e <xTaskIncrementTick+0xE8 : 100c34 >
  100bf6:    44 9d             	r4 = r6 + 0x14			  ## tasks.c:2407:34
  100bf8:    40 08             	r0 = r4			  ## tasks.c:2422:28
  100bfa:    6e 14             	call -0x724 <uxListRemove : 1004d8 >			  ## tasks.c:2422:28
  100bfc:    e0 4c             	r0 = [r6 + 0x38]			  ## tasks.c:2426:25
  100bfe:    03 20             	if (r0 == 0x0) goto 0x6 <xTaskIncrementTick+0xBA : 100c06 >			  ## tasks.c:2426:25
  100c00:    60 fc 28 00       	r0 = r6 + 0x28			  ## tasks.c:2426:25
  100c04:    69 14             	call -0x72e <uxListRemove : 1004d8 >			  ## tasks.c:2427:32
  100c06:    f1 4c             	r1 = [r6 + 0x3c]			  ## tasks.c:2434:21
  100c08:    00 4e             	r0 = [r7 + 0x0]			  ## tasks.c:2434:21
  100c0a:    12 70             	r2 = 0x1			  ## tasks.c:2434:21
  100c0c:    42 0c             	r2 <<= r1			  ## tasks.c:2434:21
  100c0e:    52 b0             	r2 |= r0			  ## tasks.c:2434:21
  100c10:    80 08             	r0 = r8			  ## tasks.c:2434:21
  100c12:    80 fe c0 01       	r0 += r1 * r12			  ## tasks.c:2434:21
  100c16:    0a 4e             	[r7 + 0x0] = r2			  ## tasks.c:2434:21
  100c18:    41 08             	r1 = r4			  ## tasks.c:2434:21
  100c1a:    74 14             	call -0x718 <vListInsertEnd : 100504 >			  ## tasks.c:2434:21
  100c1c:    f0 4c             	r0 = [r6 + 0x3c]			  ## tasks.c:2446:37
  100c1e:    01 f6 00 90       	r1 = [r9 + 0x0]			  ## tasks.c:2446:51
  100c22:    f1 42             	r1 = [r1 + 0x3c]			  ## tasks.c:2446:66
  100c24:    10 f2 01 30       	if (r0 < r1) goto 0x2 <xTaskIncrementTick+0xDE : 100c2a >			  ## tasks.c:2446:66
  100c28:    1b 70             	r11 = 0x1			  ## tasks.c:2446:29
  100c2a:    00 f6 00 d0       	r0 = [r13 + 0x0]			  ## tasks.c:2393:21
  100c2e:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2393:21
  100c30:    db 31             	if (r0 != 0x0) goto -0x4a <xTaskIncrementTick+0x9C : 100be8 >			  ## tasks.c:2393:21
  100c32:    f0 07             	r0 = -0x1
  100c34:    10 f6 00 a0       	[r10 + 0x0] = r0
  100c38:    bf f3 fa fb       	call -0x80c <local_irq_enable : 100430 >			  ## tasks.c:2463:13
  100c3c:    bf f3 f0 fb       	call -0x820 <local_irq_disable : 100420 >			  ## tasks.c:2471:17
  100c40:    08 00             	csync			  ## tasks.c:2471:17
  100c42:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:2471:17
  100c46:    bf f3 f3 fb       	call -0x81a <local_irq_enable : 100430 >			  ## tasks.c:2471:17
  100c4a:    f0 44             	r0 = [r2 + 0x3c]			  ## tasks.c:2471:17
  100c4c:    00 fe 14 09       	r0 = r0 * 0x14			  ## tasks.c:2471:17
  100c50:    81 f6 00 08       	r1 = [r0+r8]			  ## tasks.c:2471:17
  100c54:    10 70             	r0 = 0x1			  ## tasks.c:2471:91
  100c56:    11 e0 01 80       	if (r1 > 0x1) goto 0x2 <xTaskIncrementTick+0x110 : 100c5c >			  ## tasks.c:2471:91
  100c5a:    b0 08             	r0 = r11			  ## tasks.c:2471:17
  100c5c:    c1 ff b4 fc 00 00 	r1 = 0xfcb4 <xYieldPending : fcb4 >			  ## tasks.c:2503:13
  100c62:    01 42             	r1 = [r1 + 0x0]			  ## tasks.c:2503:13
  100c64:    01 22             	if (r1 == 0x0) goto 0x2 <xTaskIncrementTick+0x11C : 100c68 >			  ## tasks.c:2503:13
  100c66:    10 70             	r0 = 0x1			  ## tasks.c:2503:13
  100c68:    5d 01             	{pc, r13-r4} = [sp++]			  ## tasks.c:2511:5


xTaskResumeAll:
  100c6a:    7c 01             	[--sp] = {rets, r12-r4}			  ## tasks.c:1924:0
  100c6c:    c4 ff a8 fc 00 00 	r4 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:1924:0
  100c72:    00 48             	r0 = [r4 + 0x0]			  ## tasks.c:1930:5
  100c74:    0d 30             	if (r0 != 0x0) goto 0x1a <xTaskResumeAll+0x26 : 100c90 >			  ## tasks.c:1930:5
  100c76:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  100c7c:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100c7e:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  100c84:    c1 ff 5b 23 10 00 	r1 = 0x10235b <$data.__1+0x17C : 10235a >			  ## FreeRTOSConfig.h:181:5
  100c8a:    02 fb 8a 07       	r2 = 0x78a <mem_code_size+0xC0 : 78a >			  ## FreeRTOSConfig.h:181:5
  100c8e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100c90:    00 48             	r0 = [r4 + 0x0]			  ## tasks.c:1940:9
  100c92:    f0 8f             	r0 += -0x1			  ## tasks.c:1940:9
  100c94:    08 48             	[r4 + 0x0] = r0			  ## tasks.c:1940:9
  100c96:    00 48             	r0 = [r4 + 0x0]			  ## tasks.c:1942:13
  100c98:    02 70             	r2 = 0x0			  ## tasks.c:1942:13
  100c9a:    04 20             	if (r0 == 0x0) goto 0x8 <xTaskResumeAll+0x3A : 100ca4 >			  ## tasks.c:1942:13
  100c9c:    bf f3 c8 fb       	call -0x870 <local_irq_enable : 100430 >			  ## tasks.c:2015:5
  100ca0:    20 08             	r0 = r2			  ## tasks.c:2017:5
  100ca2:    5c 01             	{pc, r12-r4} = [sp++]			  ## tasks.c:2017:5
  100ca4:    c0 ff 90 fc 00 00 	r0 = 0xfc90 <uxCurrentNumberOfTasks : fc90 >			  ## tasks.c:1943:17
  100caa:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:1943:17
  100cac:    f7 21             	if (r0 == 0x0) goto -0x12 <xTaskResumeAll+0x32 : 100c9c >			  ## tasks.c:1943:17
  100cae:    07 70             	r7 = 0x0
  100cb0:    c6 ff bc fd 00 00 	r6 = 0xfdbc <xPendingReadyList : fdbc >
  100cb6:    c8 ff b4 fc 00 00 	r8 = 0xfcb4 <xYieldPending : fcb4 >
  100cbc:    19 70             	r9 = 0x1
  100cbe:    c5 ff a0 fc 00 00 	r5 = 0xfca0 <uxTopReadyPriority : fca0 >
  100cc4:    4a 71             	r10 = 0x14
  100cc6:    cb ff f4 fc 00 00 	r11 = 0xfcf4 <pxReadyTasksLists : fcf4 >
  100ccc:    cc ff 94 fc 00 00 	r12 = 0xfc94 <CurrentTCB : fc94 >
  100cd2:    1d 18             	goto 0x3a <xTaskResumeAll+0xA4 : 100d0e >
  100cd4:    30 4c             	r0 = [r6 + 0xc]			  ## tasks.c:1947:39
  100cd6:    37 40             	r7 = [r0 + 0xc]			  ## tasks.c:1947:39
  100cd8:    70 fc 28 00       	r0 = r7 + 0x28			  ## tasks.c:1948:50
  100cdc:    bf f3 fc fb       	call -0x808 <uxListRemove : 1004d8 >			  ## tasks.c:1948:28
  100ce0:    44 9f             	r4 = r7 + 0x14			  ## tasks.c:1949:50
  100ce2:    40 08             	r0 = r4			  ## tasks.c:1949:28
  100ce4:    bf f3 f8 fb       	call -0x810 <uxListRemove : 1004d8 >			  ## tasks.c:1949:28
  100ce8:    f1 4e             	r1 = [r7 + 0x3c]			  ## tasks.c:1950:21
  100cea:    00 4a             	r0 = [r5 + 0x0]			  ## tasks.c:1950:21
  100cec:    f8 fd 10 29       	r2 = r9 << r1			  ## tasks.c:1950:21
  100cf0:    50 b4             	r0 |= r2			  ## tasks.c:1950:21
  100cf2:    08 4a             	[r5 + 0x0] = r0			  ## tasks.c:1950:21
  100cf4:    b0 08             	r0 = r11			  ## tasks.c:1950:21
  100cf6:    80 fe a0 01       	r0 += r1 * r10			  ## tasks.c:1950:21
  100cfa:    41 08             	r1 = r4			  ## tasks.c:1950:21
  100cfc:    03 14             	call -0x7fa <vListInsertEnd : 100504 >			  ## tasks.c:1950:21
  100cfe:    f0 4e             	r0 = [r7 + 0x3c]			  ## tasks.c:1955:33
  100d00:    01 f6 00 c0       	r1 = [r12 + 0x0]			  ## tasks.c:1955:47
  100d04:    f1 42             	r1 = [r1 + 0x3c]			  ## tasks.c:1955:62
  100d06:    10 f2 02 30       	if (r0 < r1) goto 0x4 <xTaskResumeAll+0xA4 : 100d0e >			  ## tasks.c:1955:62
  100d0a:    19 f6 00 80       	[r8 + 0x0] = r9			  ## tasks.c:1960:39
  100d0e:    00 4c             	r0 = [r6 + 0x0]			  ## tasks.c:1946:24
  100d10:    e1 31             	if (r0 != 0x0) goto -0x3e <xTaskResumeAll+0x6A : 100cd4 >			  ## tasks.c:1946:24
  100d12:    01 2e             	if (r7 == 0x0) goto 0x2 <xTaskResumeAll+0xAC : 100d16 >
  100d14:    03 14             	call -0x7fa <prvResetNextTaskUnblockTime : 10051c >			  ## tasks.c:1973:21
  100d16:    c4 ff b8 fc 00 00 	r4 = 0xfcb8 <uxPendedTicks : fcb8 >
  100d1c:    05 48             	r5 = [r4 + 0x0]			  ## tasks.c:1981:50
  100d1e:    08 2a             	if (r5 == 0x0) goto 0x10 <xTaskResumeAll+0xC6 : 100d30 >
  100d20:    15 17             	call -0x1d6 <xTaskIncrementTick : 100b4c >			  ## tasks.c:1985:33
  100d22:    02 20             	if (r0 == 0x0) goto 0x4 <xTaskResumeAll+0xBE : 100d28 >			  ## tasks.c:1985:33
  100d24:    c0 f4 01 89       	[r8 + 0x0] = 0x1			  ## tasks.c:1986:47
  100d28:    55 f3 fa ff       	if (--r5 != 0) goto -0xc <xTaskResumeAll+0xB6 : 100d20 >
  100d2c:    c0 f4 00 49       	[r4 + 0x0] = 0x0			  ## tasks.c:1993:39
  100d30:    00 f6 00 80       	r0 = [r8 + 0x0]			  ## tasks.c:1999:21
  100d34:    03 20             	if (r0 == 0x0) goto 0x6 <xTaskResumeAll+0xD2 : 100d3c >			  ## tasks.c:1999:21
  100d36:    90 14             	call -0x6e0 <vPortYield : 100658 >			  ## tasks.c:2005:21
  100d38:    12 70             	r2 = 0x1			  ## tasks.c:2005:21
  100d3a:    b0 1f             	goto -0xa0 <xTaskResumeAll+0x32 : 100c9c >			  ## tasks.c:2005:21
  100d3c:    02 70             	r2 = 0x0
  100d3e:    ae 1f             	goto -0xa4 <xTaskResumeAll+0x32 : 100c9c >


xQueueGenericSend:
  100d40:    7b 01             	[--sp] = {rets, r11-r4}			  ## queue.c:699:0
  100d42:    fa 0b             	sp += -0xc			  ## queue.c:699:0
  100d44:    35 08             	r5 = r3			  ## queue.c:699:0
  100d46:    27 08             	r7 = r2			  ## queue.c:699:0
  100d48:    18 08             	r8 = r1			  ## queue.c:699:0
  100d4a:    04 08             	r4 = r0			  ## queue.c:699:0
  100d4c:    2f 02             	[sp+8] = r7			  ## queue.c:699:0
  100d4e:    c6 ff e8 fc 00 00 	r6 = 0xfce8 <mask_log_e : fce8 >			  ## queue.c:699:0
  100d54:    c9 ff f1 21 10 00 	r9 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## queue.c:699:0
  100d5a:    ca ff 12 22 10 00 	r10 = 0x102212 <$data.__1+0x34 : 102212 >			  ## queue.c:699:0
  100d60:    06 38             	if (r4 != 0x0) goto 0xc <xQueueGenericSend+0x2E : 100d6e >			  ## queue.c:699:0
  100d62:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100d64:    02 fb c0 02       	r2 = 0x2c0 <_MASK_MEM_SIZE+0x2C : 2c0 >			  ## FreeRTOSConfig.h:181:5
  100d68:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  100d6a:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  100d6c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100d6e:    08 e0 08 10       	if (r8 != 0x0) goto 0x10 <xQueueGenericSend+0x42 : 100d82 >
  100d72:    00 49             	r0 = [r4 + 0x40]			  ## queue.c:705:5
  100d74:    06 20             	if (r0 == 0x0) goto 0xc <xQueueGenericSend+0x42 : 100d82 >			  ## queue.c:705:5
  100d76:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100d78:    02 fb c1 02       	r2 = 0x2c1 <_MASK_MEM_SIZE+0x2C : 2c0 >			  ## FreeRTOSConfig.h:181:5
  100d7c:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  100d7e:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  100d80:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100d82:    25 e0 09 10       	if (r5 != 0x2) goto 0x12 <xQueueGenericSend+0x58 : 100d98 >
  100d86:    f0 48             	r0 = [r4 + 0x3c]			  ## queue.c:706:5
  100d88:    10 e0 06 00       	if (r0 == 0x1) goto 0xc <xQueueGenericSend+0x58 : 100d98 >			  ## queue.c:706:5
  100d8c:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100d8e:    02 fb c2 02       	r2 = 0x2c2 <_MASK_MEM_SIZE+0x2E : 2c2 >			  ## FreeRTOSConfig.h:181:5
  100d92:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  100d94:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  100d96:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100d98:    c0 ff 98 fc 00 00 	r0 = 0xfc98 <xSchedulerRunning : fc98 >			  ## tasks.c:3522:9
  100d9e:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3522:9
  100da0:    0c 20             	if (r0 == 0x0) goto 0x18 <xQueueGenericSend+0x7A : 100dba >			  ## tasks.c:3522:9
  100da2:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:3525:13
  100da8:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3525:13
  100daa:    07 20             	if (r0 == 0x0) goto 0xe <xQueueGenericSend+0x7A : 100dba >			  ## tasks.c:3525:13
  100dac:    06 2e             	if (r7 == 0x0) goto 0xc <xQueueGenericSend+0x7A : 100dba >
  100dae:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100db0:    02 fb c5 02       	r2 = 0x2c5 <_MASK_MEM_SIZE+0x30 : 2c4 >			  ## FreeRTOSConfig.h:181:5
  100db4:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  100db6:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  100db8:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100dba:    07 99             	r7 = r4 + 0x10
  100dbc:    0b 70             	r11 = 0x0
  100dbe:    c9 ff bc fc 00 00 	r9 = 0xfcbc <xNumOfOverflows : fcbc >
  100dc4:    ca ff b0 fc 00 00 	r10 = 0xfcb0 <xTickCount : fcb0 >
  100dca:    06 70             	r6 = 0x0
  100dcc:    37 18             	goto 0x6e <xQueueGenericSend+0xFC : 100e3c >
  100dce:    07 3c             	if (r6 != 0x0) goto 0xe <xQueueGenericSend+0x9E : 100dde >
  100dd0:    00 f6 00 90       	r0 = [r9 + 0x0]			  ## tasks.c:2896:33
  100dd4:    08 02             	[sp] = r0			  ## tasks.c:2896:31
  100dd6:    00 f6 00 a0       	r0 = [r10 + 0x0]			  ## tasks.c:2897:34
  100dda:    18 02             	[sp+4] = r0			  ## tasks.c:2897:32
  100ddc:    16 70             	r6 = 0x1
  100dde:    bf f3 27 fb       	call -0x9b2 <local_irq_enable : 100430 >			  ## queue.c:812:9
  100de2:    77 15             	call -0x512 <vTaskSuspendAll : 1008d2 >			  ## queue.c:817:9
  100de4:    bf f3 1c fb       	call -0x9c8 <local_irq_disable : 100420 >			  ## queue.c:818:9
  100de8:    08 00             	csync			  ## queue.c:818:9
  100dea:    40 fc 44 00       	r0 = r4 + 0x44			  ## queue.c:818:9
  100dee:    01 60             	r1 = b[r0 + 0x0] (u)			  ## queue.c:818:9
  100df0:    01 ff ff 10 02 00 	if (r1 != 0xff) goto 0x4 <xQueueGenericSend+0xBA : 100dfa >			  ## queue.c:818:9
  100df6:    1b f9 00 00       	b[r0 + 0x0] = r11			  ## queue.c:818:9
  100dfa:    11 60             	r1 = b[r0 + 0x1] (u)			  ## queue.c:818:9
  100dfc:    01 ff ff 10 02 00 	if (r1 != 0xff) goto 0x4 <xQueueGenericSend+0xC6 : 100e06 >			  ## queue.c:818:9
  100e02:    1b f9 01 00       	b[r0 + 0x1] = r11			  ## queue.c:818:9
  100e06:    bf f3 13 fb       	call -0x9da <local_irq_enable : 100430 >			  ## queue.c:818:9
  100e0a:    00 a0             	r0 = sp + 0			  ## queue.c:818:9
  100e0c:    81 a0             	r1 = sp + 8
  100e0e:    86 15             	call -0x4f4 <xTaskCheckForTimeOut : 10091c >			  ## queue.c:821:13
  100e10:    23 30             	if (r0 != 0x0) goto 0x46 <xQueueGenericSend+0x118 : 100e58 >			  ## queue.c:821:13
  100e12:    bf f3 05 fb       	call -0x9f6 <local_irq_disable : 100420 >			  ## queue.c:1731:5
  100e16:    08 00             	csync			  ## queue.c:1731:5
  100e18:    e2 48             	r2 = [r4 + 0x38]			  ## queue.c:1733:22
  100e1a:    f3 48             	r3 = [r4 + 0x3c]			  ## queue.c:1733:52
  100e1c:    bf f3 08 fb       	call -0x9f0 <local_irq_enable : 100430 >			  ## queue.c:1739:5
  100e20:    32 f2 09 10       	if (r2 != r3) goto 0x12 <xQueueGenericSend+0xF6 : 100e36 >			  ## queue.c:822:17
  100e24:    21 02             	r1 = [sp+8]			  ## queue.c:824:72
  100e26:    70 08             	r0 = r7			  ## queue.c:824:17
  100e28:    3e 16             	call -0x384 <vTaskPlaceOnEventList : 100aa6 >			  ## queue.c:824:17
  100e2a:    40 08             	r0 = r4			  ## queue.c:831:17
  100e2c:    5c 16             	call -0x348 <prvUnlockQueue : 100ae6 >			  ## queue.c:831:17
  100e2e:    1d 17             	call -0x1c6 <xTaskResumeAll : 100c6a >			  ## queue.c:838:21
  100e30:    05 30             	if (r0 != 0x0) goto 0xa <xQueueGenericSend+0xFC : 100e3c >			  ## queue.c:838:21
  100e32:    12 14             	call -0x7dc <vPortYield : 100658 >			  ## queue.c:839:21
  100e34:    03 18             	goto 0x6 <xQueueGenericSend+0xFC : 100e3c >			  ## queue.c:839:21
  100e36:    40 08             	r0 = r4			  ## queue.c:843:17
  100e38:    56 16             	call -0x354 <prvUnlockQueue : 100ae6 >			  ## queue.c:843:17
  100e3a:    17 17             	call -0x1d2 <xTaskResumeAll : 100c6a >			  ## queue.c:844:24
  100e3c:    bf f3 f0 fa       	call -0xa20 <local_irq_disable : 100420 >			  ## queue.c:718:9
  100e40:    08 00             	csync			  ## queue.c:718:9
  100e42:    e0 48             	r0 = [r4 + 0x38]			  ## queue.c:724:27
  100e44:    25 e0 0d 00       	if (r5 == 0x2) goto 0x1a <xQueueGenericSend+0x122 : 100e62 >			  ## queue.c:724:27
  100e48:    f1 48             	r1 = [r4 + 0x3c]			  ## queue.c:724:56
  100e4a:    10 f2 0a 30       	if (r0 < r1) goto 0x14 <xQueueGenericSend+0x122 : 100e62 >			  ## queue.c:724:56
  100e4e:    20 02             	r0 = [sp+8]			  ## queue.c:792:21
  100e50:    be 31             	if (r0 != 0x0) goto -0x84 <xQueueGenericSend+0x8E : 100dce >			  ## queue.c:792:21
  100e52:    bf f3 ed fa       	call -0xa26 <local_irq_enable : 100430 >			  ## queue.c:795:21
  100e56:    03 18             	goto 0x6 <xQueueGenericSend+0x11E : 100e5e >
  100e58:    40 08             	r0 = r4			  ## queue.c:848:13
  100e5a:    45 16             	call -0x376 <prvUnlockQueue : 100ae6 >			  ## queue.c:848:13
  100e5c:    06 17             	call -0x1f4 <xTaskResumeAll : 100c6a >			  ## queue.c:849:20
  100e5e:    00 70             	r0 = 0x0
  100e60:    10 18             	goto 0x20 <xQueueGenericSend+0x142 : 100e82 >
  100e62:    40 08             	r0 = r4			  ## queue.c:726:34
  100e64:    81 08             	r1 = r8			  ## queue.c:726:34
  100e66:    52 08             	r2 = r5			  ## queue.c:726:34
  100e68:    a3 14             	call -0x6ba <prvCopyDataToQueue : 1007b0 >			  ## queue.c:726:34
  100e6a:    91 48             	r1 = [r4 + 0x24]			  ## queue.c:767:25
  100e6c:    04 22             	if (r1 == 0x0) goto 0x8 <xQueueGenericSend+0x136 : 100e76 >
  100e6e:    40 fc 24 00       	r0 = r4 + 0x24			  ## queue.c:767:25
  100e72:    bf f3 64 fb       	call -0x938 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:768:29
  100e76:    02 20             	if (r0 == 0x0) goto 0x4 <xQueueGenericSend+0x13C : 100e7c >
  100e78:    bf f3 ee fb       	call -0x824 <vPortYield : 100658 >
  100e7c:    bf f3 d8 fa       	call -0xa50 <local_irq_enable : 100430 >			  ## queue.c:789:17
  100e80:    10 70             	r0 = 0x1			  ## queue.c:789:17
  100e82:    06 0a             	sp += 0xc
  100e84:    5b 01             	{pc, r11-r4} = [sp++]			  ## queue.c:855:1


prvCopyDataFromQueue:
  100e86:    74 01             	[--sp] = {rets, r4}			  ## queue.c:1587:0
  100e88:    02 41             	r2 = [r0 + 0x40]			  ## queue.c:1588:18
  100e8a:    0c 24             	if (r2 == 0x0) goto 0x18 <prvCopyDataFromQueue+0x1E : 100ea4 >			  ## queue.c:1588:18
  100e8c:    33 40             	r3 = [r0 + 0xc]			  ## queue.c:1589:31
  100e8e:    23 09             	r3 += r2			  ## queue.c:1589:31
  100e90:    3b 40             	[r0 + 0xc] = r3			  ## queue.c:1589:31
  100e92:    14 40             	r4 = [r0 + 0x4]			  ## queue.c:1590:47
  100e94:    43 f2 02 30       	if (r3 < r4) goto 0x4 <prvCopyDataFromQueue+0x16 : 100e9c >			  ## queue.c:1590:47
  100e98:    03 40             	r3 = [r0 + 0x0]			  ## queue.c:1591:46
  100e9a:    3b 40             	[r0 + 0xc] = r3			  ## queue.c:1591:35
  100e9c:    10 08             	r0 = r1			  ## queue.c:1595:16
  100e9e:    31 08             	r1 = r3			  ## queue.c:1595:16
  100ea0:    bf f3 ce f8       	call -0xe64 <memmove : 100040 >			  ## queue.c:1595:16
  100ea4:    54 01             	{pc, r4} = [sp++]			  ## queue.c:1597:1


prvIsQueueEmpty:
  100ea6:    34 00             	[--sp] = rets			  ## queue.c:1695:0
  100ea8:    02 08             	r2 = r0			  ## queue.c:1695:0
  100eaa:    bf f3 b9 fa       	call -0xa8e <local_irq_disable : 100420 >			  ## queue.c:1698:5
  100eae:    08 00             	csync			  ## queue.c:1698:5
  100eb0:    e0 44             	r0 = [r2 + 0x38]			  ## queue.c:1700:22
  100eb2:    12 70             	r2 = 0x1			  ## queue.c:1700:40
  100eb4:    01 20             	if (r0 == 0x0) goto 0x2 <prvIsQueueEmpty+0x12 : 100eb8 >
  100eb6:    02 70             	r2 = 0x0
  100eb8:    bf f3 ba fa       	call -0xa8c <local_irq_enable : 100430 >			  ## queue.c:1706:5
  100ebc:    20 08             	r0 = r2			  ## queue.c:1708:5
  100ebe:    30 00             	pc = [sp++]			  ## queue.c:1708:5


xQueueGenericReceive:
  100ec0:    7f 01             	[--sp] = {rets, r15-r4}			  ## queue.c:1125:0
  100ec2:    fa 0b             	sp += -0xc			  ## queue.c:1125:0
  100ec4:    38 08             	r8 = r3			  ## queue.c:1125:0
  100ec6:    1b 08             	r11 = r1			  ## queue.c:1125:0
  100ec8:    04 08             	r4 = r0			  ## queue.c:1125:0
  100eca:    2a 02             	[sp+8] = r2			  ## queue.c:1125:0
  100ecc:    c6 ff e8 fc 00 00 	r6 = 0xfce8 <mask_log_e : fce8 >			  ## queue.c:1125:0
  100ed2:    c5 ff f1 21 10 00 	r5 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## queue.c:1125:0
  100ed8:    c7 ff 56 22 10 00 	r7 = 0x102256 <$data.__1+0x78 : 102256 >			  ## queue.c:1125:0
  100ede:    06 38             	if (r4 != 0x0) goto 0xc <xQueueGenericReceive+0x2C : 100eec >			  ## queue.c:1125:0
  100ee0:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100ee2:    02 fb 6b 04       	r2 = 0x46b <TLB_SIZE+0x6A : 46a >			  ## FreeRTOSConfig.h:181:5
  100ee6:    50 08             	r0 = r5			  ## FreeRTOSConfig.h:181:5
  100ee8:    71 08             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  100eea:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100eec:    0b e0 08 10       	if (r11 != 0x0) goto 0x10 <xQueueGenericReceive+0x40 : 100f00 >
  100ef0:    00 49             	r0 = [r4 + 0x40]			  ## queue.c:1132:5
  100ef2:    06 20             	if (r0 == 0x0) goto 0xc <xQueueGenericReceive+0x40 : 100f00 >			  ## queue.c:1132:5
  100ef4:    03 4c             	r3 = [r6 + 0x0]			  ## FreeRTOSConfig.h:181:5
  100ef6:    02 fb 6c 04       	r2 = 0x46c <TLB_SIZE+0x6C : 46c >			  ## FreeRTOSConfig.h:181:5
  100efa:    50 08             	r0 = r5			  ## FreeRTOSConfig.h:181:5
  100efc:    71 08             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  100efe:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  100f00:    47 fc 24 00       	r7 = r4 + 0x24
  100f04:    05 70             	r5 = 0x0
  100f06:    c9 ff 94 fc 00 00 	r9 = 0xfc94 <CurrentTCB : fc94 >
  100f0c:    cc ff bc fc 00 00 	r12 = 0xfcbc <xNumOfOverflows : fcbc >
  100f12:    ce ff b0 fc 00 00 	r14 = 0xfcb0 <xTickCount : fcb0 >
  100f18:    4a 71             	r10 = 0x14
  100f1a:    0f 70             	r15 = 0x0
  100f1c:    af 18             	goto 0x15e <xQueueGenericReceive+0x1BC : 10107c >
  100f1e:    20 02             	r0 = [sp+8]			  ## queue.c:1210:21
  100f20:    bd 20             	if (r0 == 0x0) goto 0x17a <xQueueGenericReceive+0x1DC : 10109c >
  100f22:    0f e0 07 10       	if (r15 != 0x0) goto 0xe <xQueueGenericReceive+0x74 : 100f34 >
  100f26:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## tasks.c:2896:33
  100f2a:    08 02             	[sp] = r0			  ## tasks.c:2896:31
  100f2c:    00 f6 00 e0       	r0 = [r14 + 0x0]			  ## tasks.c:2897:34
  100f30:    18 02             	[sp+4] = r0			  ## tasks.c:2897:32
  100f32:    1f 70             	r15 = 0x1
  100f34:    bf f3 7c fa       	call -0xb08 <local_irq_enable : 100430 >			  ## queue.c:1227:9
  100f38:    cc 14             	call -0x668 <vTaskSuspendAll : 1008d2 >			  ## queue.c:1232:9
  100f3a:    bf f3 71 fa       	call -0xb1e <local_irq_disable : 100420 >			  ## queue.c:1233:9
  100f3e:    08 00             	csync			  ## queue.c:1233:9
  100f40:    40 fc 44 00       	r0 = r4 + 0x44			  ## queue.c:1233:9
  100f44:    01 60             	r1 = b[r0 + 0x0] (u)			  ## queue.c:1233:9
  100f46:    01 ff ff 10 01 00 	if (r1 != 0xff) goto 0x2 <xQueueGenericReceive+0x8E : 100f4e >			  ## queue.c:1233:9
  100f4c:    0d 60             	b[r0 + 0x0] = r5			  ## queue.c:1233:9
  100f4e:    11 60             	r1 = b[r0 + 0x1] (u)			  ## queue.c:1233:9
  100f50:    01 ff ff 10 01 00 	if (r1 != 0xff) goto 0x2 <xQueueGenericReceive+0x98 : 100f58 >			  ## queue.c:1233:9
  100f56:    1d 60             	b[r0 + 0x1] = r5			  ## queue.c:1233:9
  100f58:    bf f3 6a fa       	call -0xb2c <local_irq_enable : 100430 >			  ## queue.c:1233:9
  100f5c:    00 a0             	r0 = sp + 0			  ## queue.c:1233:9
  100f5e:    81 a0             	r1 = sp + 8
  100f60:    dd 14             	call -0x646 <xTaskCheckForTimeOut : 10091c >			  ## queue.c:1236:13
  100f62:    07 20             	if (r0 == 0x0) goto 0xe <xQueueGenericReceive+0xB2 : 100f72 >
  100f64:    40 08             	r0 = r4			  ## queue.c:1267:13
  100f66:    bf 15             	call -0x482 <prvUnlockQueue : 100ae6 >			  ## queue.c:1267:13
  100f68:    80 16             	call -0x300 <xTaskResumeAll : 100c6a >			  ## queue.c:1268:20
  100f6a:    40 08             	r0 = r4			  ## queue.c:1270:17
  100f6c:    9c 17             	call -0xc8 <prvIsQueueEmpty : 100ea6 >			  ## queue.c:1270:17
  100f6e:    86 20             	if (r0 == 0x0) goto 0x10c <xQueueGenericReceive+0x1BC : 10107c >			  ## queue.c:1270:17
  100f70:    97 18             	goto 0x12e <xQueueGenericReceive+0x1E0 : 1010a0 >			  ## queue.c:1270:17
  100f72:    40 08             	r0 = r4			  ## queue.c:1237:17
  100f74:    98 17             	call -0xd0 <prvIsQueueEmpty : 100ea6 >			  ## queue.c:1237:17
  100f76:    3b 20             	if (r0 == 0x0) goto 0x76 <xQueueGenericReceive+0x12E : 100fee >			  ## queue.c:1237:17
  100f78:    00 48             	r0 = [r4 + 0x0]			  ## queue.c:1242:34
  100f7a:    77 30             	if (r0 != 0x0) goto 0xee <xQueueGenericReceive+0x1AA : 10106a >			  ## queue.c:1242:34
  100f7c:    0d f6 04 40       	r13 = [r4 + 0x4]			  ## queue.c:1245:68
  100f80:    bf f3 4e fa       	call -0xb64 <local_irq_disable : 100420 >			  ## tasks.c:3542:5
  100f84:    08 00             	csync			  ## tasks.c:3542:5
  100f86:    0d e0 6e 00       	if (r13 == 0x0) goto 0xdc <xQueueGenericReceive+0x1A6 : 101066 >			  ## tasks.c:3542:5
  100f8a:    02 f6 3c d0       	r2 = [r13 + 0x3c]			  ## tasks.c:3551:20
  100f8e:    bf f3 47 fa       	call -0xb72 <local_irq_disable : 100420 >			  ## tasks.c:3551:33
  100f92:    08 00             	csync			  ## tasks.c:3551:33
  100f94:    03 f6 00 90       	r3 = [r9 + 0x0]			  ## tasks.c:3551:33
  100f98:    bf f3 4a fa       	call -0xb6c <local_irq_enable : 100430 >			  ## tasks.c:3551:33
  100f9c:    f0 46             	r0 = [r3 + 0x3c]			  ## tasks.c:3551:47
  100f9e:    02 f2 62 20       	if (r2 >= r0) goto 0xc4 <xQueueGenericReceive+0x1A6 : 101066 >			  ## tasks.c:3551:47
  100fa2:    00 f6 28 d0       	r0 = [r13 + 0x28]			  ## tasks.c:3555:18
  100fa6:    00 e0 0c b0       	ifs (r0 < 0x0) goto 0x18 <xQueueGenericReceive+0x102 : 100fc2 >			  ## tasks.c:3555:18
  100faa:    bf f3 39 fa       	call -0xb8e <local_irq_disable : 100420 >			  ## tasks.c:3556:17
  100fae:    08 00             	csync			  ## tasks.c:3556:17
  100fb0:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3556:17
  100fb4:    bf f3 3c fa       	call -0xb88 <local_irq_enable : 100430 >			  ## tasks.c:3556:17
  100fb8:    f0 44             	r0 = [r2 + 0x3c]			  ## tasks.c:3556:17
  100fba:    60 fb 08 09       	r0 = 0x8 - r0			  ## tasks.c:3556:17
  100fbe:    10 f6 28 d0       	[r13 + 0x28] = r0			  ## tasks.c:3556:17
  100fc2:    00 f6 3c d0       	r0 = [r13 + 0x3c]			  ## tasks.c:3563:17
  100fc6:    01 f6 24 d0       	r1 = [r13 + 0x24]			  ## tasks.c:3563:17
  100fca:    c2 ff f4 fc 00 00 	r2 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:3563:17
  100fd0:    80 fe a0 20       	r2 += r0 * r10			  ## tasks.c:3563:17
  100fd4:    21 f2 0f 00       	if (r1 == r2) goto 0x1e <xQueueGenericReceive+0x136 : 100ff6 >			  ## tasks.c:3563:17
  100fd8:    bf f3 22 fa       	call -0xbbc <local_irq_disable : 100420 >			  ## tasks.c:3575:37
  100fdc:    08 00             	csync			  ## tasks.c:3575:37
  100fde:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3575:37
  100fe2:    bf f3 25 fa       	call -0xbb6 <local_irq_enable : 100430 >			  ## tasks.c:3575:37
  100fe6:    f0 44             	r0 = [r2 + 0x3c]			  ## tasks.c:3575:51
  100fe8:    10 f6 3c d0       	[r13 + 0x3c] = r0			  ## tasks.c:3575:35
  100fec:    3c 18             	goto 0x78 <xQueueGenericReceive+0x1A6 : 101066 >			  ## tasks.c:3575:35
  100fee:    40 08             	r0 = r4			  ## queue.c:1263:17
  100ff0:    7a 15             	call -0x50c <prvUnlockQueue : 100ae6 >			  ## queue.c:1263:17
  100ff2:    3b 16             	call -0x38a <xTaskResumeAll : 100c6a >			  ## queue.c:1264:24
  100ff4:    43 18             	goto 0x86 <xQueueGenericReceive+0x1BC : 10107c >			  ## queue.c:1264:24
  100ff6:    da fc 14 00       	r10 = r13 + 0x14			  ## tasks.c:3563:17
  100ffa:    a0 08             	r0 = r10			  ## tasks.c:3564:21
  100ffc:    bf f3 6c fa       	call -0xb28 <uxListRemove : 1004d8 >			  ## tasks.c:3564:21
  101000:    15 30             	if (r0 != 0x0) goto 0x2a <xQueueGenericReceive+0x16C : 10102c >			  ## tasks.c:3564:21
  101002:    00 f6 3c d0       	r0 = [r13 + 0x3c]			  ## tasks.c:3565:21
  101006:    01 fe 14 09       	r1 = r0 * 0x14			  ## tasks.c:3565:21
  10100a:    c2 ff f4 fc 00 00 	r2 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:3565:21
  101010:    81 f6 00 12       	r1 = [r1+r2]			  ## tasks.c:3565:21
  101014:    0b 32             	if (r1 != 0x0) goto 0x16 <xQueueGenericReceive+0x16C : 10102c >			  ## tasks.c:3565:21
  101016:    c1 ff a0 fc 00 00 	r1 = 0xfca0 <uxTopReadyPriority : fca0 >
  10101c:    12 08             	r2 = r1
  10101e:    01 44             	r1 = [r2 + 0x0]			  ## tasks.c:3565:21
  101020:    13 70             	r3 = 0x1			  ## tasks.c:3565:21
  101022:    f8 fd 00 03       	r0 = r3 << r0			  ## tasks.c:3565:21
  101026:    e3 fd 00 01       	r0 = r1 & ~r0			  ## tasks.c:3565:21
  10102a:    08 44             	[r2 + 0x0] = r0			  ## tasks.c:3565:21
  10102c:    bf f3 f8 f9       	call -0xc10 <local_irq_disable : 100420 >			  ## tasks.c:3571:37
  101030:    08 00             	csync			  ## tasks.c:3571:37
  101032:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3571:37
  101036:    bf f3 fb f9       	call -0xc0a <local_irq_enable : 100430 >			  ## tasks.c:3571:37
  10103a:    f1 44             	r1 = [r2 + 0x3c]			  ## tasks.c:3571:51
  10103c:    11 f6 3c d0       	[r13 + 0x3c] = r1			  ## tasks.c:3571:35
  101040:    c0 ff a0 fc 00 00 	r0 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:3571:35
  101046:    03 08             	r3 = r0			  ## tasks.c:3571:35
  101048:    00 46             	r0 = [r3 + 0x0]			  ## tasks.c:3572:17
  10104a:    12 70             	r2 = 0x1			  ## tasks.c:3572:17
  10104c:    42 0c             	r2 <<= r1			  ## tasks.c:3572:17
  10104e:    50 b4             	r0 |= r2			  ## tasks.c:3572:17
  101050:    08 46             	[r3 + 0x0] = r0			  ## tasks.c:3572:17
  101052:    c0 ff f4 fc 00 00 	r0 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:3572:17
  101058:    42 71             	r2 = 0x14			  ## tasks.c:3572:17
  10105a:    80 fe 20 01       	r0 += r1 * r2			  ## tasks.c:3572:17
  10105e:    a1 08             	r1 = r10			  ## tasks.c:3572:17
  101060:    4a 71             	r10 = 0x14			  ## tasks.c:3572:17
  101062:    bf f3 4f fa       	call -0xb62 <vListInsertEnd : 100504 >			  ## tasks.c:3572:17
  101066:    bf f3 e3 f9       	call -0xc3a <local_irq_enable : 100430 >			  ## tasks.c:3585:5
  10106a:    21 02             	r1 = [sp+8]			  ## queue.c:1254:75
  10106c:    70 08             	r0 = r7			  ## queue.c:1254:17
  10106e:    1b 15             	call -0x5ca <vTaskPlaceOnEventList : 100aa6 >			  ## queue.c:1254:17
  101070:    40 08             	r0 = r4			  ## queue.c:1255:17
  101072:    39 15             	call -0x58e <prvUnlockQueue : 100ae6 >			  ## queue.c:1255:17
  101074:    fa 15             	call -0x40c <xTaskResumeAll : 100c6a >			  ## queue.c:1256:21
  101076:    02 30             	if (r0 != 0x0) goto 0x4 <xQueueGenericReceive+0x1BC : 10107c >			  ## queue.c:1256:21
  101078:    bf f3 ee fa       	call -0xa24 <vPortYield : 100658 >			  ## queue.c:1257:21
  10107c:    bf f3 d0 f9       	call -0xc60 <local_irq_disable : 100420 >			  ## queue.c:1146:9
  101080:    08 00             	csync			  ## queue.c:1146:9
  101082:    e6 48             	r6 = [r4 + 0x38]			  ## queue.c:1148:60
  101084:    4c 2d             	if (r6 == 0x0) goto -0x168 <xQueueGenericReceive+0x5E : 100f1e >			  ## queue.c:1152:17
  101086:    35 48             	r5 = [r4 + 0xc]			  ## queue.c:1155:53
  101088:    40 08             	r0 = r4			  ## queue.c:1157:17
  10108a:    b1 08             	r1 = r11			  ## queue.c:1157:17
  10108c:    fc 16             	call -0x208 <prvCopyDataFromQueue : 100e86 >			  ## queue.c:1157:17
  10108e:    08 e0 09 00       	if (r8 == 0x0) goto 0x12 <xQueueGenericReceive+0x1E4 : 1010a4 >			  ## queue.c:1157:17
  101092:    3d 48             	[r4 + 0xc] = r5			  ## queue.c:1191:43
  101094:    90 48             	r0 = [r4 + 0x24]			  ## queue.c:1195:25
  101096:    2d 20             	if (r0 == 0x0) goto 0x5a <xQueueGenericReceive+0x232 : 1010f2 >			  ## queue.c:1195:25
  101098:    70 08             	r0 = r7			  ## queue.c:1196:29
  10109a:    26 18             	goto 0x4c <xQueueGenericReceive+0x228 : 1010e8 >			  ## queue.c:1196:29
  10109c:    bf f3 c8 f9       	call -0xc70 <local_irq_enable : 100430 >			  ## queue.c:1213:21
  1010a0:    00 70             	r0 = 0x0
  1010a2:    2a 18             	goto 0x54 <xQueueGenericReceive+0x238 : 1010f8 >
  1010a4:    60 fc ff ff       	r0 = r6 + -0x1			  ## queue.c:1163:68
  1010a8:    e8 48             	[r4 + 0x38] = r0			  ## queue.c:1163:48
  1010aa:    00 48             	r0 = [r4 + 0x0]			  ## queue.c:1167:38
  1010ac:    1a 30             	if (r0 != 0x0) goto 0x34 <xQueueGenericReceive+0x222 : 1010e2 >			  ## queue.c:1167:38
  1010ae:    bf f3 b7 f9       	call -0xc92 <local_irq_disable : 100420 >			  ## tasks.c:3967:9
  1010b2:    08 00             	csync			  ## tasks.c:3967:9
  1010b4:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3967:9
  1010b8:    bf f3 ba f9       	call -0xc8c <local_irq_enable : 100430 >			  ## tasks.c:3967:9
  1010bc:    0a 24             	if (r2 == 0x0) goto 0x14 <xQueueGenericReceive+0x212 : 1010d2 >			  ## tasks.c:3967:9
  1010be:    bf f3 af f9       	call -0xca2 <local_irq_disable : 100420 >			  ## tasks.c:3968:10
  1010c2:    08 00             	csync			  ## tasks.c:3968:10
  1010c4:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3968:10
  1010c8:    bf f3 b2 f9       	call -0xc9c <local_irq_enable : 100430 >			  ## tasks.c:3968:10
  1010cc:    40 45             	r0 = [r2 + 0x50]			  ## tasks.c:3968:38
  1010ce:    10 80             	r0 += 0x1			  ## tasks.c:3968:38
  1010d0:    48 45             	[r2 + 0x50] = r0			  ## tasks.c:3968:38
  1010d2:    bf f3 a5 f9       	call -0xcb6 <local_irq_disable : 100420 >			  ## tasks.c:3971:12
  1010d6:    08 00             	csync			  ## tasks.c:3971:12
  1010d8:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## tasks.c:3971:12
  1010dc:    bf f3 a8 f9       	call -0xcb0 <local_irq_enable : 100430 >			  ## tasks.c:3971:12
  1010e0:    1a 48             	[r4 + 0x4] = r2			  ## queue.c:1170:52
  1010e2:    40 48             	r0 = [r4 + 0x10]			  ## queue.c:1177:25
  1010e4:    06 20             	if (r0 == 0x0) goto 0xc <xQueueGenericReceive+0x232 : 1010f2 >			  ## queue.c:1177:25
  1010e6:    00 99             	r0 = r4 + 0x10			  ## queue.c:1177:25
  1010e8:    bf f3 29 fa       	call -0xbae <xTaskRemoveFromEventList : 10053e >
  1010ec:    02 20             	if (r0 == 0x0) goto 0x4 <xQueueGenericReceive+0x232 : 1010f2 >
  1010ee:    bf f3 b3 fa       	call -0xa9a <vPortYield : 100658 >
  1010f2:    bf f3 9d f9       	call -0xcc6 <local_irq_enable : 100430 >			  ## queue.c:1207:17
  1010f6:    10 70             	r0 = 0x1			  ## queue.c:1207:17
  1010f8:    06 0a             	sp += 0xc
  1010fa:    5f 01             	{pc, r15-r4} = [sp++]			  ## queue.c:1278:1


xQueueGenericSendFromISR:
  1010fc:    7a 01             	[--sp] = {rets, r10-r4}			  ## queue.c:859:0
  1010fe:    36 08             	r6 = r3			  ## queue.c:859:0
  101100:    28 08             	r8 = r2			  ## queue.c:859:0
  101102:    17 08             	r7 = r1			  ## queue.c:859:0
  101104:    05 08             	r5 = r0			  ## queue.c:859:0
  101106:    c4 ff e8 fc 00 00 	r4 = 0xfce8 <mask_log_e : fce8 >			  ## queue.c:859:0
  10110c:    c9 ff f1 21 10 00 	r9 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## queue.c:859:0
  101112:    ca ff 8f 22 10 00 	r10 = 0x10228f <$data.__1+0xB0 : 10228e >			  ## queue.c:859:0
  101118:    06 3a             	if (r5 != 0x0) goto 0xc <xQueueGenericSendFromISR+0x2A : 101126 >			  ## queue.c:859:0
  10111a:    03 48             	r3 = [r4 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10111c:    02 fb 60 03       	r2 = 0x360 <ROM_RAM_SIZE+0x40 : 360 >			  ## FreeRTOSConfig.h:181:5
  101120:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  101122:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  101124:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101126:    08 3e             	if (r7 != 0x0) goto 0x10 <xQueueGenericSendFromISR+0x3C : 101138 >
  101128:    00 4b             	r0 = [r5 + 0x40]			  ## queue.c:865:5
  10112a:    06 20             	if (r0 == 0x0) goto 0xc <xQueueGenericSendFromISR+0x3C : 101138 >			  ## queue.c:865:5
  10112c:    03 48             	r3 = [r4 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10112e:    02 fb 61 03       	r2 = 0x361 <ROM_RAM_SIZE+0x40 : 360 >			  ## FreeRTOSConfig.h:181:5
  101132:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  101134:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  101136:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101138:    26 e0 09 10       	if (r6 != 0x2) goto 0x12 <xQueueGenericSendFromISR+0x52 : 10114e >
  10113c:    f0 4a             	r0 = [r5 + 0x3c]			  ## queue.c:866:5
  10113e:    10 e0 06 00       	if (r0 == 0x1) goto 0xc <xQueueGenericSendFromISR+0x52 : 10114e >			  ## queue.c:866:5
  101142:    03 48             	r3 = [r4 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101144:    02 fb 62 03       	r2 = 0x362 <ROM_RAM_SIZE+0x42 : 362 >			  ## FreeRTOSConfig.h:181:5
  101148:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  10114a:    a1 08             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  10114c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10114e:    bf f3 67 f9       	call -0xd32 <local_irq_disable : 100420 >			  ## queue.c:889:5
  101152:    08 00             	csync			  ## queue.c:889:5
  101154:    e0 4a             	r0 = [r5 + 0x38]			  ## queue.c:893:23
  101156:    26 e0 04 00       	if (r6 == 0x2) goto 0x8 <xQueueGenericSendFromISR+0x66 : 101162 >			  ## queue.c:893:23
  10115a:    f1 4a             	r1 = [r5 + 0x3c]			  ## queue.c:893:52
  10115c:    04 70             	r4 = 0x0			  ## queue.c:893:52
  10115e:    10 f2 0e 20       	if (r0 >= r1) goto 0x1c <xQueueGenericSendFromISR+0x82 : 10117e >			  ## queue.c:893:52
  101162:    04 f9 45 50       	r4 = b[r5 + 0x45] (u)			  ## queue.c:894:45
  101166:    50 08             	r0 = r5			  ## queue.c:903:20
  101168:    71 08             	r1 = r7			  ## queue.c:903:20
  10116a:    62 08             	r2 = r6			  ## queue.c:903:20
  10116c:    bf f3 20 fb       	call -0x9c0 <prvCopyDataToQueue : 1007b0 >			  ## queue.c:903:20
  101170:    00 ff ff 40 08 00 	if (r4 == 0xff) goto 0x10 <xQueueGenericSendFromISR+0x8A : 101186 >			  ## queue.c:903:20
  101176:    10 98             	r0 = r4 + 0x1			  ## queue.c:967:53
  101178:    10 f9 45 50       	b[r5 + 0x45] = r0			  ## queue.c:967:34
  10117c:    14 70             	r4 = 0x1			  ## queue.c:967:34
  10117e:    bf f3 57 f9       	call -0xd52 <local_irq_enable : 100430 >			  ## queue.c:978:5
  101182:    40 08             	r0 = r4			  ## queue.c:980:5
  101184:    5a 01             	{pc, r10-r4} = [sp++]			  ## queue.c:980:5
  101186:    90 4a             	r0 = [r5 + 0x24]			  ## queue.c:945:25
  101188:    14 70             	r4 = 0x1			  ## queue.c:945:25
  10118a:    f9 21             	if (r0 == 0x0) goto -0xe <xQueueGenericSendFromISR+0x82 : 10117e >			  ## queue.c:945:25
  10118c:    50 fc 24 00       	r0 = r5 + 0x24			  ## queue.c:945:25
  101190:    bf f3 d5 f9       	call -0xc56 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:947:29
  101194:    08 e0 f3 0f       	if (r8 == 0x0) goto -0x1a <xQueueGenericSendFromISR+0x82 : 10117e >			  ## queue.c:947:29
  101198:    f2 21             	if (r0 == 0x0) goto -0x1c <xQueueGenericSendFromISR+0x82 : 10117e >
  10119a:    14 f6 00 80       	[r8 + 0x0] = r4			  ## queue.c:951:60
  10119e:    ef 1f             	goto -0x22 <xQueueGenericSendFromISR+0x82 : 10117e >			  ## queue.c:951:60


xQueueReceiveFromISR:
  1011a0:    79 01             	[--sp] = {rets, r9-r4}			  ## queue.c:1282:0
  1011a2:    28 08             	r8 = r2			  ## queue.c:1282:0
  1011a4:    16 08             	r6 = r1			  ## queue.c:1282:0
  1011a6:    05 08             	r5 = r0			  ## queue.c:1282:0
  1011a8:    c7 ff e8 fc 00 00 	r7 = 0xfce8 <mask_log_e : fce8 >			  ## queue.c:1282:0
  1011ae:    c9 ff f1 21 10 00 	r9 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## queue.c:1282:0
  1011b4:    c4 ff ba 22 10 00 	r4 = 0x1022ba <$data.__1+0xDC : 1022ba >			  ## queue.c:1282:0
  1011ba:    06 3a             	if (r5 != 0x0) goto 0xc <xQueueReceiveFromISR+0x28 : 1011c8 >			  ## queue.c:1282:0
  1011bc:    03 4e             	r3 = [r7 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1011be:    02 fb 07 05       	r2 = 0x507 <TLB_SIZE+0x106 : 506 >			  ## FreeRTOSConfig.h:181:5
  1011c2:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1011c4:    41 08             	r1 = r4			  ## FreeRTOSConfig.h:181:5
  1011c6:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1011c8:    08 3c             	if (r6 != 0x0) goto 0x10 <xQueueReceiveFromISR+0x3A : 1011da >
  1011ca:    00 4b             	r0 = [r5 + 0x40]			  ## queue.c:1288:5
  1011cc:    06 20             	if (r0 == 0x0) goto 0xc <xQueueReceiveFromISR+0x3A : 1011da >			  ## queue.c:1288:5
  1011ce:    03 4e             	r3 = [r7 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1011d0:    02 fb 08 05       	r2 = 0x508 <TLB_SIZE+0x108 : 508 >			  ## FreeRTOSConfig.h:181:5
  1011d4:    90 08             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1011d6:    41 08             	r1 = r4			  ## FreeRTOSConfig.h:181:5
  1011d8:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1011da:    e7 4a             	r7 = [r5 + 0x38]			  ## queue.c:1308:56
  1011dc:    10 2e             	if (r7 == 0x0) goto 0x20 <xQueueReceiveFromISR+0x5E : 1011fe >
  1011de:    04 f9 44 50       	r4 = b[r5 + 0x44] (u)			  ## queue.c:1312:45
  1011e2:    50 08             	r0 = r5			  ## queue.c:1316:13
  1011e4:    61 08             	r1 = r6			  ## queue.c:1316:13
  1011e6:    4f 16             	call -0x362 <prvCopyDataFromQueue : 100e86 >			  ## queue.c:1316:13
  1011e8:    70 fc ff ff       	r0 = r7 + -0x1			  ## queue.c:1317:60
  1011ec:    e8 4a             	[r5 + 0x38] = r0			  ## queue.c:1317:40
  1011ee:    00 ff ff 40 08 00 	if (r4 == 0xff) goto 0x10 <xQueueReceiveFromISR+0x64 : 101204 >			  ## queue.c:1317:40
  1011f4:    10 98             	r0 = r4 + 0x1			  ## queue.c:1342:53
  1011f6:    10 f9 44 50       	b[r5 + 0x44] = r0			  ## queue.c:1342:34
  1011fa:    16 70             	r6 = 0x1			  ## queue.c:1342:34
  1011fc:    01 18             	goto 0x2 <xQueueReceiveFromISR+0x60 : 101200 >
  1011fe:    06 70             	r6 = 0x0
  101200:    60 08             	r0 = r6			  ## queue.c:1353:5
  101202:    59 01             	{pc, r9-r4} = [sp++]			  ## queue.c:1353:5
  101204:    40 4a             	r0 = [r5 + 0x10]			  ## queue.c:1324:21
  101206:    16 70             	r6 = 0x1			  ## queue.c:1324:21
  101208:    fb 21             	if (r0 == 0x0) goto -0xa <xQueueReceiveFromISR+0x60 : 101200 >
  10120a:    00 9b             	r0 = r5 + 0x10			  ## queue.c:1324:21
  10120c:    bf f3 97 f9       	call -0xcd2 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:1325:25
  101210:    08 e0 f6 0f       	if (r8 == 0x0) goto -0x14 <xQueueReceiveFromISR+0x60 : 101200 >			  ## queue.c:1325:25
  101214:    f5 21             	if (r0 == 0x0) goto -0x16 <xQueueReceiveFromISR+0x60 : 101200 >
  101216:    16 f6 00 80       	[r8 + 0x0] = r6			  ## queue.c:1329:56
  10121a:    f2 1f             	goto -0x1c <xQueueReceiveFromISR+0x60 : 101200 >			  ## queue.c:1329:56


uxQueueMessagesWaiting:
  10121c:    74 01             	[--sp] = {rets, r4}			  ## queue.c:1409:0
  10121e:    04 08             	r4 = r0			  ## queue.c:1409:0
  101220:    0d 38             	if (r4 != 0x0) goto 0x1a <uxQueueMessagesWaiting+0x20 : 10123c >			  ## queue.c:1409:0
  101222:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101228:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10122a:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  101230:    c1 ff cf 22 10 00 	r1 = 0x1022cf <$data.__1+0xF0 : 1022ce >			  ## FreeRTOSConfig.h:181:5
  101236:    02 fb 84 05       	r2 = 0x584 <TLB_SIZE+0x184 : 584 >			  ## FreeRTOSConfig.h:181:5
  10123a:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10123c:    bf f3 f0 f8       	call -0xe20 <local_irq_disable : 100420 >			  ## queue.c:1414:5
  101240:    08 00             	csync			  ## queue.c:1414:5
  101242:    e2 48             	r2 = [r4 + 0x38]			  ## queue.c:1416:42
  101244:    bf f3 f4 f8       	call -0xe18 <local_irq_enable : 100430 >			  ## queue.c:1418:5
  101248:    20 08             	r0 = r2			  ## queue.c:1420:5
  10124a:    54 01             	{pc, r4} = [sp++]			  ## queue.c:1420:5


uxQueueSpacesAvailable:
  10124c:    74 01             	[--sp] = {rets, r4}			  ## queue.c:1425:0
  10124e:    04 08             	r4 = r0			  ## queue.c:1425:0
  101250:    0d 38             	if (r4 != 0x0) goto 0x1a <uxQueueSpacesAvailable+0x20 : 10126c >			  ## queue.c:1425:0
  101252:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101258:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10125a:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  101260:    c1 ff e6 22 10 00 	r1 = 0x1022e6 <$data.__1+0x108 : 1022e6 >			  ## FreeRTOSConfig.h:181:5
  101266:    02 fb 96 05       	r2 = 0x596 <TLB_SIZE+0x196 : 596 >			  ## FreeRTOSConfig.h:181:5
  10126a:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10126c:    bf f3 d8 f8       	call -0xe50 <local_irq_disable : 100420 >			  ## queue.c:1432:5
  101270:    08 00             	csync			  ## queue.c:1432:5
  101272:    f0 48             	r0 = [r4 + 0x3c]			  ## queue.c:1434:29
  101274:    e1 48             	r1 = [r4 + 0x38]			  ## queue.c:1434:49
  101276:    62 b0             	r2 = r0 - r1			  ## queue.c:1434:38
  101278:    bf f3 da f8       	call -0xe4c <local_irq_enable : 100430 >			  ## queue.c:1436:5
  10127c:    20 08             	r0 = r2			  ## queue.c:1438:5
  10127e:    54 01             	{pc, r4} = [sp++]			  ## queue.c:1438:5


uxQueueMessagesWaitingFromISR:
  101280:    74 01             	[--sp] = {rets, r4}			  ## queue.c:1443:0
  101282:    04 08             	r4 = r0			  ## queue.c:1443:0
  101284:    0d 38             	if (r4 != 0x0) goto 0x1a <uxQueueMessagesWaitingFromISR+0x20 : 1012a0 >			  ## queue.c:1443:0
  101286:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  10128c:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10128e:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  101294:    c1 ff fd 22 10 00 	r1 = 0x1022fd <$data.__1+0x11E : 1022fc >			  ## FreeRTOSConfig.h:181:5
  10129a:    02 fb a6 05       	r2 = 0x5a6 <TLB_SIZE+0x1A6 : 5a6 >			  ## FreeRTOSConfig.h:181:5
  10129e:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1012a0:    e0 48             	r0 = [r4 + 0x38]			  ## queue.c:1448:38
  1012a2:    54 01             	{pc, r4} = [sp++]			  ## queue.c:1450:5


vQueueDelete:
  1012a4:    74 01             	[--sp] = {rets, r4}			  ## queue.c:1455:0
  1012a6:    04 08             	r4 = r0			  ## queue.c:1455:0
  1012a8:    0d 38             	if (r4 != 0x0) goto 0x1a <vQueueDelete+0x20 : 1012c4 >			  ## queue.c:1455:0
  1012aa:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1012b0:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1012b2:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  1012b8:    c1 ff 1b 23 10 00 	r1 = 0x10231b <$data.__1+0x13C : 10231a >			  ## FreeRTOSConfig.h:181:5
  1012be:    02 fb b2 05       	r2 = 0x5b2 <TLB_SIZE+0x1B2 : 5b2 >			  ## FreeRTOSConfig.h:181:5
  1012c2:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1012c4:    00 70             	r0 = 0x0			  ## queue.c:1461:26
  1012c6:    10 f9 4c 40       	b[r4 + 0x4c] = r0			  ## queue.c:1461:26
  1012ca:    00 f9 46 40       	r0 = b[r4 + 0x46] (u)			  ## queue.c:1479:22
  1012ce:    06 30             	if (r0 != 0x0) goto 0xc <vQueueDelete+0x38 : 1012dc >			  ## queue.c:1479:22
  1012d0:    c0 ff cc fc 00 00 	r0 = 0xfccc <mask_free : fccc >			  ## mask_export.c:23:5
  1012d6:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:23:5
  1012d8:    40 08             	r0 = r4			  ## mask_export.c:23:5
  1012da:    81 00             	call r1			  ## mask_export.c:23:5
  1012dc:    54 01             	{pc, r4} = [sp++]			  ## queue.c:1492:1


xTaskCreate:
  1012de:    7b 01             	[--sp] = {rets, r11-r4}			  ## tasks.c:720:0
  1012e0:    c4 ff d4 fc 00 00 	r4 = 0xfcd4 <mask_stack_malloc : fcd4 >			  ## mask_export.c:32:12
  1012e6:    04 48             	r4 = [r4 + 0x0]			  ## mask_export.c:32:12
  1012e8:    39 08             	r9 = r3			  ## mask_export.c:32:12
  1012ea:    2b 08             	r11 = r2
  1012ec:    15 08             	r5 = r1
  1012ee:    08 08             	r8 = r0
  1012f0:    97 c0             	r7 = r2 << 0x2			  ## tasks.c:752:78
  1012f2:    70 08             	r0 = r7			  ## mask_export.c:32:12
  1012f4:    84 00             	call r4			  ## mask_export.c:32:12
  1012f6:    06 08             	r6 = r0			  ## mask_export.c:32:12
  1012f8:    fa 07             	r10 = -0x1
  1012fa:    c1 2c             	if (r6 == 0x0) goto 0x182 <xTaskCreate+0x1A0 : 10147e >
  1012fc:    c0 ff d0 fc 00 00 	r0 = 0xfcd0 <mask_malloc : fcd0 >			  ## mask_export.c:27:12
  101302:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:27:12
  101304:    c0 75             	r0 = 0x5c			  ## mask_export.c:27:12
  101306:    81 00             	call r1			  ## mask_export.c:27:12
  101308:    04 08             	r4 = r0			  ## mask_export.c:27:12
  10130a:    5a 28             	if (r4 == 0x0) goto 0xb4 <xTaskCreate+0xE2 : 1013c0 >			  ## tasks.c:758:17
  10130c:    a0 02             	r0 = [sp+40]
  10130e:    91 02             	r1 = [sp+36]
  101310:    0e 49             	[r4 + 0x40] = r6			  ## tasks.c:760:35
  101312:    03 70             	r3 = 0x0			  ## tasks.c:760:35
  101314:    13 f9 58 40       	b[r4 + 0x58] = r3			  ## tasks.c:777:45
  101318:    1b f6 04 40       	[r4 + 0x4] = r11			  ## tasks.c:830:30
  10131c:    c2 bd             	r2 = r6 + r7			  ## tasks.c:760:35
  10131e:    c2 8f             	r2 += -0x4			  ## tasks.c:831:42
  101320:    32 fd 03 29       	r2 = r2 & 0xfffffffc			  ## tasks.c:832:79
  101324:    b3 e0 08 80       	if (r3 > 0xb) goto 0x10 <xTaskCreate+0x5A : 101338 >
  101328:    06 fa 00 53       	r6 = b[r5+r3] (u)			  ## tasks.c:852:37
  10132c:    c7 b8             	r7 = r4 + r3			  ## tasks.c:852:35
  10132e:    8e 6e             	b[r7 + 0x8] = r6			  ## tasks.c:852:35
  101330:    06 fa 00 53       	r6 = b[r5+r3] (u)			  ## tasks.c:857:13
  101334:    13 80             	r3 += 0x1			  ## tasks.c:851:75
  101336:    f6 3d             	if (r6 != 0x0) goto -0x14 <xTaskCreate+0x46 : 101324 >
  101338:    03 70             	r3 = 0x0
  10133a:    3b 69             	b[r4 + 0x13] = r3			  ## tasks.c:865:57
  10133c:    71 e0 01 30       	if (r1 < 0x7) goto 0x2 <xTaskCreate+0x64 : 101342 >
  101340:    71 70             	r1 = 0x7			  ## tasks.c:869:9
  101342:    f9 48             	[r4 + 0x3c] = r1			  ## tasks.c:875:26
  101344:    39 49             	[r4 + 0x4c] = r1			  ## tasks.c:878:34
  101346:    4b 49             	[r4 + 0x50] = r3			  ## tasks.c:879:33
  101348:    9b 48             	[r4 + 0x24] = r3			  ## list.c:114:25
  10134a:    eb 48             	[r4 + 0x38] = r3			  ## list.c:114:25
  10134c:    8c 48             	[r4 + 0x20] = r4			  ## tasks.c:888:5
  10134e:    61 fb 08 19       	r1 = 0x8 - r1			  ## tasks.c:891:5
  101352:    a9 48             	[r4 + 0x28] = r1			  ## tasks.c:891:5
  101354:    dc 48             	[r4 + 0x34] = r4			  ## tasks.c:892:5
  101356:    5b 49             	[r4 + 0x54] = r3			  ## tasks.c:902:29
  101358:    13 f9 59 40       	b[r4 + 0x59] = r3			  ## tasks.c:947:34
  10135c:    21 fc b4 ff       	r1 = r2 + -0x4c			  ## tasks.c:947:34
  101360:    19 f6 0c 10       	[r1 + 0xc] = r9			  ## port.c:156:12
  101364:    2b 42             	[r1 + 0x8] = r3			  ## port.c:158:12
  101366:    1b 42             	[r1 + 0x4] = r3			  ## port.c:159:12
  101368:    18 f6 00 10       	[r1 + 0x0] = r8			  ## port.c:162:12
  10136c:    09 48             	[r4 + 0x0] = r1			  ## tasks.c:961:32
  10136e:    01 20             	if (r0 == 0x0) goto 0x2 <xTaskCreate+0x94 : 101372 >
  101370:    0c 40             	[r0 + 0x0] = r4			  ## tasks.c:968:24
  101372:    bf f3 55 f8       	call -0xf56 <local_irq_disable : 100420 >			  ## tasks.c:979:5
  101376:    08 00             	csync			  ## tasks.c:979:5
  101378:    c3 ff 90 fc 00 00 	r3 = 0xfc90 <uxCurrentNumberOfTasks : fc90 >			  ## tasks.c:979:5
  10137e:    00 46             	r0 = [r3 + 0x0]			  ## tasks.c:981:31
  101380:    10 80             	r0 += 0x1			  ## tasks.c:981:31
  101382:    08 46             	[r3 + 0x0] = r0			  ## tasks.c:981:31
  101384:    bf f3 4c f8       	call -0xf68 <local_irq_disable : 100420 >			  ## tasks.c:982:13
  101388:    08 00             	csync			  ## tasks.c:982:13
  10138a:    c6 ff 94 fc 00 00 	r6 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:982:13
  101390:    05 4c             	r5 = [r6 + 0x0]			  ## tasks.c:982:13
  101392:    bf f3 4d f8       	call -0xf66 <local_irq_enable : 100430 >			  ## tasks.c:982:13
  101396:    c2 ff f4 fc 00 00 	r2 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:982:13
  10139c:    c7 ff 98 fc 00 00 	r7 = 0xfc98 <xSchedulerRunning : fc98 >			  ## tasks.c:982:13
  1013a2:    15 2a             	if (r5 == 0x0) goto 0x2a <xTaskCreate+0xF0 : 1013ce >			  ## tasks.c:982:13
  1013a4:    00 4e             	r0 = [r7 + 0x0]			  ## tasks.c:999:17
  1013a6:    43 30             	if (r0 != 0x0) goto 0x86 <xTaskCreate+0x150 : 10142e >			  ## tasks.c:999:17
  1013a8:    bf f3 3a f8       	call -0xf8c <local_irq_disable : 100420 >			  ## tasks.c:1000:21
  1013ac:    08 00             	csync			  ## tasks.c:1000:21
  1013ae:    03 4c             	r3 = [r6 + 0x0]			  ## tasks.c:1000:21
  1013b0:    bf f3 3e f8       	call -0xf84 <local_irq_enable : 100430 >			  ## tasks.c:1000:21
  1013b4:    f0 48             	r0 = [r4 + 0x3c]			  ## tasks.c:1000:59
  1013b6:    f1 46             	r1 = [r3 + 0x3c]			  ## tasks.c:1000:35
  1013b8:    01 f2 39 80       	if (r1 > r0) goto 0x72 <xTaskCreate+0x150 : 10142e >			  ## tasks.c:1000:35
  1013bc:    0c 4c             	[r6 + 0x0] = r4			  ## tasks.c:1001:43
  1013be:    37 18             	goto 0x6e <xTaskCreate+0x150 : 10142e >			  ## tasks.c:1001:43
  1013c0:    c0 ff d8 fc 00 00 	r0 = 0xfcd8 <mask_stack_free : fcd8 >			  ## mask_export.c:36:5
  1013c6:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:36:5
  1013c8:    60 08             	r0 = r6			  ## mask_export.c:36:5
  1013ca:    81 00             	call r1			  ## mask_export.c:36:5
  1013cc:    58 18             	goto 0xb0 <xTaskCreate+0x1A0 : 10147e >			  ## mask_export.c:36:5
  1013ce:    0c 4c             	[r6 + 0x0] = r4			  ## tasks.c:985:35
  1013d0:    00 46             	r0 = [r3 + 0x0]			  ## tasks.c:987:17
  1013d2:    10 e0 2c 10       	if (r0 != 0x1) goto 0x58 <xTaskCreate+0x150 : 10142e >			  ## tasks.c:987:17
  1013d6:    03 70             	r3 = 0x0
  1013d8:    04 18             	goto 0x8 <xTaskCreate+0x104 : 1013e2 >
  1013da:    80 b6             	r0 = r3 + r2			  ## tasks.c:3200:9
  1013dc:    bf f3 59 f9       	call -0xd4e <vListInitialise : 100692 >			  ## tasks.c:3200:9
  1013e0:    43 81             	r3 += 0x14			  ## tasks.c:3199:5
  1013e2:    01 ff a0 30 f9 ff 	if (r3 != 0xa0) goto -0xe <xTaskCreate+0xFC : 1013da >
  1013e8:    c3 ff 94 fd 00 00 	r3 = 0xfd94 <xDelayedTaskList1 : fd94 >			  ## tasks.c:3203:5
  1013ee:    30 08             	r0 = r3			  ## tasks.c:3203:5
  1013f0:    bf f3 4f f9       	call -0xd62 <vListInitialise : 100692 >			  ## tasks.c:3203:5
  1013f4:    c5 ff a8 fd 00 00 	r5 = 0xfda8 <xDelayedTaskList2 : fda8 >			  ## tasks.c:3204:5
  1013fa:    50 08             	r0 = r5			  ## tasks.c:3204:5
  1013fc:    bf f3 49 f9       	call -0xd6e <vListInitialise : 100692 >			  ## tasks.c:3204:5
  101400:    c0 ff bc fd 00 00 	r0 = 0xfdbc <xPendingReadyList : fdbc >			  ## tasks.c:3205:5
  101406:    bf f3 44 f9       	call -0xd78 <vListInitialise : 100692 >			  ## tasks.c:3205:5
  10140a:    c0 ff d0 fd 00 00 	r0 = 0xfdd0 <xTasksWaitingTermination : fdd0 >			  ## tasks.c:3209:9
  101410:    bf f3 3f f9       	call -0xd82 <vListInitialise : 100692 >			  ## tasks.c:3209:9
  101414:    c0 ff e4 fd 00 00 	r0 = 0xfde4 <xSuspendedTaskList : fde4 >			  ## tasks.c:3215:9
  10141a:    bf f3 3a f9       	call -0xd8c <vListInitialise : 100692 >			  ## tasks.c:3215:9
  10141e:    c0 ff f8 fd 00 00 	r0 = 0xfdf8 <pxDelayedTaskList : fdf8 >			  ## tasks.c:3221:23
  101424:    0b 40             	[r0 + 0x0] = r3			  ## tasks.c:3221:23
  101426:    c0 ff fc fd 00 00 	r0 = 0xfdfc <pxOverflowDelayedTaskList : fdfc >			  ## tasks.c:3222:31
  10142c:    0d 40             	[r0 + 0x0] = r5			  ## tasks.c:3222:31
  10142e:    c0 ff 9c fc 00 00 	r0 = 0xfc9c <uxTaskNumber : fc9c >			  ## tasks.c:1010:21
  101434:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:1010:21
  101436:    11 80             	r1 += 0x1			  ## tasks.c:1010:21
  101438:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1010:21
  10143a:    19 49             	[r4 + 0x44] = r1			  ## tasks.c:1015:35
  10143c:    f0 48             	r0 = [r4 + 0x3c]			  ## tasks.c:1020:9
  10143e:    c1 ff a0 fc 00 00 	r1 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:1020:9
  101444:    03 42             	r3 = [r1 + 0x0]			  ## tasks.c:1020:9
  101446:    1a 70             	r10 = 0x1			  ## tasks.c:1020:9
  101448:    f8 fd 00 5a       	r5 = r10 << r0			  ## tasks.c:1020:9
  10144c:    53 ba             	r3 |= r5			  ## tasks.c:1020:9
  10144e:    0b 42             	[r1 + 0x0] = r3			  ## tasks.c:1020:9
  101450:    41 71             	r1 = 0x14			  ## tasks.c:1020:9
  101452:    80 fe 10 20       	r2 += r0 * r1			  ## tasks.c:1020:9
  101456:    41 99             	r1 = r4 + 0x14			  ## tasks.c:1020:9
  101458:    20 08             	r0 = r2			  ## tasks.c:1020:9
  10145a:    bf f3 53 f8       	call -0xf5a <vListInsertEnd : 100504 >			  ## tasks.c:1020:9
  10145e:    bf f3 e7 f7       	call -0x1032 <local_irq_enable : 100430 >			  ## tasks.c:1028:5
  101462:    00 4e             	r0 = [r7 + 0x0]			  ## tasks.c:1032:9
  101464:    0c 20             	if (r0 == 0x0) goto 0x18 <xTaskCreate+0x1A0 : 10147e >			  ## tasks.c:1032:9
  101466:    bf f3 db f7       	call -0x104a <local_irq_disable : 100420 >			  ## tasks.c:1035:13
  10146a:    08 00             	csync			  ## tasks.c:1035:13
  10146c:    02 4c             	r2 = [r6 + 0x0]			  ## tasks.c:1035:13
  10146e:    bf f3 df f7       	call -0x1042 <local_irq_enable : 100430 >			  ## tasks.c:1035:13
  101472:    f0 48             	r0 = [r4 + 0x3c]			  ## tasks.c:1035:50
  101474:    f1 44             	r1 = [r2 + 0x3c]			  ## tasks.c:1035:27
  101476:    01 f2 02 20       	if (r1 >= r0) goto 0x4 <xTaskCreate+0x1A0 : 10147e >			  ## tasks.c:1035:27
  10147a:    bf f3 ed f8       	call -0xe26 <vPortYield : 100658 >			  ## tasks.c:1036:13
  10147e:    a0 08             	r0 = r10			  ## tasks.c:787:5
  101480:    5b 01             	{pc, r11-r4} = [sp++]			  ## tasks.c:787:5


prvDeleteTCB:
  101482:    75 01             	[--sp] = {rets, r5, r4}			  ## tasks.c:3431:0
  101484:    04 08             	r4 = r0			  ## tasks.c:3431:0
  101486:    00 f9 58 40       	r0 = b[r4 + 0x58] (u)			  ## tasks.c:3456:20
  10148a:    20 e0 1d 00       	if (r0 == 0x2) goto 0x3a <prvDeleteTCB+0x46 : 1014c8 >			  ## tasks.c:3456:20
  10148e:    c5 ff cc fc 00 00 	r5 = 0xfccc <mask_free : fccc >
  101494:    10 e0 07 00       	if (r0 == 0x1) goto 0xe <prvDeleteTCB+0x24 : 1014a6 >
  101498:    0a 30             	if (r0 != 0x0) goto 0x14 <prvDeleteTCB+0x2C : 1014ae >
  10149a:    c0 ff d8 fc 00 00 	r0 = 0xfcd8 <mask_stack_free : fcd8 >			  ## mask_export.c:36:5
  1014a0:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:36:5
  1014a2:    00 49             	r0 = [r4 + 0x40]			  ## tasks.c:3459:35
  1014a4:    81 00             	call r1			  ## mask_export.c:36:5
  1014a6:    01 4a             	r1 = [r5 + 0x0]
  1014a8:    40 08             	r0 = r4
  1014aa:    15 01             	{rets, r5, r4} = [sp++]
  1014ac:    91 00             	goto r1
  1014ae:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1014b4:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1014b6:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  1014bc:    c1 ff 4e 23 10 00 	r1 = 0x10234e <$data.__1+0x170 : 10234e >			  ## FreeRTOSConfig.h:181:5
  1014c2:    02 fb 8c 0d       	r2 = 0xd8c <_stack+0x16C : d8c >			  ## FreeRTOSConfig.h:181:5
  1014c6:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1014c8:    55 01             	{pc, r5, r4} = [sp++]			  ## tasks.c:3473:1


vTaskDelete:
  1014ca:    76 01             	[--sp] = {rets, r6-r4}			  ## tasks.c:1050:0
  1014cc:    04 08             	r4 = r0			  ## tasks.c:1050:0
  1014ce:    bf f3 a7 f7       	call -0x10b2 <local_irq_disable : 100420 >			  ## tasks.c:1053:5
  1014d2:    08 00             	csync			  ## tasks.c:1053:5
  1014d4:    c6 ff 94 fc 00 00 	r6 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:1053:5
  1014da:    06 38             	if (r4 != 0x0) goto 0xc <vTaskDelete+0x1E : 1014e8 >			  ## tasks.c:1053:5
  1014dc:    bf f3 a0 f7       	call -0x10c0 <local_irq_disable : 100420 >			  ## tasks.c:1057:17
  1014e0:    08 00             	csync			  ## tasks.c:1057:17
  1014e2:    04 4c             	r4 = [r6 + 0x0]			  ## tasks.c:1057:17
  1014e4:    bf f3 a4 f7       	call -0x10b8 <local_irq_enable : 100430 >			  ## tasks.c:1057:17
  1014e8:    45 99             	r5 = r4 + 0x14			  ## tasks.c:1068:35
  1014ea:    50 08             	r0 = r5			  ## tasks.c:1068:13
  1014ec:    bf f3 f4 f7       	call -0x1018 <uxListRemove : 1004d8 >			  ## tasks.c:1068:13
  1014f0:    13 30             	if (r0 != 0x0) goto 0x26 <vTaskDelete+0x4E : 101518 >			  ## tasks.c:1068:13
  1014f2:    f0 48             	r0 = [r4 + 0x3c]			  ## tasks.c:1069:13
  1014f4:    01 fe 14 09       	r1 = r0 * 0x14			  ## tasks.c:1069:13
  1014f8:    c2 ff f4 fc 00 00 	r2 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:1069:13
  1014fe:    81 f6 00 12       	r1 = [r1+r2]			  ## tasks.c:1069:13
  101502:    0a 32             	if (r1 != 0x0) goto 0x14 <vTaskDelete+0x4E : 101518 >			  ## tasks.c:1069:13
  101504:    c1 ff a0 fc 00 00 	r1 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:1069:13
  10150a:    02 42             	r2 = [r1 + 0x0]			  ## tasks.c:1069:13
  10150c:    13 70             	r3 = 0x1			  ## tasks.c:1069:13
  10150e:    f8 fd 00 03       	r0 = r3 << r0			  ## tasks.c:1069:13
  101512:    e3 fd 00 02       	r0 = r2 & ~r0			  ## tasks.c:1069:13
  101516:    08 42             	[r1 + 0x0] = r0			  ## tasks.c:1069:13
  101518:    e0 48             	r0 = [r4 + 0x38]			  ## tasks.c:1074:13
  10151a:    04 20             	if (r0 == 0x0) goto 0x8 <vTaskDelete+0x5A : 101524 >			  ## tasks.c:1074:13
  10151c:    40 fc 28 00       	r0 = r4 + 0x28			  ## tasks.c:1074:13
  101520:    bf f3 da f7       	call -0x104c <uxListRemove : 1004d8 >			  ## tasks.c:1075:20
  101524:    c0 ff 9c fc 00 00 	r0 = 0xfc9c <uxTaskNumber : fc9c >			  ## tasks.c:1084:21
  10152a:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:1084:21
  10152c:    11 80             	r1 += 0x1			  ## tasks.c:1084:21
  10152e:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1084:21
  101530:    00 4c             	r0 = [r6 + 0x0]			  ## tasks.c:1088:22
  101532:    04 f2 0b 00       	if (r4 == r0) goto 0x16 <vTaskDelete+0x82 : 10154c >			  ## tasks.c:1088:22
  101536:    c0 ff 90 fc 00 00 	r0 = 0xfc90 <uxCurrentNumberOfTasks : fc90 >			  ## tasks.c:1112:13
  10153c:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:1112:13
  10153e:    f1 8f             	r1 += -0x1			  ## tasks.c:1112:13
  101540:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1112:13
  101542:    40 08             	r0 = r4			  ## tasks.c:1113:13
  101544:    9e 17             	call -0xc4 <prvDeleteTCB : 101482 >			  ## tasks.c:1113:13
  101546:    bf f3 e9 f7       	call -0x102e <prvResetNextTaskUnblockTime : 10051c >			  ## tasks.c:1117:13
  10154a:    0c 18             	goto 0x18 <vTaskDelete+0x9A : 101564 >			  ## tasks.c:1117:13
  10154c:    c0 ff d0 fd 00 00 	r0 = 0xfdd0 <xTasksWaitingTermination : fdd0 >			  ## tasks.c:1098:13
  101552:    51 08             	r1 = r5			  ## tasks.c:1098:13
  101554:    bf f3 d6 f7       	call -0x1054 <vListInsertEnd : 100504 >			  ## tasks.c:1098:13
  101558:    c0 ff a4 fc 00 00 	r0 = 0xfca4 <uxDeletedTasksWaitingCleanUp : fca4 >			  ## tasks.c:1103:13
  10155e:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:1103:13
  101560:    11 80             	r1 += 0x1			  ## tasks.c:1103:13
  101562:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1103:13
  101564:    c0 ff 98 fc 00 00 	r0 = 0xfc98 <xSchedulerRunning : fc98 >			  ## tasks.c:1125:9
  10156a:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:1125:9
  10156c:    17 20             	if (r0 == 0x0) goto 0x2e <vTaskDelete+0xD2 : 10159c >			  ## tasks.c:1125:9
  10156e:    00 4c             	r0 = [r6 + 0x0]			  ## tasks.c:1127:22
  101570:    04 f2 14 10       	if (r4 != r0) goto 0x28 <vTaskDelete+0xD2 : 10159c >			  ## tasks.c:1127:22
  101574:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:1132:13
  10157a:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:1132:13
  10157c:    0d 20             	if (r0 == 0x0) goto 0x1a <vTaskDelete+0xCE : 101598 >			  ## tasks.c:1132:13
  10157e:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101584:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101586:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  10158c:    c1 ff 42 23 10 00 	r1 = 0x102342 <$data.__1+0x164 : 102342 >			  ## FreeRTOSConfig.h:181:5
  101592:    02 fb 6c 04       	r2 = 0x46c <TLB_SIZE+0x6C : 46c >			  ## FreeRTOSConfig.h:181:5
  101596:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101598:    bf f3 5e f8       	call -0xf44 <vPortYield : 100658 >			  ## tasks.c:1133:13
  10159c:    16 01             	{rets, r6-r4} = [sp++]			  ## tasks.c:1138:5
  10159e:    ff f3 47 f7       	goto -0x1172 <local_irq_enable : 100430 >			  ## tasks.c:1138:5


prvGetExpectedIdleTime:
  1015a2:    34 00             	[--sp] = rets			  ## tasks.c:1872:0
  1015a4:    c0 ff a0 fc 00 00 	r0 = 0xfca0 <uxTopReadyPriority : fca0 >			  ## tasks.c:1895:13
  1015aa:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:1895:13
  1015ac:    bf f3 38 f7       	call -0x1190 <local_irq_disable : 100420 >			  ## tasks.c:1901:9
  1015b0:    08 00             	csync			  ## tasks.c:1901:9
  1015b2:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:1901:9
  1015b8:    03 40             	r3 = [r0 + 0x0]			  ## tasks.c:1901:9
  1015ba:    bf f3 39 f7       	call -0x118e <local_irq_enable : 100430 >			  ## tasks.c:1901:9
  1015be:    c0 ff f4 fc 00 00 	r0 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:1903:16
  1015c4:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:1903:16
  1015c6:    f1 46             	r1 = [r3 + 0x3c]			  ## tasks.c:1901:23
  1015c8:    50 b4             	r0 |= r2			  ## tasks.c:1901:9
  1015ca:    70 b0             	r0 &= 0xfffffffe			  ## tasks.c:1901:9
  1015cc:    51 b0             	r1 |= r0			  ## tasks.c:1901:9
  1015ce:    00 70             	r0 = 0x0			  ## tasks.c:1901:9
  1015d0:    09 32             	if (r1 != 0x0) goto 0x12 <prvGetExpectedIdleTime+0x42 : 1015e4 >			  ## tasks.c:1901:9
  1015d2:    c0 ff ac fc 00 00 	r0 = 0xfcac <xNextTaskUnblockTime : fcac >			  ## tasks.c:1914:19
  1015d8:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:1914:19
  1015da:    c1 ff b0 fc 00 00 	r1 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:1914:42
  1015e0:    01 42             	r1 = [r1 + 0x0]			  ## tasks.c:1914:42
  1015e2:    60 b0             	r0 = r0 - r1			  ## tasks.c:1914:40
  1015e4:    30 00             	pc = [sp++]			  ## tasks.c:1917:5


prvIdleTask:
  1015e6:    c7 ff a4 fc 00 00 	r7 = 0xfca4 <uxDeletedTasksWaitingCleanUp : fca4 >			  ## tasks.c:3005:0
  1015ec:    ce ff f4 fc 00 00 	r14 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:3005:0
  1015f2:    cf ff f0 fc 00 00 	r15 = 0xfcf0 <idle_hook : fcf0 >			  ## tasks.c:3005:0
  1015f8:    ca ff ac fc 00 00 	r10 = 0xfcac <xNextTaskUnblockTime : fcac >			  ## tasks.c:3005:0
  1015fe:    cb ff b0 fc 00 00 	r11 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:3005:0
  101604:    cc ff e8 fc 00 00 	r12 = 0xfce8 <mask_log_e : fce8 >			  ## tasks.c:3005:0
  10160a:    c8 ff 3b 23 10 00 	r8 = 0x10233b <$data.__1+0x15C : 10233a >			  ## tasks.c:3005:0
  101610:    c9 ff ac 23 10 00 	r9 = 0x1023ac <$data.__1+0x1CE : 1023ac >			  ## tasks.c:3005:0
  101616:    cd ff e0 fc 00 00 	r13 = 0xfce0 <mask_portSUPPRESS_TICKS_AND_SLEEP : fce0 >			  ## tasks.c:3005:0
  10161c:    c4 ff d0 fd 00 00 	r4 = 0xfdd0 <xTasksWaitingTermination : fdd0 >			  ## tasks.c:3005:0
  101622:    c5 ff 90 fc 00 00 	r5 = 0xfc90 <uxCurrentNumberOfTasks : fc90 >			  ## tasks.c:3005:0
  101628:    00 4e             	r0 = [r7 + 0x0]			  ## tasks.c:3239:16
  10162a:    19 20             	if (r0 == 0x0) goto 0x32 <prvIdleTask+0x78 : 10165e >			  ## tasks.c:3239:9
  10162c:    bf f3 51 f9       	call -0xd5e <vTaskSuspendAll : 1008d2 >			  ## tasks.c:3240:13
  101630:    00 48             	r0 = [r4 + 0x0]			  ## tasks.c:3242:32
  101632:    12 20             	if (r0 == 0x0) goto 0x24 <prvIdleTask+0x72 : 101658 >			  ## tasks.c:3242:32
  101634:    bf f3 f4 f6       	call -0x1218 <local_irq_disable : 100420 >			  ## tasks.c:3249:17
  101638:    08 00             	csync			  ## tasks.c:3249:17
  10163a:    30 48             	r0 = [r4 + 0xc]			  ## tasks.c:3251:39
  10163c:    36 40             	r6 = [r0 + 0xc]			  ## tasks.c:3251:39
  10163e:    40 9d             	r0 = r6 + 0x14			  ## tasks.c:3253:50
  101640:    bf f3 4a f7       	call -0x116c <uxListRemove : 1004d8 >			  ## tasks.c:3253:28
  101644:    00 4a             	r0 = [r5 + 0x0]			  ## tasks.c:3254:21
  101646:    f0 8f             	r0 += -0x1			  ## tasks.c:3254:21
  101648:    08 4a             	[r5 + 0x0] = r0			  ## tasks.c:3254:21
  10164a:    00 4e             	r0 = [r7 + 0x0]			  ## tasks.c:3255:21
  10164c:    f0 8f             	r0 += -0x1			  ## tasks.c:3255:21
  10164e:    08 4e             	[r7 + 0x0] = r0			  ## tasks.c:3255:21
  101650:    bf f3 ee f6       	call -0x1224 <local_irq_enable : 100430 >			  ## tasks.c:3257:17
  101654:    60 08             	r0 = r6			  ## tasks.c:3259:17
  101656:    15 17             	call -0x1d6 <prvDeleteTCB : 101482 >			  ## tasks.c:3259:17
  101658:    bf f3 07 fb       	call -0x9f2 <xTaskResumeAll : 100c6a >
  10165c:    e5 1f             	goto -0x36 <prvIdleTask+0x42 : 101628 >
  10165e:    00 f6 00 e0       	r0 = [r14 + 0x0]			  ## tasks.c:3050:17
  101662:    20 e0 02 30       	if (r0 < 0x2) goto 0x4 <prvIdleTask+0x84 : 10166a >			  ## tasks.c:3050:17
  101666:    bf f3 f7 f7       	call -0x1012 <vPortYield : 100658 >			  ## tasks.c:3051:17
  10166a:    00 f6 00 f0       	r0 = [r15 + 0x0]			  ## main.c:252:9
  10166e:    01 20             	if (r0 == 0x0) goto 0x2 <prvIdleTask+0x8C : 101672 >			  ## main.c:252:9
  101670:    80 00             	call r0			  ## main.c:253:9
  101672:    02 00             	idle			  ## main.c:255:5
  101674:    96 17             	call -0xd4 <prvGetExpectedIdleTime : 1015a2 >			  ## tasks.c:3083:33
  101676:    20 e0 d7 3f       	if (r0 < 0x2) goto -0x52 <prvIdleTask+0x42 : 101628 >
  10167a:    bf f3 2a f9       	call -0xdac <vTaskSuspendAll : 1008d2 >			  ## tasks.c:3086:17
  10167e:    00 f6 00 a0       	r0 = [r10 + 0x0]			  ## tasks.c:3091:21
  101682:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## tasks.c:3091:21
  101686:    10 f2 07 20       	if (r0 >= r1) goto 0xe <prvIdleTask+0xB2 : 101698 >			  ## tasks.c:3091:21
  10168a:    03 f6 00 c0       	r3 = [r12 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10168e:    02 fb 13 0c       	r2 = 0xc13 <usb_code_size+0x191 : c12 >			  ## FreeRTOSConfig.h:181:5
  101692:    80 08             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  101694:    91 08             	r1 = r9			  ## FreeRTOSConfig.h:181:5
  101696:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101698:    84 17             	call -0xf8 <prvGetExpectedIdleTime : 1015a2 >			  ## tasks.c:3092:41
  10169a:    20 e0 dd 3f       	if (r0 < 0x2) goto -0x46 <prvIdleTask+0x72 : 101658 >
  10169e:    01 f6 00 d0       	r1 = [r13 + 0x0]			  ## tasks.c:3096:25
  1016a2:    81 00             	call r1			  ## tasks.c:3096:25
  1016a4:    d9 1f             	goto -0x4e <prvIdleTask+0x72 : 101658 >


xTaskGetTickCount:
  1016a6:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:2022:0
  1016ac:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2028:18
  1016ae:    20 00             	rts			  ## tasks.c:2032:5


pcTaskGetName:
  1016b0:    74 01             	[--sp] = {rets, r4}			  ## tasks.c:2076:0
  1016b2:    04 08             	r4 = r0			  ## tasks.c:2076:0
  1016b4:    09 38             	if (r4 != 0x0) goto 0x12 <pcTaskGetName+0x18 : 1016c8 >			  ## tasks.c:2076:0
  1016b6:    bf f3 b3 f6       	call -0x129a <local_irq_disable : 100420 >			  ## tasks.c:2081:13
  1016ba:    08 00             	csync			  ## tasks.c:2081:13
  1016bc:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2081:13
  1016c2:    04 40             	r4 = [r0 + 0x0]			  ## tasks.c:2081:13
  1016c4:    bf f3 b4 f6       	call -0x1298 <local_irq_enable : 100430 >			  ## tasks.c:2081:13
  1016c8:    0d 38             	if (r4 != 0x0) goto 0x1a <pcTaskGetName+0x34 : 1016e4 >
  1016ca:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1016d0:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1016d2:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  1016d8:    c1 ff b8 23 10 00 	r1 = 0x1023b8 <$data.__1+0x1DA : 1023b8 >			  ## FreeRTOSConfig.h:181:5
  1016de:    02 fb 22 08       	r2 = 0x822 <stack_bss_begin+0x2 : 822 >			  ## FreeRTOSConfig.h:181:5
  1016e2:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1016e4:    80 98             	r0 = r4 + 0x8			  ## tasks.c:2083:14
  1016e6:    54 01             	{pc, r4} = [sp++]			  ## tasks.c:2083:5


prvSearchForNameWithinSingleList:
  1016e8:    78 01             	[--sp] = {rets, r8-r4}			  ## tasks.c:2090:0
  1016ea:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:2097:9
  1016ec:    1f 24             	if (r2 == 0x0) goto 0x3e <prvSearchForNameWithinSingleList+0x44 : 10172c >			  ## tasks.c:2097:9
  1016ee:    12 40             	r2 = [r0 + 0x4]			  ## tasks.c:2098:9
  1016f0:    13 44             	r3 = [r2 + 0x4]			  ## tasks.c:2098:9
  1016f2:    84 90             	r4 = r0 + 0x8			  ## tasks.c:2098:9
  1016f4:    1b 40             	[r0 + 0x4] = r3			  ## tasks.c:2098:9
  1016f6:    43 f2 02 10       	if (r3 != r4) goto 0x4 <prvSearchForNameWithinSingleList+0x16 : 1016fe >			  ## tasks.c:2098:9
  1016fa:    13 46             	r3 = [r3 + 0x4]			  ## tasks.c:2098:9
  1016fc:    1b 40             	[r0 + 0x4] = r3			  ## tasks.c:2098:9
  1016fe:    08 f6 0c 30       	r8 = [r3 + 0xc]			  ## tasks.c:2098:9
  101702:    13 46             	r3 = [r3 + 0x4]			  ## tasks.c:2101:13
  101704:    1b 40             	[r0 + 0x4] = r3			  ## tasks.c:2101:13
  101706:    43 f2 02 10       	if (r3 != r4) goto 0x4 <prvSearchForNameWithinSingleList+0x26 : 10170e >			  ## tasks.c:2101:13
  10170a:    33 40             	r3 = [r0 + 0xc]			  ## tasks.c:2101:13
  10170c:    1b 40             	[r0 + 0x4] = r3			  ## tasks.c:2101:13
  10170e:    32 46             	r2 = [r3 + 0xc]			  ## tasks.c:2101:13
  101710:    06 70             	r6 = 0x0
  101712:    b6 e0 09 80       	if (r6 > 0xb) goto 0x12 <prvSearchForNameWithinSingleList+0x40 : 101728 >
  101716:    05 fa 00 16       	r5 = b[r1+r6] (u)			  ## tasks.c:2108:34
  10171a:    87 b5             	r7 = r2 + r6			  ## tasks.c:2106:29
  10171c:    87 6e             	r7 = b[r7 + 0x8] (u)			  ## tasks.c:2106:29
  10171e:    57 f2 03 10       	if (r7 != r5) goto 0x6 <prvSearchForNameWithinSingleList+0x40 : 101728 >			  ## tasks.c:2106:29
  101722:    16 80             	r6 += 0x1			  ## tasks.c:2105:83
  101724:    f6 3f             	if (r7 != 0x0) goto -0x14 <prvSearchForNameWithinSingleList+0x2A : 101712 >
  101726:    03 18             	goto 0x6 <prvSearchForNameWithinSingleList+0x46 : 10172e >
  101728:    82 f2 eb 1f       	if (r2 != r8) goto -0x2a <prvSearchForNameWithinSingleList+0x1A : 101702 >
  10172c:    02 70             	r2 = 0x0
  10172e:    20 08             	r0 = r2			  ## tasks.c:2131:5
  101730:    58 01             	{pc, r8-r4} = [sp++]			  ## tasks.c:2131:5


xTaskGetHandle:
  101732:    77 01             	[--sp] = {rets, r7-r4}			  ## tasks.c:2140:0
  101734:    04 08             	r4 = r0			  ## tasks.c:2140:0
  101736:    bf f3 e5 f5       	call -0x1436 <strlen : 100304 >			  ## tasks.c:2145:5
  10173a:    c0 e0 0d 30       	if (r0 < 0xc) goto 0x1a <xTaskGetHandle+0x26 : 101758 >			  ## tasks.c:2145:5
  10173e:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101744:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101746:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  10174c:    c1 ff c6 23 10 00 	r1 = 0x1023c6 <$data.__1+0x1E8 : 1023c6 >			  ## FreeRTOSConfig.h:181:5
  101752:    02 fb 61 08       	r2 = 0x861 <stack_bss_begin+0x40 : 860 >			  ## FreeRTOSConfig.h:181:5
  101756:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101758:    bf f3 bb f8       	call -0xe8a <vTaskSuspendAll : 1008d2 >			  ## tasks.c:2147:5
  10175c:    c0 78             	r0 = 0x8c			  ## tasks.c:2147:5
  10175e:    c6 ff f4 fc 00 00 	r6 = 0xfcf4 <pxReadyTasksLists : fcf4 >			  ## tasks.c:2147:5
  101764:    07 08             	r7 = r0
  101766:    80 bf             	r0 = r7 + r6			  ## tasks.c:2152:21
  101768:    41 08             	r1 = r4			  ## tasks.c:2152:21
  10176a:    be 17             	call -0x84 <prvSearchForNameWithinSingleList : 1016e8 >			  ## tasks.c:2152:21
  10176c:    05 08             	r5 = r0			  ## tasks.c:2152:21
  10176e:    03 3a             	if (r5 != 0x0) goto 0x6 <xTaskGetHandle+0x44 : 101776 >
  101770:    70 fc ec ff       	r0 = r7 + -0x14			  ## tasks.c:2154:17
  101774:    f7 3f             	if (r7 != 0x0) goto -0x12 <xTaskGetHandle+0x32 : 101764 >			  ## tasks.c:2154:17
  101776:    19 3a             	if (r5 != 0x0) goto 0x32 <xTaskGetHandle+0x78 : 1017aa >
  101778:    c0 ff f8 fd 00 00 	r0 = 0xfdf8 <pxDelayedTaskList : fdf8 >			  ## tasks.c:2163:65
  10177e:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2163:65
  101780:    b3 17             	call -0x9a <prvSearchForNameWithinSingleList : 1016e8 >			  ## tasks.c:2163:21
  101782:    05 08             	r5 = r0			  ## tasks.c:2163:21
  101784:    12 3a             	if (r5 != 0x0) goto 0x24 <xTaskGetHandle+0x78 : 1017aa >
  101786:    c0 ff fc fd 00 00 	r0 = 0xfdfc <pxOverflowDelayedTaskList : fdfc >			  ## tasks.c:2167:65
  10178c:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2167:65
  10178e:    ac 17             	call -0xa8 <prvSearchForNameWithinSingleList : 1016e8 >			  ## tasks.c:2167:21
  101790:    05 08             	r5 = r0			  ## tasks.c:2167:21
  101792:    0b 3a             	if (r5 != 0x0) goto 0x16 <xTaskGetHandle+0x78 : 1017aa >
  101794:    c0 ff e4 fd 00 00 	r0 = 0xfde4 <xSuspendedTaskList : fde4 >			  ## tasks.c:2174:25
  10179a:    a6 17             	call -0xb4 <prvSearchForNameWithinSingleList : 1016e8 >			  ## tasks.c:2174:25
  10179c:    05 08             	r5 = r0			  ## tasks.c:2174:25
  10179e:    05 3a             	if (r5 != 0x0) goto 0xa <xTaskGetHandle+0x78 : 1017aa >
  1017a0:    c0 ff d0 fd 00 00 	r0 = 0xfdd0 <xTasksWaitingTermination : fdd0 >			  ## tasks.c:2183:25
  1017a6:    a0 17             	call -0xc0 <prvSearchForNameWithinSingleList : 1016e8 >			  ## tasks.c:2183:25
  1017a8:    05 08             	r5 = r0			  ## tasks.c:2183:25
  1017aa:    bf f3 5e fa       	call -0xb44 <xTaskResumeAll : 100c6a >			  ## tasks.c:2188:12
  1017ae:    50 08             	r0 = r5			  ## tasks.c:2190:5
  1017b0:    57 01             	{pc, r7-r4} = [sp++]			  ## tasks.c:2190:5


vTaskStepTick:
  1017b2:    75 01             	[--sp] = {rets, r5, r4}			  ## tasks.c:2284:0
  1017b4:    c5 ff b0 fc 00 00 	r5 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:2284:0
  1017ba:    01 4a             	r1 = [r5 + 0x0]			  ## tasks.c:2288:5
  1017bc:    c2 ff ac fc 00 00 	r2 = 0xfcac <xNextTaskUnblockTime : fcac >			  ## tasks.c:2288:5
  1017c2:    02 44             	r2 = [r2 + 0x0]			  ## tasks.c:2288:5
  1017c4:    04 08             	r4 = r0			  ## tasks.c:2288:5
  1017c6:    00 b3             	r0 = r1 + r4			  ## tasks.c:2288:5
  1017c8:    20 f2 0d 90       	if (r0 <= r2) goto 0x1a <vTaskStepTick+0x34 : 1017e6 >			  ## tasks.c:2288:5
  1017cc:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1017d2:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1017d4:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  1017da:    c1 ff d5 23 10 00 	r1 = 0x1023d5 <$data.__1+0x1F6 : 1023d4 >			  ## FreeRTOSConfig.h:181:5
  1017e0:    02 fb f0 08       	r2 = 0x8f0 <stack_bss_begin+0xD0 : 8f0 >			  ## FreeRTOSConfig.h:181:5
  1017e4:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1017e6:    00 4a             	r0 = [r5 + 0x0]			  ## tasks.c:2289:16
  1017e8:    40 09             	r0 += r4			  ## tasks.c:2289:16
  1017ea:    08 4a             	[r5 + 0x0] = r0			  ## tasks.c:2289:16
  1017ec:    55 01             	{pc, r5, r4} = [sp++]			  ## tasks.c:2291:1


vTaskSetApplicationTaskTag:
  1017ee:    34 00             	[--sp] = rets			  ## tasks.c:2518:0
  1017f0:    12 08             	r2 = r1			  ## tasks.c:2518:0
  1017f2:    03 08             	r3 = r0			  ## tasks.c:2518:0
  1017f4:    09 36             	if (r3 != 0x0) goto 0x12 <vTaskSetApplicationTaskTag+0x1A : 101808 >			  ## tasks.c:2518:0
  1017f6:    bf f3 13 f6       	call -0x13da <local_irq_disable : 100420 >			  ## tasks.c:2524:26
  1017fa:    08 00             	csync			  ## tasks.c:2524:26
  1017fc:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2524:26
  101802:    03 40             	r3 = [r0 + 0x0]			  ## tasks.c:2524:26
  101804:    bf f3 14 f6       	call -0x13d8 <local_irq_enable : 100430 >			  ## tasks.c:2524:26
  101808:    bf f3 0a f6       	call -0x13ec <local_irq_disable : 100420 >			  ## tasks.c:2531:5
  10180c:    08 00             	csync			  ## tasks.c:2531:5
  10180e:    5a 47             	[r3 + 0x54] = r2			  ## tasks.c:2532:21
  101810:    88 01             	{rets} = [sp++]			  ## tasks.c:2533:5
  101812:    ff f3 0d f6       	goto -0x13e6 <local_irq_enable : 100430 >			  ## tasks.c:2533:5


xTaskGetApplicationTaskTag:
  101816:    34 00             	[--sp] = rets			  ## tasks.c:2542:0
  101818:    02 08             	r2 = r0			  ## tasks.c:2542:0
  10181a:    09 34             	if (r2 != 0x0) goto 0x12 <xTaskGetApplicationTaskTag+0x18 : 10182e >			  ## tasks.c:2542:0
  10181c:    bf f3 00 f6       	call -0x1400 <local_irq_disable : 100420 >			  ## tasks.c:2548:26
  101820:    08 00             	csync			  ## tasks.c:2548:26
  101822:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:2548:26
  101828:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:2548:26
  10182a:    bf f3 01 f6       	call -0x13fe <local_irq_enable : 100430 >			  ## tasks.c:2548:26
  10182e:    bf f3 f7 f5       	call -0x1412 <local_irq_disable : 100420 >			  ## tasks.c:2555:5
  101832:    08 00             	csync			  ## tasks.c:2555:5
  101834:    52 45             	r2 = [r2 + 0x54]			  ## tasks.c:2557:25
  101836:    bf f3 fb f5       	call -0x140a <local_irq_enable : 100430 >			  ## tasks.c:2559:5
  10183a:    20 08             	r0 = r2			  ## tasks.c:2561:5
  10183c:    30 00             	pc = [sp++]			  ## tasks.c:2561:5


eTaskConfirmSleepModeStatus:
  10183e:    c0 ff bc fd 00 00 	r0 = 0xfdbc <xPendingReadyList : fdbc >			  ## tasks.c:3115:0
  101844:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3120:9
  101846:    05 30             	if (r0 != 0x0) goto 0xa <eTaskConfirmSleepModeStatus+0x14 : 101852 >			  ## tasks.c:3120:9
  101848:    c0 ff b4 fc 00 00 	r0 = 0xfcb4 <xYieldPending : fcb4 >			  ## tasks.c:3123:16
  10184e:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3123:16
  101850:    02 20             	if (r0 == 0x0) goto 0x4 <eTaskConfirmSleepModeStatus+0x18 : 101856 >			  ## tasks.c:3123:16
  101852:    00 70             	r0 = 0x0			  ## tasks.c:3138:5
  101854:    20 00             	rts			  ## tasks.c:3138:5
  101856:    c0 ff e4 fd 00 00 	r0 = 0xfde4 <xSuspendedTaskList : fde4 >			  ## tasks.c:3131:13
  10185c:    01 40             	r1 = [r0 + 0x0]			  ## tasks.c:3131:13
  10185e:    c0 ff 90 fc 00 00 	r0 = 0xfc90 <uxCurrentNumberOfTasks : fc90 >			  ## tasks.c:3131:62
  101864:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:3131:62
  101866:    02 fc ff ff       	r2 = r0 + -0x1			  ## tasks.c:3131:85
  10186a:    20 70             	r0 = 0x2			  ## tasks.c:3131:13
  10186c:    21 f2 01 00       	if (r1 == r2) goto 0x2 <eTaskConfirmSleepModeStatus+0x34 : 101872 >
  101870:    10 70             	r0 = 0x1			  ## tasks.c:3131:13
  101872:    20 00             	rts			  ## tasks.c:3131:13


xTaskGetCurrentTaskHandle:
  101874:    34 00             	[--sp] = rets			  ## tasks.c:3502:0
  101876:    bf f3 d3 f5       	call -0x145a <local_irq_disable : 100420 >			  ## tasks.c:3508:15
  10187a:    08 00             	csync			  ## tasks.c:3508:15
  10187c:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## tasks.c:3508:15
  101882:    02 40             	r2 = [r0 + 0x0]			  ## tasks.c:3508:15
  101884:    bf f3 d4 f5       	call -0x1458 <local_irq_enable : 100430 >			  ## tasks.c:3508:15
  101888:    20 08             	r0 = r2			  ## tasks.c:3510:5
  10188a:    30 00             	pc = [sp++]			  ## tasks.c:3510:5


os_init:
  10188c:    c0 ff 00 fe 00 00 	r0 = 0xfe00 <head : fe00 >			  ## os_api.c:125:0
  101892:    08 40             	[r0 + 0x0] = r0			  ## list.h:188:16
  101894:    18 40             	[r0 + 0x4] = r0			  ## list.h:189:16
  101896:    20 00             	rts			  ## os_api.c:128:5


os_get_curr_tcb_var:
  101898:    c2 ff 94 fc 00 00 	r2 = 0xfc94 <CurrentTCB : fc94 >			  ## os_api.c:132:0
  10189e:    0a 40             	[r0 + 0x0] = r2			  ## os_api.c:136:17
  1018a0:    c0 ff c0 fc 00 00 	r0 = 0xfcc0 <highCurrentTCB : fcc0 >			  ## os_api.c:137:14
  1018a6:    08 42             	[r1 + 0x0] = r0			  ## os_api.c:137:14
  1018a8:    20 00             	rts			  ## os_api.c:138:1


xPortStartScheduler:
  1018aa:    34 00             	[--sp] = rets			  ## port.c:267:0
  1018ac:    c0 ff 94 fc 00 00 	r0 = 0xfc94 <CurrentTCB : fc94 >			  ## port.c:272:9
  1018b2:    00 40             	r0 = [r0 + 0x0]			  ## port.c:272:9
  1018b4:    0a 20             	if (r0 == 0x0) goto 0x14 <xPortStartScheduler+0x20 : 1018ca >			  ## port.c:272:9
  1018b6:    c0 ff c8 fc 00 00 	r0 = 0xfcc8 <uxCriticalNesting : fcc8 >			  ## port.c:283:31
  1018bc:    c0 f4 00 09       	[r0 + 0x0] = 0x0			  ## port.c:283:31
  1018c0:    c0 ff dc fc 00 00 	r0 = 0xfcdc <vPortStartFirstTask : fcdc >			  ## port.c:287:9
  1018c6:    00 40             	r0 = [r0 + 0x0]			  ## port.c:287:9
  1018c8:    80 00             	call r0			  ## port.c:287:9
  1018ca:    00 70             	r0 = 0x0			  ## port.c:298:5
  1018cc:    30 00             	pc = [sp++]			  ## port.c:298:5


os_start:
  1018ce:    74 01             	[--sp] = {rets, r4}			  ## os_api.c:141:0
  1018d0:    fc 0b             	sp += -0x8			  ## os_api.c:141:0
  1018d2:    c0 ff c4 fc 00 00 	r0 = 0xfcc4 <xIdleTaskHandle : fcc4 >			  ## tasks.c:1776:23
  1018d8:    18 02             	[sp+4] = r0			  ## tasks.c:1776:23
  1018da:    04 70             	r4 = 0x0			  ## tasks.c:1776:23
  1018dc:    c0 ff e6 15 10 00 	r0 = 0x1015e6 <prvIdleTask : 1015e6 >			  ## tasks.c:1776:23
  1018e2:    c1 ff 93 23 10 00 	r1 = 0x102393 <$data.__1+0x1B4 : 102392 >			  ## tasks.c:1776:23
  1018e8:    02 fb 00 01       	r2 = 0x100 <ISR_SIZE : 100 >			  ## tasks.c:1776:23
  1018ec:    03 70             	r3 = 0x0			  ## tasks.c:1776:23
  1018ee:    0c 02             	[sp] = r4			  ## tasks.c:1776:23
  1018f0:    f6 14             	call -0x614 <xTaskCreate : 1012de >			  ## tasks.c:1776:23
  1018f2:    f0 ef 17 00       	if (r0 == -0x1) goto 0x2e <os_start+0x56 : 101924 >			  ## tasks.c:1795:9
  1018f6:    10 e0 22 10       	if (r0 != 0x1) goto 0x44 <os_start+0x70 : 10193e >
  1018fa:    c0 ff ac fc 00 00 	r0 = 0xfcac <xNextTaskUnblockTime : fcac >			  ## tasks.c:1811:30
  101900:    c0 f4 ff 0f       	[r0 + 0x0] = 0xffffffff			  ## tasks.c:1811:30
  101904:    c0 ff 98 fc 00 00 	r0 = 0xfc98 <xSchedulerRunning : fc98 >			  ## tasks.c:1812:27
  10190a:    c0 f4 01 09       	[r0 + 0x0] = 0x1			  ## tasks.c:1812:27
  10190e:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## tasks.c:1813:20
  101914:    01 70             	r1 = 0x0			  ## tasks.c:1813:20
  101916:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1813:20
  101918:    c0 ff a8 fc 00 00 	r0 = 0xfca8 <uxSchedulerSuspended : fca8 >			  ## tasks.c:1814:30
  10191e:    09 40             	[r0 + 0x0] = r1			  ## tasks.c:1814:30
  101920:    c4 17             	call -0x78 <xPortStartScheduler : 1018aa >			  ## tasks.c:1824:13
  101922:    0d 18             	goto 0x1a <os_start+0x70 : 10193e >			  ## tasks.c:1824:13
  101924:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  10192a:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10192c:    c0 ff 3b 23 10 00 	r0 = 0x10233b <$data.__1+0x15C : 10233a >			  ## FreeRTOSConfig.h:181:5
  101932:    c1 ff 98 23 10 00 	r1 = 0x102398 <$data.__1+0x1BA : 102398 >			  ## FreeRTOSConfig.h:181:5
  101938:    02 fb 2a 07       	r2 = 0x72a <mem_code_size+0x60 : 72a >			  ## FreeRTOSConfig.h:181:5
  10193c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10193e:    04 0a             	sp += 0x8
  101940:    54 01             	{pc, r4} = [sp++]			  ## os_api.c:143:1


os_task_create:
  101942:    77 01             	[--sp] = {rets, r7-r4}			  ## os_api.c:151:0
  101944:    fa 0b             	sp += -0xc			  ## os_api.c:151:0
  101946:    14 08             	r4 = r1			  ## os_api.c:151:0
  101948:    91 02             	r1 = [sp+36]			  ## os_api.c:151:0
  10194a:    85 a0             	r5 = sp + 8			  ## os_api.c:151:0
  10194c:    1d 02             	[sp+4] = r5			  ## os_api.c:156:11
  10194e:    e3 04             	r3 = r3.l (u)			  ## os_api.c:156:11
  101950:    0a 02             	[sp] = r2			  ## os_api.c:156:11
  101952:    32 08             	r2 = r3			  ## os_api.c:156:11
  101954:    43 08             	r3 = r4			  ## os_api.c:156:11
  101956:    c3 14             	call -0x67a <xTaskCreate : 1012de >			  ## os_api.c:156:11
  101958:    04 08             	r4 = r0			  ## os_api.c:156:11
  10195a:    14 e0 25 10       	if (r4 != 0x1) goto 0x4a <os_task_create+0x66 : 1019a8 >
  10195e:    86 02             	r6 = [sp+32]
  101960:    04 70             	r4 = 0x0
  101962:    22 2c             	if (r6 == 0x0) goto 0x44 <os_task_create+0x66 : 1019a8 >
  101964:    c0 ff d0 fc 00 00 	r0 = 0xfcd0 <mask_malloc : fcd0 >			  ## mask_export.c:27:12
  10196a:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:27:12
  10196c:    60 fc 5c 00       	r0 = r6 + 0x5c			  ## os_api.c:162:66
  101970:    81 00             	call r1			  ## mask_export.c:27:12
  101972:    21 02             	r1 = [sp+8]			  ## os_api.c:163:20
  101974:    05 08             	r5 = r0			  ## mask_export.c:27:12
  101976:    29 4a             	[r5 + 0x8] = r1			  ## os_api.c:163:18
  101978:    57 70             	r7 = 0x5			  ## os_api.c:164:9
  10197a:    40 70             	r0 = 0x4			  ## os_api.c:164:9
  10197c:    e0 fe 00 06       	r0 = r6 / r0 (s)			  ## os_api.c:164:9
  101980:    52 fc 5c 00       	r2 = r5 + 0x5c			  ## os_api.c:164:9
  101984:    c3 9a             	r3 = r5 + 0xc			  ## os_api.c:164:9
  101986:    41 70             	r1 = 0x4			  ## os_api.c:164:9
  101988:    0f 02             	[sp] = r7			  ## os_api.c:164:9
  10198a:    bf f3 c0 f6       	call -0x1280 <xQueueGenericCreateStatic : 10070e >			  ## os_api.c:164:9
  10198e:    bf f3 47 f5       	call -0x1572 <local_irq_disable : 100420 >			  ## os_api.c:46:5
  101992:    08 00             	csync			  ## os_api.c:46:5
  101994:    c0 ff 00 fe 00 00 	r0 = 0xfe00 <head : fe00 >			  ## list.h:219:33
  10199a:    01 40             	r1 = [r0 + 0x0]			  ## list.h:219:33
  10199c:    1d 42             	[r1 + 0x4] = r5			  ## list.h:137:16
  10199e:    09 4a             	[r5 + 0x0] = r1			  ## list.h:138:16
  1019a0:    18 4a             	[r5 + 0x4] = r0			  ## list.h:139:16
  1019a2:    0d 40             	[r0 + 0x0] = r5			  ## list.h:140:16
  1019a4:    bf f3 44 f5       	call -0x1578 <local_irq_enable : 100430 >			  ## os_api.c:50:5
  1019a8:    40 08             	r0 = r4			  ## os_api.c:169:1
  1019aa:    06 0a             	sp += 0xc			  ## os_api.c:169:1
  1019ac:    57 01             	{pc, r7-r4} = [sp++]			  ## os_api.c:169:1


os_current_task_rom:
  1019ae:    34 00             	[--sp] = rets			  ## os_api.c:173:0
  1019b0:    bf f3 36 f5       	call -0x1594 <local_irq_disable : 100420 >			  ## os_api.c:174:5
  1019b4:    08 00             	csync			  ## os_api.c:174:5
  1019b6:    5e 17             	call -0x144 <xTaskGetCurrentTaskHandle : 101874 >			  ## os_api.c:175:25
  1019b8:    7b 16             	call -0x30a <pcTaskGetName : 1016b0 >			  ## os_api.c:176:24
  1019ba:    02 08             	r2 = r0			  ## os_api.c:176:24
  1019bc:    bf f3 38 f5       	call -0x1590 <local_irq_enable : 100430 >			  ## os_api.c:179:5
  1019c0:    20 08             	r0 = r2			  ## os_api.c:180:5
  1019c2:    30 00             	pc = [sp++]			  ## os_api.c:180:5


os_time_dly:
  1019c4:    34 00             	[--sp] = rets			  ## os_api.c:185:0
  1019c6:    02 08             	r2 = r0			  ## os_api.c:185:0
  1019c8:    09 24             	if (r2 == 0x0) goto 0x12 <os_time_dly+0x18 : 1019dc >			  ## os_api.c:185:0
  1019ca:    bf f3 82 f7       	call -0x10fc <vTaskSuspendAll : 1008d2 >			  ## tasks.c:1234:9
  1019ce:    01 70             	r1 = 0x0			  ## tasks.c:1245:13
  1019d0:    20 08             	r0 = r2			  ## tasks.c:1245:13
  1019d2:    bf f3 06 f8       	call -0xff4 <prvAddCurrentTaskToDelayedList : 1009e2 >			  ## tasks.c:1245:13
  1019d6:    bf f3 48 f9       	call -0xd70 <xTaskResumeAll : 100c6a >			  ## tasks.c:1247:27
  1019da:    02 30             	if (r0 != 0x0) goto 0x4 <os_time_dly+0x1C : 1019e0 >
  1019dc:    bf f3 3c f6       	call -0x1388 <vPortYield : 100658 >			  ## tasks.c:1256:9
  1019e0:    30 00             	pc = [sp++]			  ## os_api.c:187:1


os_time_get:
  1019e2:    c0 ff b0 fc 00 00 	r0 = 0xfcb0 <xTickCount : fcb0 >			  ## os_api.c:191:0
  1019e8:    00 40             	r0 = [r0 + 0x0]			  ## tasks.c:2028:18
  1019ea:    20 00             	rts			  ## os_api.c:193:5


get_taskq:
  1019ec:    34 00             	[--sp] = rets			  ## os_api.c:54:0
  1019ee:    02 08             	r2 = r0			  ## os_api.c:54:0
  1019f0:    bf f3 16 f5       	call -0x15d4 <local_irq_disable : 100420 >			  ## os_api.c:57:5
  1019f4:    c0 ff 00 fe 00 00 	r0 = 0xfe00 <head : fe00 >			  ## os_api.c:57:5
  1019fa:    08 00             	csync			  ## os_api.c:57:5
  1019fc:    03 08             	r3 = r0			  ## os_api.c:57:5
  1019fe:    03 46             	r3 = [r3 + 0x0]
  101a00:    03 f2 07 00       	if (r3 == r0) goto 0xe <get_taskq+0x26 : 101a12 >			  ## os_api.c:58:5
  101a04:    21 46             	r1 = [r3 + 0x8]			  ## os_api.c:59:16
  101a06:    21 f2 fa 1f       	if (r1 != r2) goto -0xc <get_taskq+0x12 : 1019fe >			  ## os_api.c:59:16
  101a0a:    bf f3 11 f5       	call -0x15de <local_irq_enable : 100430 >			  ## os_api.c:60:13
  101a0e:    c0 96             	r0 = r3 + 0xc			  ## os_api.c:61:32
  101a10:    30 00             	pc = [sp++]			  ## os_api.c:67:1
  101a12:    bf f3 0d f5       	call -0x15e6 <local_irq_enable : 100430 >			  ## os_api.c:64:5
  101a16:    00 70             	r0 = 0x0			  ## os_api.c:64:5
  101a18:    30 00             	pc = [sp++]			  ## os_api.c:67:1


free_taskq:
  101a1a:    34 00             	[--sp] = rets			  ## os_api.c:70:0
  101a1c:    03 08             	r3 = r0			  ## os_api.c:70:0
  101a1e:    bf f3 ff f4       	call -0x1602 <local_irq_disable : 100420 >			  ## os_api.c:73:5
  101a22:    c0 ff 00 fe 00 00 	r0 = 0xfe00 <head : fe00 >			  ## os_api.c:73:5
  101a28:    08 00             	csync			  ## os_api.c:73:5
  101a2a:    02 08             	r2 = r0			  ## os_api.c:73:5
  101a2c:    02 44             	r2 = [r2 + 0x0]
  101a2e:    02 f2 12 00       	if (r2 == r0) goto 0x24 <free_taskq+0x3C : 101a56 >			  ## os_api.c:74:5
  101a32:    21 44             	r1 = [r2 + 0x8]			  ## os_api.c:75:16
  101a34:    31 f2 fa 1f       	if (r1 != r3) goto -0xc <free_taskq+0x12 : 101a2c >			  ## os_api.c:75:16
  101a38:    00 44             	r0 = [r2 + 0x0]			  ## list.h:171:36
  101a3a:    11 44             	r1 = [r2 + 0x4]			  ## list.h:171:23
  101a3c:    19 40             	[r0 + 0x4] = r1			  ## list.h:159:16
  101a3e:    08 42             	[r1 + 0x0] = r0			  ## list.h:160:16
  101a40:    0a 44             	[r2 + 0x0] = r2			  ## list.h:172:17
  101a42:    1a 44             	[r2 + 0x4] = r2			  ## list.h:173:17
  101a44:    bf f3 f4 f4       	call -0x1618 <local_irq_enable : 100430 >			  ## os_api.c:77:13
  101a48:    c0 ff cc fc 00 00 	r0 = 0xfccc <mask_free : fccc >			  ## mask_export.c:23:5
  101a4e:    01 40             	r1 = [r0 + 0x0]			  ## mask_export.c:23:5
  101a50:    20 08             	r0 = r2			  ## mask_export.c:23:5
  101a52:    88 01             	{rets} = [sp++]			  ## mask_export.c:23:5
  101a54:    91 00             	goto r1			  ## mask_export.c:23:5
  101a56:    88 01             	{rets} = [sp++]			  ## os_api.c:82:5
  101a58:    ff f3 ea f4       	goto -0x162c <local_irq_enable : 100430 >			  ## os_api.c:82:5


os_task_del_req:
  101a5c:    76 01             	[--sp] = {rets, r6-r4}			  ## os_api.c:197:0
  101a5e:    06 08             	r6 = r0			  ## os_api.c:197:0
  101a60:    16 e0 02 00       	if (r6 == 0x1) goto 0x4 <os_task_del_req+0xC : 101a68 >			  ## os_api.c:197:0
  101a64:    66 16             	call -0x334 <xTaskGetHandle : 101732 >			  ## os_api.c:206:16
  101a66:    01 18             	goto 0x2 <os_task_del_req+0xE : 101a6a >			  ## os_api.c:206:16
  101a68:    05 17             	call -0x1f6 <xTaskGetCurrentTaskHandle : 101874 >			  ## os_api.c:204:16
  101a6a:    04 08             	r4 = r0
  101a6c:    0c 28             	if (r4 == 0x0) goto 0x18 <os_task_del_req+0x2A : 101a86 >
  101a6e:    d3 16             	call -0x25a <xTaskGetApplicationTaskTag : 101816 >			  ## os_api.c:209:15
  101a70:    05 08             	r5 = r0			  ## os_api.c:209:15
  101a72:    25 e0 0a 00       	if (r5 == 0x2) goto 0x14 <os_task_del_req+0x2E : 101a8a >
  101a76:    16 e0 11 00       	if (r6 == 0x1) goto 0x22 <os_task_del_req+0x40 : 101a9c >
  101a7a:    15 e0 0f 00       	if (r5 == 0x1) goto 0x1e <os_task_del_req+0x40 : 101a9c >
  101a7e:    11 70             	r1 = 0x1			  ## os_api.c:222:13
  101a80:    40 08             	r0 = r4			  ## os_api.c:222:13
  101a82:    b5 16             	call -0x296 <vTaskSetApplicationTaskTag : 1017ee >			  ## os_api.c:222:13
  101a84:    0b 18             	goto 0x16 <os_task_del_req+0x40 : 101a9c >			  ## os_api.c:222:13
  101a86:    05 70             	r5 = 0x0
  101a88:    09 18             	goto 0x12 <os_task_del_req+0x40 : 101a9c >
  101a8a:    40 08             	r0 = r4			  ## os_api.c:211:21
  101a8c:    af 17             	call -0xa2 <get_taskq : 1019ec >			  ## os_api.c:211:21
  101a8e:    03 20             	if (r0 == 0x0) goto 0x6 <os_task_del_req+0x3A : 101a96 >
  101a90:    09 14             	call -0x7ee <vQueueDelete : 1012a4 >			  ## os_api.c:213:17
  101a92:    40 08             	r0 = r4			  ## os_api.c:214:17
  101a94:    c2 17             	call -0x7c <free_taskq : 101a1a >			  ## os_api.c:214:17
  101a96:    40 08             	r0 = r4			  ## os_api.c:217:13
  101a98:    18 15             	call -0x5d0 <vTaskDelete : 1014ca >			  ## os_api.c:217:13
  101a9a:    e5 70             	r5 = 0xe			  ## os_api.c:217:13
  101a9c:    50 08             	r0 = r5			  ## os_api.c:226:1
  101a9e:    56 01             	{pc, r6-r4} = [sp++]			  ## os_api.c:226:1


os_task_del_res:
  101aa0:    34 00             	[--sp] = rets			  ## os_api.c:229:0
  101aa2:    e8 16             	call -0x230 <xTaskGetCurrentTaskHandle : 101874 >			  ## os_api.c:234:12
  101aa4:    21 70             	r1 = 0x2			  ## os_api.c:235:5
  101aa6:    a3 16             	call -0x2ba <vTaskSetApplicationTaskTag : 1017ee >			  ## os_api.c:235:5
  101aa8:    f0 07             	r0 = -0x1			  ## os_api.c:236:5
  101aaa:    8c 17             	call -0xe8 <os_time_dly : 1019c4 >			  ## os_api.c:236:5
  101aac:    00 70             	r0 = 0x0			  ## os_api.c:238:5
  101aae:    30 00             	pc = [sp++]			  ## os_api.c:238:5


os_task_del:
  101ab0:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:242:0
  101ab2:    3f 16             	call -0x382 <xTaskGetHandle : 101732 >			  ## os_api.c:248:12
  101ab4:    04 08             	r4 = r0			  ## os_api.c:248:12
  101ab6:    0a 28             	if (r4 == 0x0) goto 0x14 <os_task_del+0x1C : 101acc >
  101ab8:    99 17             	call -0xce <get_taskq : 1019ec >			  ## os_api.c:250:17
  101aba:    05 08             	r5 = r0			  ## os_api.c:250:17
  101abc:    40 08             	r0 = r4			  ## os_api.c:251:9
  101abe:    05 15             	call -0x5f6 <vTaskDelete : 1014ca >			  ## os_api.c:251:9
  101ac0:    05 2a             	if (r5 == 0x0) goto 0xa <os_task_del+0x1C : 101acc >			  ## os_api.c:251:9
  101ac2:    50 08             	r0 = r5			  ## os_api.c:253:13
  101ac4:    bf f3 ee fb       	call -0x824 <vQueueDelete : 1012a4 >			  ## os_api.c:253:13
  101ac8:    40 08             	r0 = r4			  ## os_api.c:254:13
  101aca:    a7 17             	call -0xb2 <free_taskq : 101a1a >			  ## os_api.c:254:13
  101acc:    00 70             	r0 = 0x0			  ## os_api.c:257:5
  101ace:    55 01             	{pc, r5, r4} = [sp++]			  ## os_api.c:257:5


os_sem_post:
  101ad0:    77 01             	[--sp] = {rets, r7-r4}			  ## os_api.c:578:0
  101ad2:    28 fb 00 1b       	r1 = icfg			  ## cpu.h:74:5
  101ad6:    04 08             	r4 = r0
  101ad8:    60 ff ff 19 36 00 	if ((r1 & 0xff) == 0) goto 0x6c <os_sem_post+0x7A : 101b4a >			  ## os_api.c:581:9
  101ade:    c7 ff e8 fc 00 00 	r7 = 0xfce8 <mask_log_e : fce8 >
  101ae4:    c5 ff f1 21 10 00 	r5 = 0x1021f1 <$data.__1+0x12 : 1021f0 >
  101aea:    c6 ff a8 22 10 00 	r6 = 0x1022a8 <$data.__1+0xCA : 1022a8 >
  101af0:    06 38             	if (r4 != 0x0) goto 0xc <os_sem_post+0x2E : 101afe >
  101af2:    03 4e             	r3 = [r7 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101af4:    02 fb e4 03       	r2 = 0x3e4 <ROM_RAM_SIZE+0xC4 : 3e4 >			  ## FreeRTOSConfig.h:181:5
  101af8:    50 08             	r0 = r5			  ## FreeRTOSConfig.h:181:5
  101afa:    61 08             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  101afc:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101afe:    00 49             	r0 = [r4 + 0x40]			  ## queue.c:1000:5
  101b00:    06 20             	if (r0 == 0x0) goto 0xc <os_sem_post+0x3E : 101b0e >			  ## queue.c:1000:5
  101b02:    03 4e             	r3 = [r7 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101b04:    02 fb e8 03       	r2 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## FreeRTOSConfig.h:181:5
  101b08:    50 08             	r0 = r5			  ## FreeRTOSConfig.h:181:5
  101b0a:    61 08             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  101b0c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101b0e:    00 48             	r0 = [r4 + 0x0]			  ## queue.c:1005:5
  101b10:    08 30             	if (r0 != 0x0) goto 0x10 <os_sem_post+0x52 : 101b22 >			  ## queue.c:1005:5
  101b12:    10 48             	r0 = [r4 + 0x4]			  ## queue.c:1005:5
  101b14:    06 20             	if (r0 == 0x0) goto 0xc <os_sem_post+0x52 : 101b22 >			  ## queue.c:1005:5
  101b16:    03 4e             	r3 = [r7 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101b18:    02 fb ed 03       	r2 = 0x3ed <ROM_RAM_SIZE+0xCC : 3ec >			  ## FreeRTOSConfig.h:181:5
  101b1c:    50 08             	r0 = r5			  ## FreeRTOSConfig.h:181:5
  101b1e:    61 08             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  101b20:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101b22:    bf f3 7d f4       	call -0x1706 <local_irq_disable : 100420 >			  ## queue.c:1023:5
  101b26:    08 00             	csync			  ## queue.c:1023:5
  101b28:    e0 48             	r0 = [r4 + 0x38]			  ## queue.c:1027:56
  101b2a:    f1 48             	r1 = [r4 + 0x3c]			  ## queue.c:1032:42
  101b2c:    05 70             	r5 = 0x0			  ## queue.c:1032:42
  101b2e:    10 f2 1a 20       	if (r0 >= r1) goto 0x34 <os_sem_post+0x96 : 101b66 >			  ## queue.c:1032:42
  101b32:    01 f9 45 40       	r1 = b[r4 + 0x45] (u)			  ## queue.c:1033:45
  101b36:    10 80             	r0 += 0x1			  ## queue.c:1043:60
  101b38:    e8 48             	[r4 + 0x38] = r0			  ## queue.c:1043:40
  101b3a:    00 ff ff 10 0c 00 	if (r1 == 0xff) goto 0x18 <os_sem_post+0x88 : 101b58 >			  ## queue.c:1043:40
  101b40:    10 92             	r0 = r1 + 0x1			  ## queue.c:1107:53
  101b42:    10 f9 45 40       	b[r4 + 0x45] = r0			  ## queue.c:1107:34
  101b46:    15 70             	r5 = 0x1			  ## queue.c:1107:34
  101b48:    0e 18             	goto 0x1c <os_sem_post+0x96 : 101b66 >			  ## queue.c:1107:34
  101b4a:    01 70             	r1 = 0x0			  ## os_api.c:585:15
  101b4c:    02 70             	r2 = 0x0			  ## os_api.c:585:15
  101b4e:    03 70             	r3 = 0x0			  ## os_api.c:585:15
  101b50:    bf f3 f6 f8       	call -0xe14 <xQueueGenericSend : 100d40 >			  ## os_api.c:585:15
  101b54:    05 08             	r5 = r0			  ## os_api.c:585:15
  101b56:    0b 18             	goto 0x16 <os_sem_post+0x9E : 101b6e >
  101b58:    90 48             	r0 = [r4 + 0x24]			  ## queue.c:1085:25
  101b5a:    15 70             	r5 = 0x1			  ## queue.c:1085:25
  101b5c:    04 20             	if (r0 == 0x0) goto 0x8 <os_sem_post+0x96 : 101b66 >			  ## queue.c:1085:25
  101b5e:    40 fc 24 00       	r0 = r4 + 0x24			  ## queue.c:1085:25
  101b62:    bf f3 ec f4       	call -0x1628 <xTaskRemoveFromEventList : 10053e >			  ## queue.c:1087:29
  101b66:    bf f3 63 f4       	call -0x173a <local_irq_enable : 100430 >			  ## queue.c:1118:5
  101b6a:    bf f3 75 f5       	call -0x1516 <vPortYield : 100658 >			  ## os_api.c:583:9
  101b6e:    00 70             	r0 = 0x0			  ## os_api.c:588:12
  101b70:    15 e0 01 00       	if (r5 == 0x1) goto 0x2 <os_sem_post+0xA6 : 101b76 >			  ## os_api.c:588:12
  101b74:    20 07             	r0 = -0xe			  ## os_api.c:588:12
  101b76:    57 01             	{pc, r7-r4} = [sp++]			  ## os_api.c:588:5


__os_taskq_pend:
  101b78:    7a 01             	[--sp] = {rets, r10-r4}			  ## os_api.c:266:0
  101b7a:    fe 0b             	sp += -0x4			  ## os_api.c:266:0
  101b7c:    2a 08             	r10 = r2			  ## os_api.c:266:0
  101b7e:    05 08             	r5 = r0			  ## os_api.c:266:0
  101b80:    79 16             	call -0x30e <xTaskGetCurrentTaskHandle : 101874 >			  ## os_api.c:270:25
  101b82:    07 08             	r7 = r0			  ## os_api.c:270:25
  101b84:    02 18             	goto 0x4 <__os_taskq_pend+0x12 : 101b8a >
  101b86:    20 70             	r0 = 0x2			  ## os_api.c:276:9
  101b88:    1d 17             	call -0x1c6 <os_time_dly : 1019c4 >			  ## os_api.c:276:9
  101b8a:    70 08             	r0 = r7			  ## os_api.c:273:17
  101b8c:    2f 17             	call -0x1a2 <get_taskq : 1019ec >			  ## os_api.c:273:17
  101b8e:    06 08             	r6 = r0			  ## os_api.c:273:17
  101b90:    fa 2d             	if (r6 == 0x0) goto -0xc <__os_taskq_pend+0xE : 101b86 >			  ## os_api.c:275:9
  101b92:    49 9a             	r9 = r5 + 0x4			  ## os_api.c:287:15
  101b94:    08 9b             	r8 = r5 + 0x10			  ## os_api.c:287:15
  101b96:    5f 18             	goto 0xbe <__os_taskq_pend+0xDE : 101c56 >			  ## os_api.c:287:15
  101b98:    bf f3 42 f4       	call -0x177c <local_irq_disable : 100420 >			  ## os_api.c:292:9
  101b9c:    08 00             	csync			  ## os_api.c:292:9
  101b9e:    60 08             	r0 = r6			  ## os_api.c:294:13
  101ba0:    bf f3 3c fb       	call -0x988 <uxQueueMessagesWaiting : 10121c >			  ## os_api.c:294:13
  101ba4:    38 20             	if (r0 == 0x0) goto 0x70 <__os_taskq_pend+0x9E : 101c16 >			  ## os_api.c:294:13
  101ba6:    01 a0             	r1 = sp + 0
  101ba8:    02 70             	r2 = 0x0			  ## os_api.c:299:15
  101baa:    04 70             	r4 = 0x0			  ## os_api.c:299:15
  101bac:    60 08             	r0 = r6			  ## os_api.c:299:15
  101bae:    bf f3 f7 fa       	call -0xa12 <xQueueReceiveFromISR : 1011a0 >			  ## os_api.c:299:15
  101bb2:    00 02             	r0 = [sp]			  ## os_api.c:303:24
  101bb4:    01 d2             	r1 = r0 >> 0x8			  ## os_api.c:303:24
  101bb6:    09 4a             	[r5 + 0x0] = r1			  ## os_api.c:303:17
  101bb8:    97 08             	r7 = r9			  ## os_api.c:305:34
  101bba:    09 18             	goto 0x12 <__os_taskq_pend+0x56 : 101bce >
  101bbc:    02 70             	r2 = 0x0			  ## os_api.c:306:19
  101bbe:    60 08             	r0 = r6			  ## os_api.c:306:19
  101bc0:    71 08             	r1 = r7			  ## os_api.c:306:19
  101bc2:    bf f3 ed fa       	call -0xa26 <xQueueReceiveFromISR : 1011a0 >			  ## os_api.c:306:19
  101bc6:    c0 f5 00 00       	r0 = b[sp] (u)			  ## os_api.c:306:19
  101bca:    47 80             	r7 += 0x4			  ## os_api.c:305:9
  101bcc:    14 80             	r4 += 0x1			  ## os_api.c:305:41
  101bce:    00 04             	r0 = r0.b0 (u)			  ## os_api.c:305:34
  101bd0:    04 f2 f4 bf       	ifs (r4 < r0) goto -0x18 <__os_taskq_pend+0x44 : 101bbc >			  ## os_api.c:305:9
  101bd4:    bf f3 2c f4       	call -0x17a8 <local_irq_enable : 100430 >			  ## os_api.c:310:9
  101bd8:    00 4a             	r0 = [r5 + 0x0]			  ## os_api.c:312:14
  101bda:    20 fd f0 0b       	r0 = r0 & 0xf00000			  ## os_api.c:312:22
  101bde:    21 ff 30 0b 42 00 	if (r0 != 0x300000) goto 0x84 <__os_taskq_pend+0xF0 : 101c68 >			  ## os_api.c:312:22
  101be4:    20 4a             	r0 = [r5 + 0x8]			  ## os_api.c:88:19
  101be6:    04 04             	r4 = r0.b0 (u)			  ## os_api.c:88:27
  101be8:    17 98             	r7 = r4 + 0x1			  ## os_api.c:92:18
  101bea:    41 08             	r1 = r4			  ## os_api.c:91:9
  101bec:    08 f3 01 00       	if ((r0 & 0x100) == 0) goto 0x2 <__os_taskq_pend+0x7A : 101bf2 >			  ## os_api.c:91:9
  101bf0:    71 08             	r1 = r7			  ## os_api.c:91:9
  101bf2:    c2 f5 00 00       	r2 = b[sp] (u)			  ## os_api.c:315:32
  101bf6:    81 fd 48 30       	r3 = uextra(r0, p:0x9, l:0x1)			  ## os_api.c:94:9
  101bfa:    93 b0             	r3 |= 0x2			  ## os_api.c:94:9
  101bfc:    31 09             	r1 += r3			  ## os_api.c:100:26
  101bfe:    12 80             	r2 += 0x1			  ## os_api.c:315:37
  101c00:    21 f2 29 20       	if (r1 >= r2) goto 0x52 <__os_taskq_pend+0xDE : 101c56 >			  ## os_api.c:315:37
  101c04:    01 04             	r1 = r0.b0 (u)			  ## os_api.c:101:13
  101c06:    21 e0 09 00       	if (r1 == 0x2) goto 0x12 <__os_taskq_pend+0xA4 : 101c1c >			  ## os_api.c:101:13
  101c0a:    11 e0 0e 10       	if (r1 != 0x1) goto 0x1c <__os_taskq_pend+0xB2 : 101c2a >
  101c0e:    30 4a             	r0 = [r5 + 0xc]			  ## os_api.c:102:43
  101c10:    11 4a             	r1 = [r5 + 0x4]			  ## os_api.c:102:34
  101c12:    81 00             	call r1			  ## os_api.c:102:19
  101c14:    10 18             	goto 0x20 <__os_taskq_pend+0xBE : 101c36 >
  101c16:    bf f3 0b f4       	call -0x17ea <local_irq_enable : 100430 >			  ## os_api.c:295:13
  101c1a:    1d 18             	goto 0x3a <__os_taskq_pend+0xDE : 101c56 >			  ## os_api.c:295:13
  101c1c:    2a f3 05 00       	if ((r0 & 0x400) != 0) goto 0xa <__os_taskq_pend+0xB2 : 101c2a >
  101c20:    41 4a             	r1 = [r5 + 0x10]			  ## os_api.c:104:57
  101c22:    30 4a             	r0 = [r5 + 0xc]			  ## os_api.c:104:48
  101c24:    12 4a             	r2 = [r5 + 0x4]			  ## os_api.c:104:39
  101c26:    82 00             	call r2			  ## os_api.c:104:19
  101c28:    06 18             	goto 0xc <__os_taskq_pend+0xBE : 101c36 >
  101c2a:    30 4a             	r0 = [r5 + 0xc]			  ## os_api.c:106:55
  101c2c:    13 4a             	r3 = [r5 + 0x4]			  ## os_api.c:106:46
  101c2e:    41 fc ff ff       	r1 = r4 + -0x1			  ## os_api.c:106:72
  101c32:    82 08             	r2 = r8			  ## os_api.c:106:19
  101c34:    83 00             	call r3			  ## os_api.c:106:19
  101c36:    21 4a             	r1 = [r5 + 0x8]			  ## os_api.c:108:13
  101c38:    28 f3 02 10       	if ((r1 & 0x100) != 0) goto 0x4 <__os_taskq_pend+0xC8 : 101c40 >			  ## os_api.c:108:13
  101c3c:    47 08             	r7 = r4
  101c3e:    05 18             	goto 0xa <__os_taskq_pend+0xD2 : 101c4a >
  101c40:    a1 c0             	r1 = r4 << 0x2			  ## os_api.c:110:28
  101c42:    51 09             	r1 += r5			  ## os_api.c:110:21
  101c44:    31 42             	r1 = [r1 + 0xc]			  ## os_api.c:110:21
  101c46:    08 42             	[r1 + 0x0] = r0			  ## os_api.c:110:39
  101c48:    21 4a             	r1 = [r5 + 0x8]			  ## os_api.c:110:39
  101c4a:    09 f3 04 10       	if ((r1 & 0x200) == 0) goto 0x8 <__os_taskq_pend+0xDE : 101c56 >
  101c4e:    b8 c0             	r0 = r7 << 0x2			  ## os_api.c:114:42
  101c50:    50 09             	r0 += r5			  ## os_api.c:114:35
  101c52:    30 40             	r0 = [r0 + 0xc]			  ## os_api.c:114:35
  101c54:    3d 17             	call -0x186 <os_sem_post : 101ad0 >			  ## os_api.c:114:13
  101c56:    01 a0             	r1 = sp + 0
  101c58:    13 70             	r3 = 0x1			  ## os_api.c:287:15
  101c5a:    60 08             	r0 = r6			  ## os_api.c:287:15
  101c5c:    a2 08             	r2 = r10			  ## os_api.c:287:15
  101c5e:    bf f3 2f f9       	call -0xda2 <xQueueGenericReceive : 100ec0 >			  ## os_api.c:287:15
  101c62:    9a 31             	if (r0 != 0x0) goto -0xcc <__os_taskq_pend+0x20 : 101b98 >
  101c64:    60 71             	r0 = 0x16
  101c66:    01 18             	goto 0x2 <__os_taskq_pend+0xF2 : 101c6a >
  101c68:    d0 70             	r0 = 0xd
  101c6a:    02 0a             	sp += 0x4
  101c6c:    5a 01             	{pc, r10-r4} = [sp++]			  ## os_api.c:319:1


os_taskq_pend:
  101c6e:    f2 07             	r2 = -0x1			  ## os_api.c:322:0
  101c70:    10 08             	r0 = r1			  ## os_api.c:323:12
  101c72:    82 1f             	goto -0xfc <__os_taskq_pend : 101b78 >			  ## os_api.c:323:12


os_task_pend:
  101c74:    f2 07             	r2 = -0x1			  ## os_api.c:327:0
  101c76:    10 08             	r0 = r1			  ## os_api.c:328:12
  101c78:    7f 1f             	goto -0x102 <__os_taskq_pend : 101b78 >			  ## os_api.c:328:12


__os_taskq_post:
  101c7a:    77 01             	[--sp] = {rets, r7-r4}			  ## os_api.c:332:0
  101c7c:    fc 0b             	sp += -0x8			  ## os_api.c:332:0
  101c7e:    34 08             	r4 = r3			  ## os_api.c:332:0
  101c80:    25 08             	r5 = r2			  ## os_api.c:332:0
  101c82:    17 08             	r7 = r1			  ## os_api.c:332:0
  101c84:    56 15             	call -0x554 <xTaskGetHandle : 101732 >			  ## os_api.c:339:12
  101c86:    02 08             	r2 = r0			  ## os_api.c:339:12
  101c88:    15 24             	if (r2 == 0x0) goto 0x2a <__os_taskq_post+0x3A : 101cb4 >
  101c8a:    bf f3 c9 f3       	call -0x186e <local_irq_disable : 100420 >			  ## os_api.c:345:5
  101c8e:    08 00             	csync			  ## os_api.c:345:5
  101c90:    20 08             	r0 = r2			  ## os_api.c:346:13
  101c92:    ac 16             	call -0x2a8 <get_taskq : 1019ec >			  ## os_api.c:346:13
  101c94:    06 08             	r6 = r0			  ## os_api.c:346:13
  101c96:    10 2c             	if (r6 == 0x0) goto 0x20 <__os_taskq_post+0x3E : 101cb8 >
  101c98:    40 05             	r0 = r5.b0 (u)			  ## os_api.c:351:15
  101c9a:    d8 fd 40 07       	r0 <= insert(r7, p:0x8, l:0x18)			  ## os_api.c:352:15
  101c9e:    18 02             	[sp+4] = r0			  ## os_api.c:352:15
  101ca0:    60 08             	r0 = r6			  ## os_api.c:355:9
  101ca2:    bf f3 d3 fa       	call -0xa5a <uxQueueSpacesAvailable : 10124c >			  ## os_api.c:355:9
  101ca6:    11 9a             	r1 = r5 + 0x1			  ## os_api.c:355:46
  101ca8:    10 f2 0a 20       	if (r0 >= r1) goto 0x14 <__os_taskq_post+0x46 : 101cc0 >			  ## os_api.c:355:9
  101cac:    bf f3 c0 f3       	call -0x1880 <local_irq_enable : 100430 >			  ## os_api.c:356:9
  101cb0:    50 71             	r0 = 0x15			  ## os_api.c:356:9
  101cb2:    1d 18             	goto 0x3a <__os_taskq_post+0x74 : 101cee >			  ## os_api.c:356:9
  101cb4:    e0 70             	r0 = 0xe
  101cb6:    1b 18             	goto 0x36 <__os_taskq_post+0x74 : 101cee >
  101cb8:    bf f3 ba f3       	call -0x188c <local_irq_enable : 100430 >			  ## os_api.c:348:9
  101cbc:    40 70             	r0 = 0x4			  ## os_api.c:348:9
  101cbe:    17 18             	goto 0x2e <__os_taskq_post+0x74 : 101cee >			  ## os_api.c:348:9
  101cc0:    41 a0             	r1 = sp + 4
  101cc2:    02 a0             	r2 = sp + 0
  101cc4:    03 70             	r3 = 0x0			  ## os_api.c:361:11
  101cc6:    07 70             	r7 = 0x0			  ## os_api.c:361:11
  101cc8:    60 08             	r0 = r6			  ## os_api.c:361:11
  101cca:    bf f3 17 fa       	call -0xbd2 <xQueueGenericSendFromISR : 1010fc >			  ## os_api.c:361:11
  101cce:    08 18             	goto 0x10 <__os_taskq_post+0x66 : 101ce0 >
  101cd0:    02 a0             	r2 = sp + 0
  101cd2:    03 70             	r3 = 0x0			  ## os_api.c:363:15
  101cd4:    60 08             	r0 = r6			  ## os_api.c:363:15
  101cd6:    41 08             	r1 = r4			  ## os_api.c:363:15
  101cd8:    bf f3 10 fa       	call -0xbe0 <xQueueGenericSendFromISR : 1010fc >			  ## os_api.c:363:15
  101cdc:    44 80             	r4 += 0x4			  ## os_api.c:362:5
  101cde:    17 80             	r7 += 0x1			  ## os_api.c:362:32
  101ce0:    57 f2 f6 bf       	ifs (r7 < r5) goto -0x14 <__os_taskq_post+0x56 : 101cd0 >			  ## os_api.c:362:5
  101ce4:    bf f3 a4 f3       	call -0x18b8 <local_irq_enable : 100430 >			  ## os_api.c:366:5
  101ce8:    bf f3 b6 f4       	call -0x1694 <vPortYield : 100658 >			  ## os_api.c:368:5
  101cec:    00 70             	r0 = 0x0			  ## os_api.c:368:5
  101cee:    04 0a             	sp += 0x8
  101cf0:    57 01             	{pc, r7-r4} = [sp++]			  ## os_api.c:371:1


os_taskq_post:
  101cf2:    62 01             	[--sp] = {r3, r2}			  ## os_api.c:374:0
  101cf4:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:374:0
  101cf6:    ee 0b             	sp += -0x24			  ## os_api.c:374:0
  101cf8:    14 08             	r4 = r1			  ## os_api.c:374:0
  101cfa:    01 a3             	r1 = sp + 48			  ## os_api.c:374:0
  101cfc:    09 02             	[sp] = r1			  ## os_api.c:378:5
  101cfe:    01 70             	r1 = 0x0			  ## os_api.c:378:5
  101d00:    42 a0             	r2 = sp + 4			  ## os_api.c:378:5
  101d02:    07 18             	goto 0xe <os_taskq_post+0x20 : 101d12 >
  101d04:    03 02             	r3 = [sp]			  ## os_api.c:380:19
  101d06:    45 96             	r5 = r3 + 0x4			  ## os_api.c:380:19
  101d08:    0d 02             	[sp] = r5			  ## os_api.c:380:19
  101d0a:    03 46             	r3 = [r3 + 0x0]			  ## os_api.c:380:19
  101d0c:    53 f6 04 20       	[r2 ++= 0x4] = r3			  ## os_api.c:380:17
  101d10:    11 80             	r1 += 0x1			  ## os_api.c:379:32
  101d12:    41 f2 f7 bf       	ifs (r1 < r4) goto -0x12 <os_taskq_post+0x12 : 101d04 >			  ## os_api.c:379:5
  101d16:    43 a0             	r3 = sp + 4
  101d18:    20 fb 40 1b       	r1 = 0x400000			  ## os_api.c:383:12
  101d1c:    42 08             	r2 = r4			  ## os_api.c:383:12
  101d1e:    ad 17             	call -0xa6 <__os_taskq_post : 101c7a >			  ## os_api.c:383:12
  101d20:    12 0a             	sp += 0x24
  101d22:    15 01             	{rets, r5, r4} = [sp++]			  ## os_api.c:383:5
  101d24:    04 0a             	sp += 0x8			  ## os_api.c:383:5
  101d26:    20 00             	rts			  ## os_api.c:383:5


os_taskq_post_type:
  101d28:    a8 1f             	goto -0xb0 <__os_taskq_post : 101c7a >			  ## os_api.c:387:0


os_taskq_flush:
  101d2a:    7a 01             	[--sp] = {rets, r10-r4}			  ## os_api.c:392:0
  101d2c:    e6 0b             	sp += -0x34			  ## os_api.c:392:0
  101d2e:    bf f3 77 f3       	call -0x1912 <local_irq_disable : 100420 >			  ## os_api.c:399:5
  101d32:    08 00             	csync			  ## os_api.c:399:5
  101d34:    9f 15             	call -0x4c2 <xTaskGetCurrentTaskHandle : 101874 >			  ## os_api.c:400:12
  101d36:    4e 20             	if (r0 == 0x0) goto 0x9c <os_taskq_flush+0xAA : 101dd4 >
  101d38:    59 16             	call -0x34e <get_taskq : 1019ec >			  ## os_api.c:405:13
  101d3a:    04 08             	r4 = r0			  ## os_api.c:405:13
  101d3c:    47 28             	if (r4 == 0x0) goto 0x8e <os_taskq_flush+0xA2 : 101dcc >
  101d3e:    bf f3 6d fa       	call -0xb26 <uxQueueMessagesWaiting : 10121c >			  ## os_api.c:412:20
  101d42:    05 08             	r5 = r0			  ## os_api.c:412:20
  101d44:    28 07             	r8 = -0xe
  101d46:    c9 ff e8 fc 00 00 	r9 = 0xfce8 <mask_log_e : fce8 >
  101d4c:    ca ff 54 24 10 00 	r10 = 0x102454 <$data.__1+0x276 : 102454 >
  101d52:    3b 18             	goto 0x76 <os_taskq_flush+0xA0 : 101dca >
  101d54:    01 a0             	r1 = sp + 0
  101d56:    02 70             	r2 = 0x0			  ## os_api.c:415:9
  101d58:    03 70             	r3 = 0x0			  ## os_api.c:415:9
  101d5a:    06 70             	r6 = 0x0			  ## os_api.c:415:9
  101d5c:    40 08             	r0 = r4			  ## os_api.c:415:9
  101d5e:    bf f3 af f8       	call -0xea2 <xQueueGenericReceive : 100ec0 >			  ## os_api.c:415:9
  101d62:    47 a0             	r7 = sp + 4
  101d64:    08 18             	goto 0x10 <os_taskq_flush+0x4C : 101d76 >
  101d66:    02 70             	r2 = 0x0			  ## os_api.c:417:13
  101d68:    03 70             	r3 = 0x0			  ## os_api.c:417:13
  101d6a:    40 08             	r0 = r4			  ## os_api.c:417:13
  101d6c:    71 08             	r1 = r7			  ## os_api.c:417:13
  101d6e:    bf f3 a7 f8       	call -0xeb2 <xQueueGenericReceive : 100ec0 >			  ## os_api.c:417:13
  101d72:    47 80             	r7 += 0x4			  ## os_api.c:416:9
  101d74:    16 80             	r6 += 0x1			  ## os_api.c:416:65
  101d76:    00 02             	r0 = [sp]			  ## os_api.c:416:34
  101d78:    02 04             	r2 = r0.b0 (u)			  ## os_api.c:416:34
  101d7a:    b6 e0 02 80       	if (r6 > 0xb) goto 0x4 <os_taskq_flush+0x58 : 101d82 >			  ## os_api.c:416:34
  101d7e:    26 f2 f2 bf       	ifs (r6 < r2) goto -0x1c <os_taskq_flush+0x3C : 101d66 >
  101d82:    25 f2 06 c0       	ifs (r5 > r2) goto 0xc <os_taskq_flush+0x68 : 101d92 >
  101d86:    03 f6 00 90       	r3 = [r9 + 0x0]			  ## os_api.c:419:9
  101d8a:    a0 08             	r0 = r10			  ## os_api.c:419:9
  101d8c:    51 08             	r1 = r5			  ## os_api.c:419:9
  101d8e:    83 00             	call r3			  ## os_api.c:419:9
  101d90:    00 02             	r0 = [sp]			  ## os_api.c:419:9
  101d92:    01 04             	r1 = r0.b0 (u)			  ## os_api.c:420:26
  101d94:    52 fc ff ff       	r2 = r5 + -0x1			  ## os_api.c:420:31
  101d98:    20 fd f0 0c       	r0 = r0 & 0xf0000000			  ## os_api.c:422:24
  101d9c:    65 b4             	r5 = r2 - r1			  ## os_api.c:420:18
  101d9e:    21 ff 30 0c 13 00 	if (r0 != 0x30000000) goto 0x26 <os_taskq_flush+0xA0 : 101dca >
  101da4:    21 02             	r1 = [sp+8]			  ## os_api.c:423:27
  101da6:    40 04             	r0 = r1.b0 (u)			  ## os_api.c:423:35
  101da8:    08 f3 08 10       	if ((r1 & 0x100) == 0) goto 0x10 <os_taskq_flush+0x92 : 101dbc >
  101dac:    81 c0             	r1 = r0 << 0x2			  ## os_api.c:427:32
  101dae:    42 a0             	r2 = sp + 4			  ## os_api.c:427:32
  101db0:    21 09             	r1 += r2			  ## os_api.c:427:32
  101db2:    21 42             	r1 = [r1 + 0x8]			  ## os_api.c:427:25
  101db4:    18 f6 00 10       	[r1 + 0x0] = r8			  ## os_api.c:427:43
  101db8:    21 02             	r1 = [sp+8]			  ## os_api.c:427:43
  101dba:    10 80             	r0 += 0x1			  ## os_api.c:426:24
  101dbc:    09 f3 05 10       	if ((r1 & 0x200) == 0) goto 0xa <os_taskq_flush+0xA0 : 101dca >
  101dc0:    80 c0             	r0 = r0 << 0x2			  ## os_api.c:431:46
  101dc2:    41 a0             	r1 = sp + 4
  101dc4:    10 09             	r0 += r1
  101dc6:    20 40             	r0 = [r0 + 0x8]			  ## os_api.c:431:39
  101dc8:    83 16             	call -0x2fa <os_sem_post : 101ad0 >			  ## os_api.c:431:17
  101dca:    c4 3b             	if (r5 != 0x0) goto -0x78 <os_taskq_flush+0x2A : 101d54 >
  101dcc:    bf f3 30 f3       	call -0x19a0 <local_irq_enable : 100430 >
  101dd0:    00 70             	r0 = 0x0
  101dd2:    03 18             	goto 0x6 <os_taskq_flush+0xB0 : 101dda >
  101dd4:    bf f3 2c f3       	call -0x19a8 <local_irq_enable : 100430 >			  ## os_api.c:402:9
  101dd8:    a0 06             	r0 = -0x16
  101dda:    1a 0a             	sp += 0x34
  101ddc:    5a 01             	{pc, r10-r4} = [sp++]			  ## os_api.c:439:1


task_queue_post_event:
  101dde:    13 08             	r3 = r1			  ## os_api.c:446:0
  101de0:    20 fb 20 1b       	r1 = 0x200000			  ## os_api.c:447:12
  101de4:    4a 1f             	goto -0x16c <__os_taskq_post : 101c7a >			  ## os_api.c:447:12


os_taskq_post_msg:
  101de6:    62 01             	[--sp] = {r3, r2}			  ## os_api.c:451:0
  101de8:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:451:0
  101dea:    ee 0b             	sp += -0x24			  ## os_api.c:451:0
  101dec:    14 08             	r4 = r1			  ## os_api.c:451:0
  101dee:    01 a3             	r1 = sp + 48			  ## os_api.c:451:0
  101df0:    09 02             	[sp] = r1			  ## os_api.c:455:5
  101df2:    01 70             	r1 = 0x0			  ## os_api.c:455:5
  101df4:    42 a0             	r2 = sp + 4			  ## os_api.c:455:5
  101df6:    07 18             	goto 0xe <os_taskq_post_msg+0x20 : 101e06 >
  101df8:    03 02             	r3 = [sp]			  ## os_api.c:457:19
  101dfa:    45 96             	r5 = r3 + 0x4			  ## os_api.c:457:19
  101dfc:    0d 02             	[sp] = r5			  ## os_api.c:457:19
  101dfe:    03 46             	r3 = [r3 + 0x0]			  ## os_api.c:457:19
  101e00:    53 f6 04 20       	[r2 ++= 0x4] = r3			  ## os_api.c:457:17
  101e04:    11 80             	r1 += 0x1			  ## os_api.c:456:32
  101e06:    41 f2 f7 bf       	ifs (r1 < r4) goto -0x12 <os_taskq_post_msg+0x12 : 101df8 >			  ## os_api.c:456:5
  101e0a:    43 a0             	r3 = sp + 4
  101e0c:    20 fb 10 1b       	r1 = 0x100000			  ## os_api.c:461:12
  101e10:    42 08             	r2 = r4			  ## os_api.c:461:12
  101e12:    33 17             	call -0x19a <__os_taskq_post : 101c7a >			  ## os_api.c:461:12
  101e14:    12 0a             	sp += 0x24
  101e16:    15 01             	{rets, r5, r4} = [sp++]			  ## os_api.c:461:5
  101e18:    04 0a             	sp += 0x8			  ## os_api.c:461:5
  101e1a:    20 00             	rts			  ## os_api.c:461:5


os_taskq_post_event:
  101e1c:    62 01             	[--sp] = {r3, r2}			  ## os_api.c:465:0
  101e1e:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:465:0
  101e20:    ee 0b             	sp += -0x24			  ## os_api.c:465:0
  101e22:    14 08             	r4 = r1			  ## os_api.c:465:0
  101e24:    01 a3             	r1 = sp + 48			  ## os_api.c:465:0
  101e26:    09 02             	[sp] = r1			  ## os_api.c:469:5
  101e28:    01 70             	r1 = 0x0			  ## os_api.c:469:5
  101e2a:    42 a0             	r2 = sp + 4			  ## os_api.c:469:5
  101e2c:    07 18             	goto 0xe <os_taskq_post_event+0x20 : 101e3c >
  101e2e:    03 02             	r3 = [sp]			  ## os_api.c:471:19
  101e30:    45 96             	r5 = r3 + 0x4			  ## os_api.c:471:19
  101e32:    0d 02             	[sp] = r5			  ## os_api.c:471:19
  101e34:    03 46             	r3 = [r3 + 0x0]			  ## os_api.c:471:19
  101e36:    53 f6 04 20       	[r2 ++= 0x4] = r3			  ## os_api.c:471:17
  101e3a:    11 80             	r1 += 0x1			  ## os_api.c:470:32
  101e3c:    41 f2 f7 bf       	ifs (r1 < r4) goto -0x12 <os_taskq_post_event+0x12 : 101e2e >			  ## os_api.c:470:5
  101e40:    43 a0             	r3 = sp + 4
  101e42:    20 fb 20 1b       	r1 = 0x200000			  ## os_api.c:475:12
  101e46:    42 08             	r2 = r4			  ## os_api.c:475:12
  101e48:    18 17             	call -0x1d0 <__os_taskq_post : 101c7a >			  ## os_api.c:475:12
  101e4a:    12 0a             	sp += 0x24
  101e4c:    15 01             	{rets, r5, r4} = [sp++]			  ## os_api.c:475:5
  101e4e:    04 0a             	sp += 0x8			  ## os_api.c:475:5
  101e50:    20 00             	rts			  ## os_api.c:475:5


os_taskq_accept:
  101e52:    02 70             	r2 = 0x0			  ## os_api.c:479:0
  101e54:    10 08             	r0 = r1			  ## os_api.c:480:12
  101e56:    90 1e             	goto -0x2e0 <__os_taskq_pend : 101b78 >			  ## os_api.c:480:12


os_taskq_del:
  101e58:    7b 01             	[--sp] = {rets, r11-r4}			  ## os_api.c:485:0
  101e5a:    e6 0b             	sp += -0x34			  ## os_api.c:485:0
  101e5c:    1b 08             	r11 = r1			  ## os_api.c:485:0
  101e5e:    69 14             	call -0x72e <xTaskGetHandle : 101732 >			  ## os_api.c:494:12
  101e60:    02 08             	r2 = r0			  ## os_api.c:494:12
  101e62:    bf f3 dd f2       	call -0x1a46 <local_irq_disable : 100420 >			  ## os_api.c:496:5
  101e66:    08 00             	csync			  ## os_api.c:496:5
  101e68:    20 08             	r0 = r2			  ## os_api.c:497:13
  101e6a:    c0 15             	call -0x480 <get_taskq : 1019ec >			  ## os_api.c:497:13
  101e6c:    05 08             	r5 = r0			  ## os_api.c:497:13
  101e6e:    56 2a             	if (r5 == 0x0) goto 0xac <os_taskq_del+0xC4 : 101f1c >
  101e70:    bf f3 d4 f9       	call -0xc58 <uxQueueMessagesWaiting : 10121c >			  ## os_api.c:504:20
  101e74:    07 08             	r7 = r0			  ## os_api.c:504:20
  101e76:    29 fd f0 bb       	r9 = r11 & 0xf00000
  101e7a:    78 71             	r8 = 0x17
  101e7c:    2a 07             	r10 = -0xe
  101e7e:    4a 18             	goto 0x94 <os_taskq_del+0xBC : 101f14 >
  101e80:    01 a0             	r1 = sp + 0
  101e82:    02 70             	r2 = 0x0			  ## os_api.c:509:9
  101e84:    03 70             	r3 = 0x0			  ## os_api.c:509:9
  101e86:    04 70             	r4 = 0x0			  ## os_api.c:509:9
  101e88:    50 08             	r0 = r5			  ## os_api.c:509:9
  101e8a:    bf f3 19 f8       	call -0xfce <xQueueGenericReceive : 100ec0 >			  ## os_api.c:509:9
  101e8e:    46 a0             	r6 = sp + 4
  101e90:    08 18             	goto 0x10 <os_taskq_del+0x4A : 101ea2 >
  101e92:    02 70             	r2 = 0x0			  ## os_api.c:511:13
  101e94:    03 70             	r3 = 0x0			  ## os_api.c:511:13
  101e96:    50 08             	r0 = r5			  ## os_api.c:511:13
  101e98:    61 08             	r1 = r6			  ## os_api.c:511:13
  101e9a:    bf f3 11 f8       	call -0xfde <xQueueGenericReceive : 100ec0 >			  ## os_api.c:511:13
  101e9e:    46 80             	r6 += 0x4			  ## os_api.c:510:9
  101ea0:    14 80             	r4 += 0x1			  ## os_api.c:510:65
  101ea2:    00 02             	r0 = [sp]			  ## os_api.c:510:34
  101ea4:    01 04             	r1 = r0.b0 (u)			  ## os_api.c:510:34
  101ea6:    b4 e0 02 80       	if (r4 > 0xb) goto 0x4 <os_taskq_del+0x56 : 101eae >			  ## os_api.c:510:34
  101eaa:    14 f2 f2 bf       	ifs (r4 < r1) goto -0x1c <os_taskq_del+0x3A : 101e92 >
  101eae:    72 fc ff ff       	r2 = r7 + -0x1			  ## os_api.c:513:31
  101eb2:    00 d2             	r0 = r0 >> 0x8			  ## os_api.c:515:18
  101eb4:    67 b4             	r7 = r2 - r1			  ## os_api.c:513:18
  101eb6:    b0 f2 16 00       	if (r0 == r11) goto 0x2c <os_taskq_del+0x8E : 101ee6 >
  101eba:    01 a0             	r1 = sp + 0
  101ebc:    02 70             	r2 = 0x0			  ## os_api.c:530:13
  101ebe:    03 70             	r3 = 0x0			  ## os_api.c:530:13
  101ec0:    04 70             	r4 = 0x0			  ## os_api.c:530:13
  101ec2:    50 08             	r0 = r5			  ## os_api.c:530:13
  101ec4:    bf f3 3c f7       	call -0x1188 <xQueueGenericSend : 100d40 >			  ## os_api.c:530:13
  101ec8:    46 a0             	r6 = sp + 4
  101eca:    08 18             	goto 0x10 <os_taskq_del+0x84 : 101edc >
  101ecc:    02 70             	r2 = 0x0			  ## os_api.c:532:17
  101ece:    03 70             	r3 = 0x0			  ## os_api.c:532:17
  101ed0:    50 08             	r0 = r5			  ## os_api.c:532:17
  101ed2:    61 08             	r1 = r6			  ## os_api.c:532:17
  101ed4:    bf f3 34 f7       	call -0x1198 <xQueueGenericSend : 100d40 >			  ## os_api.c:532:17
  101ed8:    46 80             	r6 += 0x4			  ## os_api.c:531:13
  101eda:    14 80             	r4 += 0x1			  ## os_api.c:531:45
  101edc:    c0 f5 00 00       	r0 = b[sp] (u)			  ## os_api.c:531:38
  101ee0:    04 f2 f4 bf       	ifs (r4 < r0) goto -0x18 <os_taskq_del+0x74 : 101ecc >			  ## os_api.c:531:38
  101ee4:    17 18             	goto 0x2e <os_taskq_del+0xBC : 101f14 >			  ## os_api.c:531:38
  101ee6:    08 70             	r8 = 0x0
  101ee8:    21 ff 30 9b 13 00 	if (r9 != 0x300000) goto 0x26 <os_taskq_del+0xBC : 101f14 >
  101eee:    21 02             	r1 = [sp+8]			  ## os_api.c:517:31
  101ef0:    40 04             	r0 = r1.b0 (u)			  ## os_api.c:517:39
  101ef2:    08 f3 08 10       	if ((r1 & 0x100) == 0) goto 0x10 <os_taskq_del+0xAE : 101f06 >
  101ef6:    81 c0             	r1 = r0 << 0x2			  ## os_api.c:521:36
  101ef8:    42 a0             	r2 = sp + 4			  ## os_api.c:521:36
  101efa:    21 09             	r1 += r2			  ## os_api.c:521:36
  101efc:    21 42             	r1 = [r1 + 0x8]			  ## os_api.c:521:29
  101efe:    1a f6 00 10       	[r1 + 0x0] = r10			  ## os_api.c:521:47
  101f02:    21 02             	r1 = [sp+8]			  ## os_api.c:521:47
  101f04:    10 80             	r0 += 0x1			  ## os_api.c:520:28
  101f06:    09 f3 05 10       	if ((r1 & 0x200) == 0) goto 0xa <os_taskq_del+0xBC : 101f14 >
  101f0a:    80 c0             	r0 = r0 << 0x2			  ## os_api.c:525:50
  101f0c:    41 a0             	r1 = sp + 4
  101f0e:    10 09             	r0 += r1
  101f10:    20 40             	r0 = [r0 + 0x8]			  ## os_api.c:525:43
  101f12:    de 15             	call -0x444 <os_sem_post : 101ad0 >			  ## os_api.c:525:21
  101f14:    b5 3f             	if (r7 != 0x0) goto -0x96 <os_taskq_del+0x28 : 101e80 >
  101f16:    bf f3 8b f2       	call -0x1aea <local_irq_enable : 100430 >			  ## os_api.c:538:5
  101f1a:    03 18             	goto 0x6 <os_taskq_del+0xCA : 101f22 >			  ## os_api.c:538:5
  101f1c:    bf f3 88 f2       	call -0x1af0 <local_irq_enable : 100430 >			  ## os_api.c:499:9
  101f20:    88 71             	r8 = 0x18			  ## os_api.c:499:9
  101f22:    80 08             	r0 = r8			  ## os_api.c:541:1
  101f24:    1a 0a             	sp += 0x34			  ## os_api.c:541:1
  101f26:    5b 01             	{pc, r11-r4} = [sp++]			  ## os_api.c:541:1


os_taskq_del_type:
  101f28:    97 1f             	goto -0xd2 <os_taskq_del : 101e58 >			  ## os_api.c:544:0


os_sem_create:
  101f2a:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:549:0
  101f2c:    fe 0b             	sp += -0x4			  ## os_api.c:549:0
  101f2e:    14 08             	r4 = r1			  ## os_api.c:549:0
  101f30:    05 08             	r5 = r0			  ## os_api.c:549:0
  101f32:    03 ff 00 41 0d 00 	if (r4 < 0x100) goto 0x1a <os_sem_create+0x28 : 101f52 >			  ## os_api.c:549:0
  101f38:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101f3e:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101f40:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  101f46:    c1 ff 6b 22 10 00 	r1 = 0x10226b <$data.__1+0x8C : 10226a >			  ## FreeRTOSConfig.h:181:5
  101f4c:    02 fb 8f 02       	r2 = 0x28f <os_bss_size+0xA6 : 28e >			  ## FreeRTOSConfig.h:181:5
  101f50:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101f52:    23 70             	r3 = 0x2			  ## queue.c:657:15
  101f54:    f0 7f             	r0 = 0xff			  ## queue.c:657:15
  101f56:    01 70             	r1 = 0x0			  ## queue.c:657:15
  101f58:    02 70             	r2 = 0x0			  ## queue.c:657:15
  101f5a:    0b 02             	[sp] = r3			  ## queue.c:657:15
  101f5c:    53 08             	r3 = r5			  ## queue.c:657:15
  101f5e:    bf f3 d6 f3       	call -0x1854 <xQueueGenericCreateStatic : 10070e >			  ## queue.c:657:15
  101f62:    01 20             	if (r0 == 0x0) goto 0x2 <os_sem_create+0x3C : 101f66 >
  101f64:    ec 40             	[r0 + 0x38] = r4			  ## queue.c:660:50
  101f66:    00 70             	r0 = 0x0			  ## os_api.c:552:5
  101f68:    02 0a             	sp += 0x4			  ## os_api.c:552:5
  101f6a:    55 01             	{pc, r5, r4} = [sp++]			  ## os_api.c:552:5


os_sem_del:
  101f6c:    34 00             	[--sp] = rets			  ## os_api.c:556:0
  101f6e:    bf f3 99 f9       	call -0xcce <vQueueDelete : 1012a4 >			  ## os_api.c:557:5
  101f72:    00 70             	r0 = 0x0			  ## os_api.c:559:5
  101f74:    30 00             	pc = [sp++]			  ## os_api.c:559:5


os_sem_pend:
  101f76:    74 01             	[--sp] = {rets, r4}			  ## os_api.c:563:0
  101f78:    28 fb 00 2b       	r2 = icfg			  ## cpu.h:74:5
  101f7c:    34 70             	r4 = 0x3
  101f7e:    61 ff ff 29 0b 00 	if ((r2 & 0xff) != 0) goto 0x16 <os_sem_pend+0x24 : 101f9a >
  101f84:    f2 07             	r2 = -0x1			  ## os_api.c:569:9
  101f86:    01 22             	if (r1 == 0x0) goto 0x2 <os_sem_pend+0x14 : 101f8a >
  101f88:    12 08             	r2 = r1			  ## os_api.c:569:9
  101f8a:    01 70             	r1 = 0x0			  ## os_api.c:572:11
  101f8c:    03 70             	r3 = 0x0			  ## os_api.c:572:11
  101f8e:    04 70             	r4 = 0x0			  ## os_api.c:572:11
  101f90:    bf f3 96 f7       	call -0x10d4 <xQueueGenericReceive : 100ec0 >			  ## os_api.c:572:11
  101f94:    10 e0 01 00       	if (r0 == 0x1) goto 0x2 <os_sem_pend+0x24 : 101f9a >
  101f98:    b4 70             	r4 = 0xb			  ## os_api.c:574:12
  101f9a:    40 08             	r0 = r4			  ## os_api.c:575:1
  101f9c:    54 01             	{pc, r4} = [sp++]			  ## os_api.c:575:1


os_sem_set:
  101f9e:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:592:0
  101fa0:    14 08             	r4 = r1			  ## os_api.c:592:0
  101fa2:    05 08             	r5 = r0			  ## os_api.c:592:0
  101fa4:    0d 3a             	if (r5 != 0x0) goto 0x1a <os_sem_set+0x22 : 101fc0 >			  ## os_api.c:592:0
  101fa6:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  101fac:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  101fae:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  101fb4:    c1 ff 28 23 10 00 	r1 = 0x102328 <$data.__1+0x14A : 102328 >			  ## FreeRTOSConfig.h:181:5
  101fba:    02 fb b9 08       	r2 = 0x8b9 <stack_bss_begin+0x98 : 8b8 >			  ## FreeRTOSConfig.h:181:5
  101fbe:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  101fc0:    bf f3 2e f2       	call -0x1ba4 <local_irq_disable : 100420 >			  ## queue.c:2235:5
  101fc4:    08 00             	csync			  ## queue.c:2235:5
  101fc6:    ec 4a             	[r5 + 0x38] = r4			  ## queue.c:2237:49
  101fc8:    bf f3 32 f2       	call -0x1b9c <local_irq_enable : 100430 >			  ## queue.c:2239:5
  101fcc:    00 70             	r0 = 0x0			  ## os_api.c:597:5
  101fce:    55 01             	{pc, r5, r4} = [sp++]			  ## os_api.c:597:5


os_sem_valid:
  101fd0:    01 f9 4c 00       	r1 = b[r0 + 0x4c] (u)			  ## os_api.c:601:0
  101fd4:    10 70             	r0 = 0x1			  ## os_api.c:604:17
  101fd6:    21 e0 01 00       	if (r1 == 0x2) goto 0x2 <os_sem_valid+0xC : 101fdc >
  101fda:    00 70             	r0 = 0x0			  ## os_api.c:604:17
  101fdc:    20 00             	rts			  ## os_api.c:604:5


os_sem_query:
  101fde:    34 00             	[--sp] = rets			  ## os_api.c:608:0
  101fe0:    28 fb 00 1b       	r1 = icfg			  ## cpu.h:74:5
  101fe4:    60 ff ff 19 03 00 	if ((r1 & 0xff) == 0) goto 0x6 <os_sem_query+0x12 : 101ff0 >			  ## os_api.c:610:9
  101fea:    bf f3 49 f9       	call -0xd6e <uxQueueMessagesWaitingFromISR : 101280 >			  ## os_api.c:611:15
  101fee:    30 00             	pc = [sp++]			  ## os_api.c:615:5
  101ff0:    bf f3 14 f9       	call -0xdd8 <uxQueueMessagesWaiting : 10121c >			  ## os_api.c:613:15
  101ff4:    30 00             	pc = [sp++]			  ## os_api.c:615:5


os_mutex_create:
  101ff6:    74 01             	[--sp] = {rets, r4}			  ## os_api.c:619:0
  101ff8:    fe 0b             	sp += -0x4			  ## os_api.c:619:0
  101ffa:    03 08             	r3 = r0			  ## os_api.c:619:0
  101ffc:    10 70             	r0 = 0x1			  ## queue.c:515:30
  101ffe:    08 02             	[sp] = r0			  ## queue.c:515:30
  102000:    01 70             	r1 = 0x0			  ## queue.c:515:30
  102002:    02 70             	r2 = 0x0			  ## queue.c:515:30
  102004:    04 70             	r4 = 0x0			  ## queue.c:515:30
  102006:    bf f3 82 f3       	call -0x18fc <xQueueGenericCreateStatic : 10070e >			  ## queue.c:515:30
  10200a:    08 20             	if (r0 == 0x0) goto 0x10 <os_mutex_create+0x26 : 10201c >
  10200c:    1c 40             	[r0 + 0x4] = r4			  ## queue.c:470:35
  10200e:    0c 40             	[r0 + 0x0] = r4			  ## queue.c:471:33
  102010:    3c 40             	[r0 + 0xc] = r4			  ## queue.c:474:44
  102012:    01 70             	r1 = 0x0			  ## queue.c:479:16
  102014:    02 70             	r2 = 0x0			  ## queue.c:479:16
  102016:    03 70             	r3 = 0x0			  ## queue.c:479:16
  102018:    bf f3 92 f6       	call -0x12dc <xQueueGenericSend : 100d40 >			  ## queue.c:479:16
  10201c:    00 70             	r0 = 0x0			  ## os_api.c:622:5
  10201e:    02 0a             	sp += 0x4			  ## os_api.c:622:5
  102020:    54 01             	{pc, r4} = [sp++]			  ## os_api.c:622:5


os_mutex_del:
  102022:    34 00             	[--sp] = rets			  ## os_api.c:626:0
  102024:    bf f3 3e f9       	call -0xd84 <vQueueDelete : 1012a4 >			  ## os_api.c:627:5
  102028:    00 70             	r0 = 0x0			  ## os_api.c:629:5
  10202a:    30 00             	pc = [sp++]			  ## os_api.c:629:5


cpu_irq_disabled:
  10202c:    28 fb 00 0b       	r0 = icfg			  ## cpu.h:79:0
  102030:    21 fd 03 0a       	r1 = r0 & 0x300			  ## cpu.h:82:18
  102034:    10 70             	r0 = 0x1			  ## cpu.h:82:27
  102036:    01 ff 00 13 01 00 	if (r1 != 0x300) goto 0x2 <cpu_irq_disabled+0x12 : 10203e >
  10203c:    00 70             	r0 = 0x0			  ## cpu.h:82:27
  10203e:    20 00             	rts			  ## cpu.h:82:5


os_mutex_pend:
  102040:    76 01             	[--sp] = {rets, r6-r4}			  ## os_api.c:633:0
  102042:    13 08             	r3 = r1			  ## os_api.c:633:0
  102044:    04 08             	r4 = r0			  ## os_api.c:633:0
  102046:    28 fb 00 0b       	r0 = icfg			  ## cpu.h:74:5
  10204a:    32 70             	r2 = 0x3
  10204c:    61 ff ff 09 35 00 	if ((r0 & 0xff) != 0) goto 0x6a <os_mutex_pend+0x7C : 1020bc >
  102052:    ec 17             	call -0x28 <cpu_irq_disabled : 10202c >			  ## os_api.c:636:25
  102054:    33 30             	if (r0 != 0x0) goto 0x66 <os_mutex_pend+0x7C : 1020bc >			  ## os_api.c:636:25
  102056:    f5 07             	r5 = -0x1			  ## os_api.c:640:9
  102058:    01 26             	if (r3 == 0x0) goto 0x2 <os_mutex_pend+0x1C : 10205c >
  10205a:    35 08             	r5 = r3			  ## os_api.c:640:9
  10205c:    0d 38             	if (r4 != 0x0) goto 0x1a <os_mutex_pend+0x38 : 102078 >
  10205e:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  102064:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  102066:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  10206c:    c1 ff 3d 22 10 00 	r1 = 0x10223d <$data.__1+0x5E : 10223c >			  ## FreeRTOSConfig.h:181:5
  102072:    02 fb 65 02       	r2 = 0x265 <os_bss_size+0x7C : 264 >			  ## FreeRTOSConfig.h:181:5
  102076:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  102078:    bf f3 d2 f1       	call -0x1c5c <local_irq_disable : 100420 >			  ## queue.c:620:5
  10207c:    08 00             	csync			  ## queue.c:620:5
  10207e:    13 48             	r3 = [r4 + 0x4]			  ## queue.c:622:18
  102080:    bf f3 f8 fb       	call -0x810 <xTaskGetCurrentTaskHandle : 101874 >			  ## queue.c:622:44
  102084:    03 f2 0f 00       	if (r3 == r0) goto 0x1e <os_mutex_pend+0x66 : 1020a6 >			  ## queue.c:622:44
  102088:    bf f3 d2 f1       	call -0x1c5c <local_irq_enable : 100430 >			  ## queue.c:626:9
  10208c:    01 70             	r1 = 0x0			  ## queue.c:628:19
  10208e:    03 70             	r3 = 0x0			  ## queue.c:628:19
  102090:    06 70             	r6 = 0x0			  ## queue.c:628:19
  102092:    40 08             	r0 = r4			  ## queue.c:628:19
  102094:    52 08             	r2 = r5			  ## queue.c:628:19
  102096:    bf f3 13 f7       	call -0x11da <xQueueGenericReceive : 100ec0 >			  ## queue.c:628:19
  10209a:    02 08             	r2 = r0			  ## queue.c:628:19
  10209c:    bf f3 c0 f1       	call -0x1c80 <local_irq_disable : 100420 >			  ## queue.c:630:9
  1020a0:    08 00             	csync			  ## queue.c:630:9
  1020a2:    02 34             	if (r2 != 0x0) goto 0x4 <os_mutex_pend+0x68 : 1020a8 >			  ## queue.c:630:9
  1020a4:    05 18             	goto 0xa <os_mutex_pend+0x70 : 1020b0 >			  ## queue.c:630:9
  1020a6:    12 70             	r2 = 0x1
  1020a8:    30 48             	r0 = [r4 + 0xc]
  1020aa:    10 80             	r0 += 0x1
  1020ac:    38 48             	[r4 + 0xc] = r0
  1020ae:    26 08             	r6 = r2
  1020b0:    02 70             	r2 = 0x0			  ## os_api.c:645:12
  1020b2:    16 e0 01 00       	if (r6 == 0x1) goto 0x2 <os_mutex_pend+0x78 : 1020b8 >			  ## os_api.c:645:12
  1020b6:    b2 70             	r2 = 0xb			  ## os_api.c:645:12
  1020b8:    bf f3 ba f1       	call -0x1c8c <local_irq_enable : 100430 >			  ## queue.c:640:5
  1020bc:    20 08             	r0 = r2			  ## os_api.c:646:1
  1020be:    56 01             	{pc, r6-r4} = [sp++]			  ## os_api.c:646:1


os_mutex_post:
  1020c0:    75 01             	[--sp] = {rets, r5, r4}			  ## os_api.c:649:0
  1020c2:    04 08             	r4 = r0			  ## os_api.c:649:0
  1020c4:    28 fb 00 0b       	r0 = icfg			  ## cpu.h:74:5
  1020c8:    35 70             	r5 = 0x3
  1020ca:    61 ff ff 09 2a 00 	if ((r0 & 0xff) != 0) goto 0x54 <os_mutex_post+0x64 : 102124 >
  1020d0:    ad 17             	call -0xa6 <cpu_irq_disabled : 10202c >			  ## os_api.c:652:25
  1020d2:    28 30             	if (r0 != 0x0) goto 0x50 <os_mutex_post+0x64 : 102124 >			  ## os_api.c:652:25
  1020d4:    0d 38             	if (r4 != 0x0) goto 0x1a <os_mutex_post+0x30 : 1020f0 >
  1020d6:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  1020dc:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  1020de:    c0 ff f1 21 10 00 	r0 = 0x1021f1 <$data.__1+0x12 : 1021f0 >			  ## FreeRTOSConfig.h:181:5
  1020e4:    c1 ff 24 22 10 00 	r1 = 0x102224 <$data.__1+0x46 : 102224 >			  ## FreeRTOSConfig.h:181:5
  1020ea:    02 fb 2e 02       	r2 = 0x22e <os_bss_size+0x46 : 22e >			  ## FreeRTOSConfig.h:181:5
  1020ee:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1020f0:    bf f3 96 f1       	call -0x1cd4 <local_irq_disable : 100420 >			  ## queue.c:560:5
  1020f4:    08 00             	csync			  ## queue.c:560:5
  1020f6:    13 48             	r3 = [r4 + 0x4]			  ## queue.c:568:18
  1020f8:    bf f3 bc fb       	call -0x888 <xTaskGetCurrentTaskHandle : 101874 >			  ## queue.c:568:44
  1020fc:    03 f2 04 00       	if (r3 == r0) goto 0x8 <os_mutex_post+0x48 : 102108 >			  ## queue.c:568:44
  102100:    bf f3 96 f1       	call -0x1cd4 <local_irq_enable : 100430 >			  ## queue.c:595:9
  102104:    05 70             	r5 = 0x0			  ## queue.c:595:9
  102106:    0e 18             	goto 0x1c <os_mutex_post+0x64 : 102124 >			  ## queue.c:595:9
  102108:    30 48             	r0 = [r4 + 0xc]			  ## queue.c:576:42
  10210a:    02 fc ff ff       	r2 = r0 + -0x1			  ## queue.c:576:42
  10210e:    3a 48             	[r4 + 0xc] = r2			  ## queue.c:576:42
  102110:    bf f3 8e f1       	call -0x1ce4 <local_irq_enable : 100430 >			  ## queue.c:582:13
  102114:    05 70             	r5 = 0x0			  ## queue.c:582:13
  102116:    06 34             	if (r2 != 0x0) goto 0xc <os_mutex_post+0x64 : 102124 >			  ## queue.c:582:13
  102118:    01 70             	r1 = 0x0			  ## queue.c:583:20
  10211a:    02 70             	r2 = 0x0			  ## queue.c:583:20
  10211c:    03 70             	r3 = 0x0			  ## queue.c:583:20
  10211e:    40 08             	r0 = r4			  ## queue.c:583:20
  102120:    bf f3 0e f6       	call -0x13e4 <xQueueGenericSend : 100d40 >			  ## queue.c:583:20
  102124:    50 08             	r0 = r5			  ## os_api.c:660:1
  102126:    55 01             	{pc, r5, r4} = [sp++]			  ## os_api.c:660:1


os_mutex_valid:
  102128:    01 f9 4c 00       	r1 = b[r0 + 0x4c] (u)			  ## os_api.c:662:0
  10212c:    10 70             	r0 = 0x1			  ## os_api.c:664:17
  10212e:    11 e0 01 00       	if (r1 == 0x1) goto 0x2 <os_mutex_valid+0xC : 102134 >
  102132:    00 70             	r0 = 0x0			  ## os_api.c:664:17
  102134:    20 00             	rts			  ## os_api.c:664:5


pxPortInitialiseStack:
  102136:    40 8b             	r0 += -0x4c			  ## port.c:144:0
  102138:    3a 40             	[r0 + 0xc] = r2			  ## port.c:156:12
  10213a:    02 70             	r2 = 0x0			  ## port.c:156:12
  10213c:    2a 40             	[r0 + 0x8] = r2			  ## port.c:158:12
  10213e:    1a 40             	[r0 + 0x4] = r2			  ## port.c:159:12
  102140:    09 40             	[r0 + 0x0] = r1			  ## port.c:162:12
  102142:    20 00             	rts			  ## port.c:168:5


vPortEndScheduler:
  102144:    34 00             	[--sp] = rets			  ## port.c:303:0
  102146:    c0 ff c8 fc 00 00 	r0 = 0xfcc8 <uxCriticalNesting : fcc8 >			  ## port.c:306:5
  10214c:    00 40             	r0 = [r0 + 0x0]			  ## port.c:306:5
  10214e:    00 ff e8 03 0d 00 	if (r0 == 0x3e8) goto 0x1a <vPortEndScheduler+0x2A : 10216e >			  ## port.c:306:5
  102154:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  10215a:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  10215c:    c0 ff 90 24 10 00 	r0 = 0x102490 <$data.__1+0x2B2 : 102490 >			  ## FreeRTOSConfig.h:181:5
  102162:    c1 ff 7e 24 10 00 	r1 = 0x10247e <$data.__1+0x2A0 : 10247e >			  ## FreeRTOSConfig.h:181:5
  102168:    02 fb 32 01       	r2 = 0x132 <var_bss_size+0x2A : 132 >			  ## FreeRTOSConfig.h:181:5
  10216c:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  10216e:    30 00             	pc = [sp++]			  ## port.c:307:1


vPortExitCritical:
  102170:    74 01             	[--sp] = {rets, r4}			  ## port.c:377:0
  102172:    c4 ff c8 fc 00 00 	r4 = 0xfcc8 <uxCriticalNesting : fcc8 >			  ## port.c:377:0
  102178:    00 48             	r0 = [r4 + 0x0]			  ## port.c:378:5
  10217a:    0e 30             	if (r0 != 0x0) goto 0x1c <vPortExitCritical+0x28 : 102198 >			  ## port.c:378:5
  10217c:    c0 ff e8 fc 00 00 	r0 = 0xfce8 <mask_log_e : fce8 >			  ## FreeRTOSConfig.h:181:5
  102182:    03 40             	r3 = [r0 + 0x0]			  ## FreeRTOSConfig.h:181:5
  102184:    c0 ff 90 24 10 00 	r0 = 0x102490 <$data.__1+0x2B2 : 102490 >			  ## FreeRTOSConfig.h:181:5
  10218a:    c1 ff 97 24 10 00 	r1 = 0x102497 <$data.__1+0x2B8 : 102496 >			  ## FreeRTOSConfig.h:181:5
  102190:    02 fb 7a 01       	r2 = 0x17a <var_bss_size+0x72 : 17a >			  ## FreeRTOSConfig.h:181:5
  102194:    83 00             	call r3			  ## FreeRTOSConfig.h:181:5
  102196:    00 48             	r0 = [r4 + 0x0]
  102198:    f0 8f             	r0 += -0x1			  ## port.c:379:22
  10219a:    08 48             	[r4 + 0x0] = r0			  ## port.c:379:22
  10219c:    02 30             	if (r0 != 0x0) goto 0x4 <vPortExitCritical+0x32 : 1021a2 >			  ## port.c:379:22
  10219e:    bf f3 47 f1       	call -0x1d72 <local_irq_enable : 100430 >			  ## port.c:381:9
  1021a2:    54 01             	{pc, r4} = [sp++]			  ## port.c:383:1


OS_ClrPending:
  1021a4:    c0 ff c0 fc 00 00 	r0 = 0xfcc0 <highCurrentTCB : fcc0 >			  ## port.c:390:0
  1021aa:    00 40             	r0 = [r0 + 0x0]			  ## port.c:392:29
  1021ac:    c1 ff 94 fc 00 00 	r1 = 0xfc94 <CurrentTCB : fc94 >			  ## port.c:392:27
  1021b2:    08 42             	[r1 + 0x0] = r0			  ## port.c:392:27
  1021b4:    c0 ff a4 e1 1b 00 	r0 = 0x1be1a4 <__stub_uECC_vli_cmp_unsafe+0xB71A8 : 1be1a4 >			  ## port.c:393:27
  1021ba:    c0 f4 08 09       	[r0 + 0x0] = 0x8			  ## port.c:393:27
  1021be:    20 00             	rts			  ## port.c:395:1


vTickISR:
  1021c0:    e9 01             	[--sp] = {psr, rets, reti}			  ## port.c:454:0
  1021c2:    60 01             	[--sp] = {r3-r0}			  ## port.c:456:27
  1021c4:    c0 ff ec e0 1b 00 	r0 = 0x1be0ec <__stub_uECC_vli_cmp_unsafe+0xB70F0 : 1be0ec >			  ## port.c:456:27
  1021ca:    00 f4 40 09       	[r0 + 0x0] |= 0x40			  ## port.c:456:27
  1021ce:    bf f3 bd f4       	call -0x1686 <xTaskIncrementTick : 100b4c >			  ## port.c:464:13
  1021d2:    02 20             	if (r0 == 0x0) goto 0x4 <vTickISR+0x18 : 1021d8 >			  ## port.c:464:13
  1021d4:    bf f3 40 f2       	call -0x1b80 <vPortYield : 100658 >			  ## port.c:466:13
  1021d8:    00 01             	{r3-r0} = [sp++]			  ## port.c:471:1
  1021da:    a9 01             	{psr, rets, reti} = [sp++]			  ## port.c:471:1
  1021dc:    22 00             	rti			  ## port.c:471:1


$data.__1:
  1021de:	 78 51 75 65 75 65 47 65         xQueueGe
  1021e6:	 6e 65 72 69 63 52 65 73         nericRes
  1021ee:	 65 74 00 25 73 20 25 64         et.%s %d
  1021f6:	 0a 00 78 51 75 65 75 65         ..xQueue
  1021fe:	 47 65 6e 65 72 69 63 43         GenericC
  102206:	 72 65 61 74 65 53 74 61         reateSta
  10220e:	 74 69 63 00 78 51 75 65         tic.xQue
  102216:	 75 65 47 65 6e 65 72 69         ueGeneri
  10221e:	 63 53 65 6e 64 00 78 51         cSend.xQ
  102226:	 75 65 75 65 47 69 76 65         ueueGive
  10222e:	 4d 75 74 65 78 52 65 63         MutexRec
  102236:	 75 72 73 69 76 65 00 78         ursive.x
  10223e:	 51 75 65 75 65 54 61 6b         QueueTak
  102246:	 65 4d 75 74 65 78 52 65         eMutexRe
  10224e:	 63 75 72 73 69 76 65 00         cursive.
  102256:	 78 51 75 65 75 65 47 65         xQueueGe
  10225e:	 6e 65 72 69 63 52 65 63         nericRec
  102266:	 65 69 76 65 00 78 51 75         eive.xQu
  10226e:	 65 75 65 43 72 65 61 74         eueCreat
  102276:	 65 43 6f 75 6e 74 69 6e         eCountin
  10227e:	 67 53 65 6d 61 70 68 6f         gSemapho
  102286:	 72 65 53 74 61 74 69 63         reStatic
  10228e:	 00 78 51 75 65 75 65 47         .xQueueG
  102296:	 65 6e 65 72 69 63 53 65         enericSe
  10229e:	 6e 64 46 72 6f 6d 49 53         ndFromIS
  1022a6:	 52 00 78 51 75 65 75 65         R.xQueue
  1022ae:	 47 69 76 65 46 72 6f 6d         GiveFrom
  1022b6:	 49 53 52 00 78 51 75 65         ISR.xQue
  1022be:	 75 65 52 65 63 65 69 76         ueReceiv
  1022c6:	 65 46 72 6f 6d 49 53 52         eFromISR
  1022ce:	 00 75 78 51 75 65 75 65         .uxQueue
  1022d6:	 4d 65 73 73 61 67 65 73         Messages
  1022de:	 57 61 69 74 69 6e 67 00         Waiting.
  1022e6:	 75 78 51 75 65 75 65 53         uxQueueS
  1022ee:	 70 61 63 65 73 41 76 61         pacesAva
  1022f6:	 69 6c 61 62 6c 65 00 75         ilable.u
  1022fe:	 78 51 75 65 75 65 4d 65         xQueueMe
  102306:	 73 73 61 67 65 73 57 61         ssagesWa
  10230e:	 69 74 69 6e 67 46 72 6f         itingFro
  102316:	 6d 49 53 52 00 76 51 75         mISR.vQu
  10231e:	 65 75 65 44 65 6c 65 74         eueDelet
  102326:	 65 00 75 78 51 75 65 75         e.uxQueu
  10232e:	 65 4d 65 73 73 61 67 65         eMessage
  102336:	 73 53 65 74 00 25 73 20         sSet.%s 
  10233e:	 25 64 0a 00 76 54 61 73         %d..vTas
  102346:	 6b 44 65 6c 65 74 65 00         kDelete.
  10234e:	 70 72 76 44 65 6c 65 74         prvDelet
  102356:	 65 54 43 42 00 78 54 61         eTCB.xTa
  10235e:	 73 6b 52 65 73 75 6d 65         skResume
  102366:	 41 6c 6c 00 78 54 61 73         All.xTas
  10236e:	 6b 49 6e 63 72 65 6d 65         kIncreme
  102376:	 6e 74 54 69 63 6b 00 76         ntTick.v
  10237e:	 54 61 73 6b 46 69 6e 64         TaskFind
  102386:	 48 69 67 68 74 65 73 74         Hightest
  10238e:	 54 61 73 6b 00 49 44 4c         Task.IDL
  102396:	 45 00 76 54 61 73 6b 53         E.vTaskS
  10239e:	 74 61 72 74 53 63 68 65         tartSche
  1023a6:	 64 75 6c 65 72 00 70 72         duler.pr
  1023ae:	 76 49 64 6c 65 54 61 73         vIdleTas
  1023b6:	 6b 00 70 63 54 61 73 6b         k.pcTask
  1023be:	 47 65 74 4e 61 6d 65 00         GetName.
  1023c6:	 78 54 61 73 6b 47 65 74         xTaskGet
  1023ce:	 48 61 6e 64 6c 65 00 76         Handle.v
  1023d6:	 54 61 73 6b 53 74 65 70         TaskStep
  1023de:	 54 69 63 6b 00 76 54 61         Tick.vTa
  1023e6:	 73 6b 50 6c 61 63 65 4f         skPlaceO
  1023ee:	 6e 45 76 65 6e 74 4c 69         nEventLi
  1023f6:	 73 74 00 78 54 61 73 6b         st.xTask
  1023fe:	 52 65 6d 6f 76 65 46 72         RemoveFr
  102406:	 6f 6d 45 76 65 6e 74 4c         omEventL
  10240e:	 69 73 74 00 76 54 61 73         ist.vTas
  102416:	 6b 53 65 74 54 69 6d 65         kSetTime
  10241e:	 4f 75 74 53 74 61 74 65         OutState
  102426:	 00 78 54 61 73 6b 43 68         .xTaskCh
  10242e:	 65 63 6b 46 6f 72 54 69         eckForTi
  102436:	 6d 65 4f 75 74 00 78 54         meOut.xT
  10243e:	 61 73 6b 50 72 69 6f 72         askPrior
  102446:	 69 74 79 44 69 73 69 6e         ityDisin
  10244e:	 68 65 72 69 74 00 41 53         herit.AS
  102456:	 53 45 52 54 3a 20 6d 65         SERT: me
  10245e:	 73 73 61 67 65 73 20 3e         ssages >
  102466:	 3d 20 68 65 61 64 2e 61         = head.a
  10246e:	 72 67 63 20 2b 20 31 20         rgc + 1 
  102476:	 25 64 2c 20 25 64 0a 00         %d, %d..
  10247e:	 76 50 6f 72 74 45 6e 64         vPortEnd
  102486:	 53 63 68 65 64 75 6c 65         Schedule
  10248e:	 72 00 25 73 20 25 64 0a         r.%s %d.
  102496:	 00 76 50 6f 72 74 45 78         .vPortEx
  10249e:	 69 74 43 72 69 74 69 63         itCritic
  1024a6:	 61 6c 00                        al.


os_code_end:
  1024a9:    00 76             	r0 = 0x60


pmalloc_init:
  1024aa:    76 01             	[--sp] = {rets, r6-r4}			  ## pmalloc.c:67:0
  1024ac:    15 08             	r5 = r1			  ## pmalloc.c:67:0
  1024ae:    06 08             	r6 = r0			  ## pmalloc.c:67:0
  1024b0:    c4 ff 08 fe 00 00 	r4 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:67:0
  1024b6:    01 70             	r1 = 0x0			  ## pmalloc.c:69:5
  1024b8:    82 75             	r2 = 0x58			  ## pmalloc.c:69:5
  1024ba:    40 08             	r0 = r4			  ## pmalloc.c:69:5
  1024bc:    bf f3 57 ee       	call -0x2352 <memset : 10016e >			  ## pmalloc.c:69:5
  1024c0:    60 fc 7f 00       	r0 = r6 + 0x7f			  ## pmalloc.c:70:30
  1024c4:    31 fd 7f 09       	r1 = r0 & 0xffffff80			  ## pmalloc.c:70:30
  1024c8:    43 fc 44 00       	r3 = r4 + 0x44			  ## pmalloc.c:70:30
  1024cc:    09 46             	[r3 + 0x0] = r1			  ## pmalloc.c:70:23
  1024ce:    32 fd 7f 59       	r2 = r5 & 0xffffff80			  ## pmalloc.c:71:34
  1024d2:    1a 46             	[r3 + 0x4] = r2			  ## pmalloc.c:71:21
  1024d4:    61 b4             	r1 = r2 - r1			  ## pmalloc.c:72:40
  1024d6:    29 46             	[r3 + 0x8] = r1			  ## pmalloc.c:72:22
  1024d8:    c9 d1             	r1 = r1 >> 0x7			  ## pmalloc.c:73:48
  1024da:    99 56             	h[r3 + 0x12] = r1			  ## pmalloc.c:73:29
  1024dc:    c0 d1             	r0 = r0 >> 0x7			  ## pmalloc.c:78:70
  1024de:    68 56             	h[r3 + 0xc] = r0			  ## pmalloc.c:78:29
  1024e0:    ea d1             	r2 = r5 >> 0x7			  ## pmalloc.c:79:66
  1024e2:    7a 56             	h[r3 + 0xe] = r2			  ## pmalloc.c:79:27
  1024e4:    20 04             	r0 = r0.l (u)			  ## pmalloc.c:84:18
  1024e6:    11 70             	r1 = 0x1
  1024e8:    12 18             	goto 0x24 <pmalloc_init+0x64 : 10250e >
  1024ea:    42 d1             	r2 = r0 >> 0x5			  ## pmalloc.c:85:27
  1024ec:    a3 f6 00 42       	r3 = [r4+r2<<2]			  ## pmalloc.c:85:39
  1024f0:    25 fd 1f 09       	r5 = r0 & 0x1f			  ## pmalloc.c:85:42
  1024f4:    f8 fd 50 51       	r5 = r1 << r5			  ## pmalloc.c:85:42
  1024f8:    53 ba             	r3 |= r5			  ## pmalloc.c:85:39
  1024fa:    b3 f6 00 42       	[r4+r2<<2] = r3			  ## pmalloc.c:85:39
  1024fe:    03 49             	r3 = [r4 + 0x40]			  ## pmalloc.c:86:28
  102500:    f8 fd 20 21       	r2 = r1 << r2			  ## pmalloc.c:86:31
  102504:    52 b6             	r2 |= r3			  ## pmalloc.c:86:28
  102506:    0a 49             	[r4 + 0x40] = r2			  ## pmalloc.c:86:28
  102508:    02 f7 52 40       	r2 = h[r4 + 0x52] (u)			  ## pmalloc.c:86:28
  10250c:    10 80             	r0 += 0x1			  ## pmalloc.c:84:71
  10250e:    a2 04             	r2 = r2.l (u)			  ## pmalloc.c:84:47
  102510:    20 f2 eb 3f       	if (r0 < r2) goto -0x2a <pmalloc_init+0x40 : 1024ea >			  ## pmalloc.c:84:5
  102514:    56 01             	{pc, r6-r4} = [sp++]			  ## pmalloc.c:94:1


pmm_get_var:
  102516:    c0 ff 08 fe 00 00 	r0 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:97:0
  10251c:    20 00             	rts			  ## pmalloc.c:98:5


pmalloc_get_unused_pages:
  10251e:    c0 ff 08 fe 00 00 	r0 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:130:0
  102524:    01 f7 54 00       	r1 = h[r0 + 0x54] (u)			  ## pmalloc.c:131:38
  102528:    00 f7 56 00       	r0 = h[r0 + 0x56] (u)			  ## pmalloc.c:131:12
  10252c:    60 b0             	r0 = r0 - r1			  ## pmalloc.c:131:36
  10252e:    20 00             	rts			  ## pmalloc.c:131:5


pmalloc:
  102530:    76 01             	[--sp] = {rets, r6-r4}			  ## pmalloc.c:163:0
  102532:    c0 ff 08 fe 00 00 	r0 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:163:0
  102538:    01 41             	r1 = [r0 + 0x40]			  ## pmalloc.c:165:21
  10253a:    23 22             	if (r1 == 0x0) goto 0x46 <pmalloc+0x52 : 102582 >
  10253c:    e8 fd 00 11       	r1 = clz(r1)			  ## pmalloc.c:137:5
  102540:    61 fb 1f 19       	r1 = 0x1f - r1			  ## pmalloc.c:169:9
  102544:    a2 f6 00 01       	r2 = [r0+r1<<2]			  ## pmalloc.c:173:9
  102548:    e8 fd 00 22       	r2 = clz(r2)			  ## pmalloc.c:137:5
  10254c:    a4 f6 00 01       	r4 = [r0+r1<<2]			  ## pmalloc.c:176:34
  102550:    62 fb 1f 29       	r2 = 0x1f - r2			  ## pmalloc.c:173:9
  102554:    13 70             	r3 = 0x1			  ## pmalloc.c:176:38
  102556:    f8 fd 20 53       	r5 = r3 << r2			  ## pmalloc.c:176:38
  10255a:    e3 fd 50 64       	r6 = r4 & ~r5			  ## pmalloc.c:176:34
  10255e:    d5 bb             	r5 = ~r5			  ## pmalloc.c:176:37
  102560:    b6 f6 00 01       	[r0+r1<<2] = r6			  ## pmalloc.c:176:34
  102564:    54 f1 05 00       	if ((r4 & r5) != 0) goto 0xa <pmalloc+0x42 : 102572 >			  ## pmalloc.c:176:34
  102568:    04 41             	r4 = [r0 + 0x40]			  ## pmalloc.c:178:32
  10256a:    43 0c             	r3 <<= r1			  ## pmalloc.c:178:36
  10256c:    e3 fd 30 34       	r3 = r4 & ~r3			  ## pmalloc.c:178:32
  102570:    0b 41             	[r0 + 0x40] = r3			  ## pmalloc.c:178:32
  102572:    03 f7 54 00       	r3 = h[r0 + 0x54] (u)			  ## pmalloc.c:180:31
  102576:    13 80             	r3 += 0x1			  ## pmalloc.c:180:31
  102578:    13 f7 54 00       	h[r0 + 0x54] = r3			  ## pmalloc.c:180:31
  10257c:    48 c1             	r0 = r1 << 0x5			  ## pmalloc.c:187:24
  10257e:    20 09             	r0 += r2			  ## pmalloc.c:187:35
  102580:    03 18             	goto 0x6 <pmalloc+0x58 : 102588 >			  ## pmalloc.c:187:35
  102582:    c0 ff ff ff 00 00 	r0 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >
  102588:    20 04             	r0 = r0.l (u)			  ## pmalloc.c:192:1
  10258a:    56 01             	{pc, r6-r4} = [sp++]			  ## pmalloc.c:192:1


get_physic_address:
  10258c:    c1 ff 08 fe 00 00 	r1 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:195:0
  102592:    02 f7 50 10       	r2 = h[r1 + 0x50] (u)			  ## pmalloc.c:196:29
  102596:    11 43             	r1 = [r1 + 0x44]			  ## pmalloc.c:196:80
  102598:    a0 b0             	r0 = r0 - r2			  ## pmalloc.c:196:27
  10259a:    c0 c1             	r0 = r0 << 0x7			  ## pmalloc.c:196:54
  10259c:    10 09             	r0 += r1			  ## pmalloc.c:196:66
  10259e:    20 00             	rts			  ## pmalloc.c:196:5


pfree:
  1025a0:    79 01             	[--sp] = {rets, r9-r4}			  ## pmalloc.c:204:0
  1025a2:    46 d1             	r6 = r0 >> 0x5			  ## pmalloc.c:205:5
  1025a4:    b1 c0             	r1 = r6 << 0x2			  ## pmalloc.c:205:5
  1025a6:    c4 ff 08 fe 00 00 	r4 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:205:5
  1025ac:    05 b3             	r5 = r1 + r4			  ## pmalloc.c:205:5
  1025ae:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  1025b0:    20 fd 1f 09       	r0 = r0 & 0x1f			  ## pmalloc.c:205:5
  1025b4:    19 70             	r9 = 0x1			  ## pmalloc.c:205:5
  1025b6:    f8 fd 00 79       	r7 = r9 << r0			  ## pmalloc.c:205:5
  1025ba:    c8 ff e8 fc 00 00 	r8 = 0xfce8 <mask_log_e : fce8 >			  ## pmalloc.c:205:5
  1025c0:    71 f0 07 00       	if ((r1 & r7) == 0) goto 0xe <pfree+0x32 : 1025d2 >			  ## pmalloc.c:205:5
  1025c4:    01 f6 00 80       	r1 = [r8 + 0x0]			  ## pmalloc.c:205:5
  1025c8:    c0 ff 62 2a 10 00 	r0 = 0x102a62 <$data.__2 : 102a62 >			  ## pmalloc.c:205:5
  1025ce:    81 00             	call r1			  ## pmalloc.c:205:5
  1025d0:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  1025d2:    e0 fd 70 01       	r0 = r1 | r7			  ## pmalloc.c:206:38
  1025d6:    08 4a             	[r5 + 0x0] = r0			  ## pmalloc.c:206:38
  1025d8:    00 49             	r0 = [r4 + 0x40]			  ## pmalloc.c:207:24
  1025da:    f8 fd 60 19       	r1 = r9 << r6			  ## pmalloc.c:207:27
  1025de:    50 b2             	r0 |= r1			  ## pmalloc.c:207:24
  1025e0:    08 49             	[r4 + 0x40] = r0			  ## pmalloc.c:207:24
  1025e2:    00 f7 54 40       	r0 = h[r4 + 0x54] (u)			  ## pmalloc.c:208:5
  1025e6:    08 30             	if (r0 != 0x0) goto 0x10 <pfree+0x58 : 1025f8 >			  ## pmalloc.c:208:5
  1025e8:    01 f6 00 80       	r1 = [r8 + 0x0]			  ## pmalloc.c:208:5
  1025ec:    c0 ff af 2a 10 00 	r0 = 0x102aaf <$data.__2+0x4C : 102aae >			  ## pmalloc.c:208:5
  1025f2:    81 00             	call r1			  ## pmalloc.c:208:5
  1025f4:    00 f7 54 40       	r0 = h[r4 + 0x54] (u)			  ## pmalloc.c:208:5
  1025f8:    f0 8f             	r0 += -0x1			  ## pmalloc.c:209:27
  1025fa:    10 f7 54 40       	h[r4 + 0x54] = r0			  ## pmalloc.c:209:27
  1025fe:    59 01             	{pc, r9-r4} = [sp++]			  ## pmalloc.c:212:1


vmm_init_:
  102600:    76 01             	[--sp] = {rets, r6-r4}			  ## vmalloc.c:74:0
  102602:    14 08             	r4 = r1			  ## vmalloc.c:74:0
  102604:    05 08             	r5 = r0			  ## vmalloc.c:74:0
  102606:    c6 ff 00 04 1b 00 	r6 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >			  ## vmalloc.c:74:0
  10260c:    1d 4c             	[r6 + 0x4] = r5			  ## vmalloc.c:59:22
  10260e:    40 b9             	r0 = r4 + r5			  ## vmalloc.c:60:38
  102610:    f0 8f             	r0 += -0x1			  ## vmalloc.c:60:45
  102612:    28 4c             	[r6 + 0x8] = r0			  ## vmalloc.c:60:22
  102614:    00 f4 10 69       	[r6 + 0x0] |= 0x10			  ## vmalloc.c:62:5
  102618:    01 70             	r1 = 0x0			  ## vmalloc.c:63:5
  10261a:    50 08             	r0 = r5			  ## vmalloc.c:63:5
  10261c:    42 08             	r2 = r4			  ## vmalloc.c:63:5
  10261e:    bf f3 a6 ed       	call -0x24b4 <memset : 10016e >			  ## vmalloc.c:63:5
  102622:    00 4c             	r0 = [r6 + 0x0]			  ## vmalloc.c:64:5
  102624:    70 b2             	r0 &= 0xffffffef			  ## vmalloc.c:64:5
  102626:    08 4c             	[r6 + 0x0] = r0			  ## vmalloc.c:64:5
  102628:    00 f4 01 69       	[r6 + 0x0] |= 0x1			  ## vmalloc.c:66:5
  10262c:    c0 ff 60 fe 00 00 	r0 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:87:21
  102632:    0d 40             	[r0 + 0x0] = r5			  ## vmalloc.c:79:24
  102634:    c1 f4 20 0b       	[r0 + 0x4] = 0x200000			  ## vmalloc.c:84:21
  102638:    61 d0             	r1 = r4 >> 0x1			  ## vmalloc.c:81:28
  10263a:    ca c1             	r2 = r1 << 0x7			  ## vmalloc.c:82:32
  10263c:    3a 40             	[r0 + 0xc] = r2			  ## vmalloc.c:85:21
  10263e:    42 fb 20 2b       	r2 = r2 + 0x200000			  ## vmalloc.c:86:35
  102642:    2a 40             	[r0 + 0x8] = r2			  ## vmalloc.c:86:21
  102644:    99 50             	h[r0 + 0x12] = r1			  ## vmalloc.c:87:21
  102646:    56 01             	{pc, r6-r4} = [sp++]			  ## vmalloc.c:93:1


vmm_get_var:
  102648:    c0 ff 60 fe 00 00 	r0 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:96:0
  10264e:    20 00             	rts			  ## vmalloc.c:97:5


vmalloc_:
  102650:    7f 01             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:122:0
  102652:    fe 0b             	sp += -0x4			  ## vmalloc.c:122:0
  102654:    12 fc 7f 00       	r2 = r1 + 0x7f			  ## vmalloc.c:123:22
  102658:    d4 d1             	r4 = r2 >> 0x7			  ## vmalloc.c:123:22
  10265a:    ca ff e8 fc 00 00 	r10 = 0xfce8 <mask_log_e : fce8 >
  102660:    11 28             	if (r4 == 0x0) goto 0x22 <vmalloc_+0x34 : 102684 >
  102662:    c6 ff 08 fe 00 00 	r6 = 0xfe08 <physics_mem : fe08 >
  102668:    02 f7 54 60       	r2 = h[r6 + 0x54] (u)			  ## pmalloc.c:131:38
  10266c:    01 f7 56 60       	r1 = h[r6 + 0x56] (u)			  ## pmalloc.c:131:12
  102670:    a1 b2             	r1 = r1 - r2			  ## pmalloc.c:131:36
  102672:    41 f2 0f 20       	if (r1 >= r4) goto 0x1e <vmalloc_+0x44 : 102694 >			  ## pmalloc.c:131:36
  102676:    01 f6 00 a0       	r1 = [r10 + 0x0]			  ## vmalloc.c:134:9
  10267a:    c0 ff eb 2a 10 00 	r0 = 0x102aeb <$data.__2+0x88 : 102aea >			  ## vmalloc.c:134:9
  102680:    81 00             	call r1			  ## vmalloc.c:134:9
  102682:    06 18             	goto 0xc <vmalloc_+0x40 : 102690 >			  ## vmalloc.c:134:9
  102684:    02 f6 00 a0       	r2 = [r10 + 0x0]			  ## vmalloc.c:130:9
  102688:    c0 ff d3 2a 10 00 	r0 = 0x102ad3 <$data.__2+0x70 : 102ad2 >			  ## vmalloc.c:130:9
  10268e:    82 00             	call r2			  ## vmalloc.c:130:9
  102690:    f0 07             	r0 = -0x1
  102692:    6d 18             	goto 0xda <vmalloc_+0x11E : 10276e >
  102694:    cb ff 60 fe 00 00 	r11 = 0xfe60 <v_mems : fe60 >
  10269a:    01 f6 04 b0       	r1 = [r11 + 0x4]			  ## vmalloc.c:124:41
  10269e:    08 02             	[sp] = r0			  ## vmalloc.c:124:41
  1026a0:    60 b0             	r0 = r0 - r1			  ## vmalloc.c:124:32
  1026a2:    c5 d1             	r5 = r0 >> 0x7			  ## vmalloc.c:124:48
  1026a4:    6f c0             	r7 = r5 << 0x1			  ## vmalloc.c:137:14
  1026a6:    cc ff 00 04 1b 00 	r12 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >			  ## vmalloc.c:137:14
  1026ac:    cd ff ff ff 00 00 	r13 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >			  ## vmalloc.c:137:14
  1026b2:    0e fb ff 1f       	r14 = 0x1fff <_system_bss_end+0xB36 : 1ffe >			  ## vmalloc.c:137:14
  1026b6:    1f 70             	r15 = 0x1			  ## vmalloc.c:137:14
  1026b8:    c9 ff 12 2b 10 00 	r9 = 0x102b12 <$data.__2+0xB0 : 102b12 >			  ## vmalloc.c:137:14
  1026be:    55 18             	goto 0xaa <vmalloc_+0x11A : 10276a >			  ## vmalloc.c:137:14
  1026c0:    00 f6 00 b0       	r0 = [r11 + 0x0]			  ## vmalloc.c:139:9
  1026c4:    c2 b1             	r2 = r0 + r7			  ## vmalloc.c:139:9
  1026c6:    10 64             	r0 = b[r2 + 0x1] (u)			  ## vmalloc.c:139:9
  1026c8:    05 f3 05 00       	if ((r0 & 0x20) == 0) goto 0xa <vmalloc_+0x86 : 1026d6 >			  ## vmalloc.c:139:9
  1026cc:    03 f6 00 a0       	r3 = [r10 + 0x0]			  ## vmalloc.c:139:9
  1026d0:    90 08             	r0 = r9			  ## vmalloc.c:139:9
  1026d2:    51 08             	r1 = r5			  ## vmalloc.c:139:9
  1026d4:    83 00             	call r3			  ## vmalloc.c:139:9
  1026d6:    00 f4 10 c9       	[r12 + 0x0] |= 0x10			  ## vmalloc.c:140:9
  1026da:    01 4d             	r1 = [r6 + 0x40]			  ## pmalloc.c:165:21
  1026dc:    d0 08             	r0 = r13
  1026de:    22 22             	if (r1 == 0x0) goto 0x44 <vmalloc_+0xD4 : 102724 >
  1026e0:    e8 fd 00 01       	r0 = clz(r1)			  ## pmalloc.c:137:5
  1026e4:    60 fb 1f 09       	r0 = 0x1f - r0			  ## pmalloc.c:169:9
  1026e8:    a1 f6 00 60       	r1 = [r6+r0<<2]			  ## pmalloc.c:173:9
  1026ec:    e8 fd 00 11       	r1 = clz(r1)			  ## pmalloc.c:137:5
  1026f0:    a2 f6 00 60       	r2 = [r6+r0<<2]			  ## pmalloc.c:176:34
  1026f4:    61 fb 1f 19       	r1 = 0x1f - r1			  ## pmalloc.c:173:9
  1026f8:    f8 fd 10 3f       	r3 = r15 << r1			  ## pmalloc.c:176:38
  1026fc:    e3 fd 30 82       	r8 = r2 & ~r3			  ## pmalloc.c:176:34
  102700:    d3 b7             	r3 = ~r3			  ## pmalloc.c:176:37
  102702:    b8 f6 00 60       	[r6+r0<<2] = r8			  ## pmalloc.c:176:34
  102706:    32 f1 06 00       	if ((r2 & r3) != 0) goto 0xc <vmalloc_+0xC6 : 102716 >			  ## pmalloc.c:176:34
  10270a:    02 4d             	r2 = [r6 + 0x40]			  ## pmalloc.c:178:32
  10270c:    f8 fd 00 3f       	r3 = r15 << r0			  ## pmalloc.c:178:36
  102710:    e3 fd 30 22       	r2 = r2 & ~r3			  ## pmalloc.c:178:32
  102714:    0a 4d             	[r6 + 0x40] = r2			  ## pmalloc.c:178:32
  102716:    02 f7 54 60       	r2 = h[r6 + 0x54] (u)			  ## pmalloc.c:180:31
  10271a:    12 80             	r2 += 0x1			  ## pmalloc.c:180:31
  10271c:    12 f7 54 60       	h[r6 + 0x54] = r2			  ## pmalloc.c:180:31
  102720:    40 c1             	r0 = r0 << 0x5			  ## pmalloc.c:187:24
  102722:    10 09             	r0 += r1			  ## pmalloc.c:187:35
  102724:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## vmalloc.c:141:16
  102728:    71 09             	r1 += r7			  ## vmalloc.c:141:47
  10272a:    12 62             	r2 = b[r1 + 0x1] (u)			  ## vmalloc.c:141:47
  10272c:    03 62             	r3 = b[r1 + 0x0] (u)			  ## vmalloc.c:141:47
  10272e:    e2 fd e0 00       	r0 = r0 & r14			  ## vmalloc.c:141:47
  102732:    08 62             	b[r1 + 0x0] = r0			  ## vmalloc.c:141:47
  102734:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## vmalloc.c:141:47
  102738:    22 fd e0 3a       	r2 = r3 & 0xe000			  ## vmalloc.c:141:47
  10273c:    50 b4             	r0 |= r2			  ## vmalloc.c:141:47
  10273e:    00 d2             	r0 = r0 >> 0x8			  ## vmalloc.c:141:47
  102740:    18 62             	b[r1 + 0x1] = r0			  ## vmalloc.c:141:47
  102742:    00 f6 00 b0       	r0 = [r11 + 0x0]			  ## vmalloc.c:142:16
  102746:    70 09             	r0 += r7			  ## vmalloc.c:142:47
  102748:    11 60             	r1 = b[r0 + 0x1] (u)			  ## vmalloc.c:142:47
  10274a:    02 60             	r2 = b[r0 + 0x0] (u)			  ## vmalloc.c:142:47
  10274c:    d8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x18)			  ## vmalloc.c:142:47
  102750:    0a 60             	b[r0 + 0x0] = r2			  ## vmalloc.c:142:47
  102752:    01 fd 20 2a       	r1 = r2 | 0x2000			  ## vmalloc.c:142:47
  102756:    09 d2             	r1 = r1 >> 0x8			  ## vmalloc.c:142:47
  102758:    19 60             	b[r0 + 0x1] = r1			  ## vmalloc.c:142:47
  10275a:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## vmalloc.c:144:9
  10275e:    70 b2             	r0 &= 0xffffffef			  ## vmalloc.c:144:9
  102760:    10 f6 00 c0       	[r12 + 0x0] = r0			  ## vmalloc.c:144:9
  102764:    f4 8f             	r4 += -0x1			  ## vmalloc.c:137:5
  102766:    27 80             	r7 += 0x2			  ## vmalloc.c:137:5
  102768:    15 80             	r5 += 0x1			  ## vmalloc.c:143:18
  10276a:    aa 39             	if (r4 != 0x0) goto -0xac <vmalloc_+0x70 : 1026c0 >
  10276c:    00 02             	r0 = [sp]
  10276e:    02 0a             	sp += 0x4
  102770:    5f 01             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:148:1


vfree_:
  102772:    7f 01             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:151:0
  102774:    cc ff 60 fe 00 00 	r12 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:151:0
  10277a:    02 f6 04 c0       	r2 = [r12 + 0x4]			  ## vmalloc.c:153:41
  10277e:    a0 b0             	r0 = r0 - r2			  ## vmalloc.c:153:32
  102780:    80 d1             	r0 = r0 >> 0x6			  ## vmalloc.c:155:10
  102782:    c2 ff fe ff ff 03 	r2 = 0x3fffffe <__stub_uECC_vli_cmp_unsafe+0x3EF9002 : 3fffffe >			  ## vmalloc.c:153:48
  102788:    e2 fd 20 70       	r7 = r0 & r2			  ## vmalloc.c:153:48
  10278c:    10 fc 7f 00       	r0 = r1 + 0x7f			  ## vmalloc.c:152:22
  102790:    c4 d1             	r4 = r0 >> 0x7			  ## vmalloc.c:152:22
  102792:    1a 70             	r10 = 0x1
  102794:    cf ff 08 fe 00 00 	r15 = 0xfe08 <physics_mem : fe08 >
  10279a:    cb ff e8 fc 00 00 	r11 = 0xfce8 <mask_log_e : fce8 >
  1027a0:    ce ff 00 04 1b 00 	r14 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >
  1027a6:    cd ff ff df 00 00 	r13 = 0xdfff <text_size+0x6FFE : dffe >
  1027ac:    c9 ff 62 2a 10 00 	r9 = 0x102a62 <$data.__2 : 102a62 >
  1027b2:    47 18             	goto 0x8e <vfree_+0xD0 : 102842 >
  1027b4:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## vmalloc.c:157:20
  1027b8:    70 09             	r0 += r7			  ## vmalloc.c:157:43
  1027ba:    11 60             	r1 = b[r0 + 0x1] (u)			  ## vmalloc.c:157:43
  1027bc:    00 60             	r0 = b[r0 + 0x0] (u)			  ## vmalloc.c:157:43
  1027be:    c8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:157:43
  1027c2:    0d f3 3c 00       	if ((r0 & 0x2000) == 0) goto 0x78 <vfree_+0xCC : 10283e >			  ## vmalloc.c:157:43
  1027c6:    88 fd 28 60       	r6 = uextra(r0, p:0x5, l:0x8)			  ## pmalloc.c:205:5
  1027ca:    b1 c0             	r1 = r6 << 0x2			  ## pmalloc.c:205:5
  1027cc:    80 fb f0 51       	r5 = r1 + r15			  ## pmalloc.c:205:5
  1027d0:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  1027d2:    20 fd 1f 09       	r0 = r0 & 0x1f			  ## pmalloc.c:205:5
  1027d6:    f8 fd 00 8a       	r8 = r10 << r0			  ## pmalloc.c:205:5
  1027da:    81 f0 05 00       	if ((r1 & r8) == 0) goto 0xa <vfree_+0x76 : 1027e8 >			  ## pmalloc.c:205:5
  1027de:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## pmalloc.c:205:5
  1027e2:    90 08             	r0 = r9			  ## pmalloc.c:205:5
  1027e4:    81 00             	call r1			  ## pmalloc.c:205:5
  1027e6:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  1027e8:    e0 fd 80 01       	r0 = r1 | r8			  ## pmalloc.c:206:38
  1027ec:    08 4a             	[r5 + 0x0] = r0			  ## pmalloc.c:206:38
  1027ee:    00 f6 40 f0       	r0 = [r15 + 0x40]			  ## pmalloc.c:207:24
  1027f2:    f8 fd 60 1a       	r1 = r10 << r6			  ## pmalloc.c:207:27
  1027f6:    50 b2             	r0 |= r1			  ## pmalloc.c:207:24
  1027f8:    10 f6 40 f0       	[r15 + 0x40] = r0			  ## pmalloc.c:207:24
  1027fc:    00 f7 54 f0       	r0 = h[r15 + 0x54] (u)			  ## pmalloc.c:208:5
  102800:    08 30             	if (r0 != 0x0) goto 0x10 <vfree_+0xA0 : 102812 >			  ## pmalloc.c:208:5
  102802:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## pmalloc.c:208:5
  102806:    c0 ff af 2a 10 00 	r0 = 0x102aaf <$data.__2+0x4C : 102aae >			  ## pmalloc.c:208:5
  10280c:    81 00             	call r1			  ## pmalloc.c:208:5
  10280e:    00 f7 54 f0       	r0 = h[r15 + 0x54] (u)			  ## pmalloc.c:208:5
  102812:    f0 8f             	r0 += -0x1			  ## pmalloc.c:209:27
  102814:    10 f7 54 f0       	h[r15 + 0x54] = r0			  ## pmalloc.c:209:27
  102818:    00 f4 10 e9       	[r14 + 0x0] |= 0x10			  ## vmalloc.c:160:13
  10281c:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## vmalloc.c:161:20
  102820:    70 09             	r0 += r7			  ## vmalloc.c:161:51
  102822:    11 60             	r1 = b[r0 + 0x1] (u)			  ## vmalloc.c:161:51
  102824:    02 60             	r2 = b[r0 + 0x0] (u)			  ## vmalloc.c:161:51
  102826:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:161:51
  10282a:    e2 fd d0 12       	r1 = r2 & r13			  ## vmalloc.c:161:51
  10282e:    09 60             	b[r0 + 0x0] = r1			  ## vmalloc.c:161:51
  102830:    09 d2             	r1 = r1 >> 0x8			  ## vmalloc.c:161:51
  102832:    19 60             	b[r0 + 0x1] = r1			  ## vmalloc.c:161:51
  102834:    00 f6 00 e0       	r0 = [r14 + 0x0]			  ## vmalloc.c:162:13
  102838:    70 b2             	r0 &= 0xffffffef			  ## vmalloc.c:162:13
  10283a:    10 f6 00 e0       	[r14 + 0x0] = r0			  ## vmalloc.c:162:13
  10283e:    f4 8f             	r4 += -0x1			  ## vmalloc.c:155:5
  102840:    27 80             	r7 += 0x2			  ## vmalloc.c:155:5
  102842:    b8 39             	if (r4 != 0x0) goto -0x90 <vfree_+0x42 : 1027b4 >
  102844:    5f 01             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:165:1


vmalloc_v2:
  102846:    7b 01             	[--sp] = {rets, r11-r4}			  ## vmalloc.c:167:0
  102848:    12 fc 7f 00       	r2 = r1 + 0x7f			  ## vmalloc.c:168:22
  10284c:    d2 d1             	r2 = r2 >> 0x7			  ## vmalloc.c:168:22
  10284e:    c3 ff e8 fc 00 00 	r3 = 0xfce8 <mask_log_e : fce8 >
  102854:    11 24             	if (r2 == 0x0) goto 0x22 <vmalloc_v2+0x32 : 102878 >
  102856:    cb ff 08 fe 00 00 	r11 = 0xfe08 <physics_mem : fe08 >
  10285c:    04 f7 54 b0       	r4 = h[r11 + 0x54] (u)			  ## pmalloc.c:131:38
  102860:    05 f7 56 b0       	r5 = h[r11 + 0x56] (u)			  ## pmalloc.c:131:12
  102864:    24 bb             	r4 = r5 - r4			  ## pmalloc.c:131:36
  102866:    24 f2 0e 20       	if (r4 >= r2) goto 0x1c <vmalloc_v2+0x40 : 102886 >			  ## vmalloc.c:178:9
  10286a:    01 46             	r1 = [r3 + 0x0]			  ## vmalloc.c:180:9
  10286c:    c0 ff 50 2b 10 00 	r0 = 0x102b50 <$data.__2+0xEE : 102b50 >			  ## vmalloc.c:180:9
  102872:    81 00             	call r1			  ## vmalloc.c:180:9
  102874:    f0 07             	r0 = -0x1
  102876:    5b 01             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1
  102878:    02 46             	r2 = [r3 + 0x0]			  ## vmalloc.c:175:9
  10287a:    c0 ff d3 2a 10 00 	r0 = 0x102ad3 <$data.__2+0x70 : 102ad2 >			  ## vmalloc.c:175:9
  102880:    82 00             	call r2			  ## vmalloc.c:175:9
  102882:    f0 07             	r0 = -0x1
  102884:    5b 01             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1
  102886:    c3 ff 60 fe 00 00 	r3 = 0xfe60 <v_mems : fe60 >
  10288c:    14 46             	r4 = [r3 + 0x4]			  ## vmalloc.c:169:41
  10288e:    24 b1             	r4 = r0 - r4			  ## vmalloc.c:169:32
  102890:    e4 d1             	r4 = r4 >> 0x7			  ## vmalloc.c:169:48
  102892:    03 46             	r3 = [r3 + 0x0]			  ## vmalloc.c:184:36
  102894:    c8 ff 00 04 1b 00 	r8 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >			  ## vmalloc.c:184:36
  10289a:    00 f4 10 89       	[r8 + 0x0] |= 0x10			  ## vmalloc.c:186:5
  10289e:    64 c0             	r4 = r4 << 0x1			  ## vmalloc.c:184:18
  1028a0:    34 09             	r4 += r3			  ## vmalloc.c:184:18
  1028a2:    ca ff ff ff 00 00 	r10 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >
  1028a8:    19 70             	r9 = 0x1
  1028aa:    2d 18             	goto 0x5a <vmalloc_v2+0xC0 : 102906 >
  1028ac:    07 f6 40 b0       	r7 = [r11 + 0x40]			  ## pmalloc.c:165:21
  1028b0:    a3 08             	r3 = r10
  1028b2:    24 2e             	if (r7 == 0x0) goto 0x48 <vmalloc_v2+0xB6 : 1028fc >
  1028b4:    e8 fd 00 37       	r3 = clz(r7)			  ## pmalloc.c:137:5
  1028b8:    67 fb 1f 39       	r7 = 0x1f - r3			  ## pmalloc.c:169:9
  1028bc:    a3 f6 00 b7       	r3 = [r11+r7<<2]			  ## pmalloc.c:173:9
  1028c0:    e8 fd 00 33       	r3 = clz(r3)			  ## pmalloc.c:137:5
  1028c4:    a6 f6 00 b7       	r6 = [r11+r7<<2]			  ## pmalloc.c:176:34
  1028c8:    63 fb 1f 39       	r3 = 0x1f - r3			  ## pmalloc.c:173:9
  1028cc:    f8 fd 30 59       	r5 = r9 << r3			  ## pmalloc.c:176:38
  1028d0:    e3 fd 50 16       	r1 = r6 & ~r5			  ## pmalloc.c:176:34
  1028d4:    d5 bb             	r5 = ~r5			  ## pmalloc.c:176:37
  1028d6:    b1 f6 00 b7       	[r11+r7<<2] = r1			  ## pmalloc.c:176:34
  1028da:    56 f1 08 00       	if ((r6 & r5) != 0) goto 0x10 <vmalloc_v2+0xA8 : 1028ee >			  ## pmalloc.c:176:34
  1028de:    01 f6 40 b0       	r1 = [r11 + 0x40]			  ## pmalloc.c:178:32
  1028e2:    f8 fd 70 59       	r5 = r9 << r7			  ## pmalloc.c:178:36
  1028e6:    e3 fd 50 11       	r1 = r1 & ~r5			  ## pmalloc.c:178:32
  1028ea:    11 f6 40 b0       	[r11 + 0x40] = r1			  ## pmalloc.c:178:32
  1028ee:    01 f7 54 b0       	r1 = h[r11 + 0x54] (u)			  ## pmalloc.c:180:31
  1028f2:    11 80             	r1 += 0x1			  ## pmalloc.c:180:31
  1028f4:    11 f7 54 b0       	h[r11 + 0x54] = r1			  ## pmalloc.c:180:31
  1028f8:    79 c1             	r1 = r7 << 0x5			  ## pmalloc.c:187:24
  1028fa:    13 09             	r3 += r1			  ## pmalloc.c:187:35
  1028fc:    01 fd 20 3a       	r1 = r3 | 0x2000			  ## vmalloc.c:191:28
  102900:    09 58             	h[r4 + 0x0] = r1			  ## vmalloc.c:191:16
  102902:    f2 8f             	r2 += -0x1			  ## vmalloc.c:187:5
  102904:    24 80             	r4 += 0x2			  ## vmalloc.c:192:14
  102906:    d2 35             	if (r2 != 0x0) goto -0x5c <vmalloc_v2+0x66 : 1028ac >			  ## vmalloc.c:187:5
  102908:    01 f6 00 80       	r1 = [r8 + 0x0]			  ## vmalloc.c:194:5
  10290c:    71 b2             	r1 &= 0xffffffef			  ## vmalloc.c:194:5
  10290e:    11 f6 00 80       	[r8 + 0x0] = r1			  ## vmalloc.c:194:5
  102912:    5b 01             	{pc, r11-r4} = [sp++]			  ## vmalloc.c:196:1


vfree_v2:
  102914:    7f 01             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:199:0
  102916:    c2 ff 60 fe 00 00 	r2 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:201:41
  10291c:    13 44             	r3 = [r2 + 0x4]			  ## vmalloc.c:201:41
  10291e:    02 44             	r2 = [r2 + 0x0]			  ## vmalloc.c:204:36
  102920:    c8 ff 00 04 1b 00 	r8 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >			  ## vmalloc.c:204:36
  102926:    00 f4 10 89       	[r8 + 0x0] |= 0x10			  ## vmalloc.c:206:5
  10292a:    e0 b0             	r0 = r0 - r3			  ## vmalloc.c:201:32
  10292c:    80 d1             	r0 = r0 >> 0x6			  ## vmalloc.c:204:18
  10292e:    c3 ff fe ff ff 03 	r3 = 0x3fffffe <__stub_uECC_vli_cmp_unsafe+0x3EF9002 : 3fffffe >			  ## vmalloc.c:201:48
  102934:    50 b7             	r0 &= r3			  ## vmalloc.c:201:48
  102936:    0f b4             	r15 = r2 + r0			  ## vmalloc.c:204:18
  102938:    10 fc 7f 00       	r0 = r1 + 0x7f			  ## vmalloc.c:200:22
  10293c:    c6 d1             	r6 = r0 >> 0x7			  ## vmalloc.c:200:22
  10293e:    1d 70             	r13 = 0x1
  102940:    ce ff 08 fe 00 00 	r14 = 0xfe08 <physics_mem : fe08 >
  102946:    cb ff e8 fc 00 00 	r11 = 0xfce8 <mask_log_e : fce8 >
  10294c:    c9 ff af 2a 10 00 	r9 = 0x102aaf <$data.__2+0x4C : 102aae >
  102952:    0c 70             	r12 = 0x0
  102954:    ca ff 62 2a 10 00 	r10 = 0x102a62 <$data.__2 : 102a62 >
  10295a:    2e 18             	goto 0x5c <vfree_v2+0xA4 : 1029b8 >
  10295c:    00 f7 00 f0       	r0 = h[r15 + 0x0] (u)			  ## vmalloc.c:209:13
  102960:    0d f3 29 00       	if ((r0 & 0x2000) == 0) goto 0x52 <vfree_v2+0xA2 : 1029b6 >			  ## vmalloc.c:209:13
  102964:    88 fd 28 40       	r4 = uextra(r0, p:0x5, l:0x8)			  ## pmalloc.c:205:5
  102968:    a1 c0             	r1 = r4 << 0x2			  ## pmalloc.c:205:5
  10296a:    80 fb e0 51       	r5 = r1 + r14			  ## pmalloc.c:205:5
  10296e:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  102970:    20 fd 1f 09       	r0 = r0 & 0x1f			  ## pmalloc.c:205:5
  102974:    f8 fd 00 7d       	r7 = r13 << r0			  ## pmalloc.c:205:5
  102978:    71 f0 05 00       	if ((r1 & r7) == 0) goto 0xa <vfree_v2+0x72 : 102986 >			  ## pmalloc.c:205:5
  10297c:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## pmalloc.c:205:5
  102980:    a0 08             	r0 = r10			  ## pmalloc.c:205:5
  102982:    81 00             	call r1			  ## pmalloc.c:205:5
  102984:    01 4a             	r1 = [r5 + 0x0]			  ## pmalloc.c:205:5
  102986:    e0 fd 70 01       	r0 = r1 | r7			  ## pmalloc.c:206:38
  10298a:    08 4a             	[r5 + 0x0] = r0			  ## pmalloc.c:206:38
  10298c:    00 f6 40 e0       	r0 = [r14 + 0x40]			  ## pmalloc.c:207:24
  102990:    f8 fd 40 1d       	r1 = r13 << r4			  ## pmalloc.c:207:27
  102994:    50 b2             	r0 |= r1			  ## pmalloc.c:207:24
  102996:    10 f6 40 e0       	[r14 + 0x40] = r0			  ## pmalloc.c:207:24
  10299a:    00 f7 54 e0       	r0 = h[r14 + 0x54] (u)			  ## pmalloc.c:208:5
  10299e:    06 30             	if (r0 != 0x0) goto 0xc <vfree_v2+0x98 : 1029ac >			  ## pmalloc.c:208:5
  1029a0:    01 f6 00 b0       	r1 = [r11 + 0x0]			  ## pmalloc.c:208:5
  1029a4:    90 08             	r0 = r9			  ## pmalloc.c:208:5
  1029a6:    81 00             	call r1			  ## pmalloc.c:208:5
  1029a8:    00 f7 54 e0       	r0 = h[r14 + 0x54] (u)			  ## pmalloc.c:208:5
  1029ac:    f0 8f             	r0 += -0x1			  ## pmalloc.c:209:27
  1029ae:    10 f7 54 e0       	h[r14 + 0x54] = r0			  ## pmalloc.c:209:27
  1029b2:    9c f7 02 f0       	h[r15 ++= 0x2] = r12			  ## vmalloc.c:213:20
  1029b6:    f6 8f             	r6 += -0x1			  ## vmalloc.c:207:5
  1029b8:    d1 3d             	if (r6 != 0x0) goto -0x5e <vfree_v2+0x48 : 10295c >
  1029ba:    00 f6 00 80       	r0 = [r8 + 0x0]			  ## vmalloc.c:217:5
  1029be:    70 b2             	r0 &= 0xffffffef			  ## vmalloc.c:217:5
  1029c0:    10 f6 00 80       	[r8 + 0x0] = r0			  ## vmalloc.c:217:5
  1029c4:    5f 01             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:218:1


vcopy_:
  1029c6:    76 01             	[--sp] = {rets, r6-r4}			  ## vmalloc.c:221:0
  1029c8:    c3 ff 60 fe 00 00 	r3 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:222:44
  1029ce:    14 46             	r4 = [r3 + 0x4]			  ## vmalloc.c:222:44
  1029d0:    05 46             	r5 = [r3 + 0x0]			  ## vmalloc.c:227:36
  1029d2:    c3 ff 00 04 1b 00 	r3 = 0x1b0400 <__stub_uECC_vli_cmp_unsafe+0xA9404 : 1b0400 >			  ## vmalloc.c:227:36
  1029d8:    00 f4 10 39       	[r3 + 0x0] |= 0x10			  ## vmalloc.c:231:5
  1029dc:    21 b3             	r1 = r1 - r4			  ## vmalloc.c:223:35
  1029de:    89 d1             	r1 = r1 >> 0x6			  ## vmalloc.c:228:18
  1029e0:    c6 ff fe ff ff 03 	r6 = 0x3fffffe <__stub_uECC_vli_cmp_unsafe+0x3EF9002 : 3fffffe >			  ## vmalloc.c:228:18
  1029e6:    51 bd             	r1 &= r6			  ## vmalloc.c:223:51
  1029e8:    51 09             	r1 += r5			  ## vmalloc.c:228:18
  1029ea:    20 b1             	r0 = r0 - r4			  ## vmalloc.c:222:35
  1029ec:    80 d1             	r0 = r0 >> 0x6			  ## vmalloc.c:227:18
  1029ee:    50 bd             	r0 &= r6			  ## vmalloc.c:222:51
  1029f0:    50 09             	r0 += r5			  ## vmalloc.c:227:18
  1029f2:    f2 87             	r2 += 0x7f			  ## vmalloc.c:225:17
  1029f4:    d2 d1             	r2 = r2 >> 0x7			  ## vmalloc.c:225:17
  1029f6:    04 70             	r4 = 0x0
  1029f8:    06 18             	goto 0xc <vcopy_+0x40 : 102a06 >
  1029fa:    05 52             	r5 = h[r1 + 0x0] (u)			  ## vmalloc.c:233:18
  1029fc:    0d 50             	h[r0 + 0x0] = r5			  ## vmalloc.c:233:16
  1029fe:    0c 52             	h[r1 + 0x0] = r4			  ## vmalloc.c:235:16
  102a00:    21 80             	r1 += 0x2			  ## vmalloc.c:236:15
  102a02:    20 80             	r0 += 0x2			  ## vmalloc.c:234:15
  102a04:    f2 8f             	r2 += -0x1			  ## vmalloc.c:232:17
  102a06:    f9 35             	if (r2 != 0x0) goto -0xe <vcopy_+0x34 : 1029fa >
  102a08:    00 46             	r0 = [r3 + 0x0]			  ## vmalloc.c:238:5
  102a0a:    70 b2             	r0 &= 0xffffffef			  ## vmalloc.c:238:5
  102a0c:    08 46             	[r3 + 0x0] = r0			  ## vmalloc.c:238:5
  102a0e:    56 01             	{pc, r6-r4} = [sp++]			  ## vmalloc.c:239:1


vmem_get_phy_adr:
  102a10:    c1 ff 60 fe 00 00 	r1 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:243:0
  102a16:    12 42             	r2 = [r1 + 0x4]			  ## vmalloc.c:244:71
  102a18:    a0 b0             	r0 = r0 - r2			  ## vmalloc.c:244:62
  102a1a:    01 42             	r1 = [r1 + 0x0]			  ## vmalloc.c:244:38
  102a1c:    80 d1             	r0 = r0 >> 0x6			  ## vmalloc.c:244:91
  102a1e:    c2 ff fe ff ff 03 	r2 = 0x3fffffe <__stub_uECC_vli_cmp_unsafe+0x3EF9002 : 3fffffe >			  ## vmalloc.c:244:78
  102a24:    50 b5             	r0 &= r2			  ## vmalloc.c:244:78
  102a26:    10 09             	r0 += r1			  ## vmalloc.c:244:91
  102a28:    11 60             	r1 = b[r0 + 0x1] (u)			  ## vmalloc.c:244:91
  102a2a:    00 60             	r0 = b[r0 + 0x0] (u)			  ## vmalloc.c:244:91
  102a2c:    c8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:244:91
  102a30:    c1 ff 08 fe 00 00 	r1 = 0xfe08 <physics_mem : fe08 >			  ## pmalloc.c:196:80
  102a36:    02 f7 50 10       	r2 = h[r1 + 0x50] (u)			  ## pmalloc.c:196:29
  102a3a:    03 fb ff 1f       	r3 = 0x1fff <_system_bss_end+0xB36 : 1ffe >			  ## vmalloc.c:244:31
  102a3e:    11 43             	r1 = [r1 + 0x44]			  ## pmalloc.c:196:80
  102a40:    50 b7             	r0 &= r3			  ## vmalloc.c:244:31
  102a42:    a0 b0             	r0 = r0 - r2			  ## pmalloc.c:196:27
  102a44:    c0 c1             	r0 = r0 << 0x7			  ## pmalloc.c:196:54
  102a46:    10 09             	r0 += r1			  ## pmalloc.c:196:66
  102a48:    20 00             	rts			  ## vmalloc.c:244:5


vmem_start:
  102a4a:    c0 ff 60 fe 00 00 	r0 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:248:0
  102a50:    10 40             	r0 = [r0 + 0x4]			  ## vmalloc.c:249:28
  102a52:    40 fb f0 0a       	r0 = r0 + 0xf000			  ## vmalloc.c:249:34
  102a56:    20 00             	rts			  ## vmalloc.c:249:5


vmem_end:
  102a58:    c0 ff 60 fe 00 00 	r0 = 0xfe60 <v_mems : fe60 >			  ## vmalloc.c:253:0
  102a5e:    20 40             	r0 = [r0 + 0x8]			  ## vmalloc.c:254:27
  102a60:    20 00             	rts			  ## vmalloc.c:254:5


$data.__2:
  102a62:	 41 53 53 45 52 54 3a 20         ASSERT: 
  102a6a:	 28 70 68 79 73 69 63 73         (physics
  102a72:	 5f 6d 65 6d 2e 6d 61 70         _mem.map
  102a7a:	 5b 70 61 67 65 20 2f 20         [page / 
  102a82:	 42 49 54 5f 53 49 5a 45         BIT_SIZE
  102a8a:	 5d 20 26 20 42 49 54 28         ] & BIT(
  102a92:	 70 61 67 65 20 26 20 42         page & B
  102a9a:	 49 54 5f 53 49 5a 45 5f         IT_SIZE_
  102aa2:	 4d 41 53 4b 29 29 20 3d         MASK)) =
  102aaa:	 3d 20 30 20 00 41 53 53         = 0 .ASS
  102ab2:	 45 52 54 3a 20 70 68 79         ERT: phy
  102aba:	 73 69 63 73 5f 6d 65 6d         sics_mem
  102ac2:	 2e 75 73 65 64 5f 70 61         .used_pa
  102aca:	 67 65 73 20 3e 20 30 20         ges > 0 
  102ad2:	 00 76 6d 61 6c 6c 6f 63         .vmalloc
  102ada:	 20 6e 6f 74 20 70 61 67          not pag
  102ae2:	 65 20 3a 20 30 78 25 78         e : 0x%x
  102aea:	 00 41 53 53 45 52 54 3a         .ASSERT:
  102af2:	 20 30 20 52 6f 6d 20 4e          0 Rom N
  102afa:	 6f 20 65 6e 6f 75 67 68         o enough
  102b02:	 20 70 68 79 73 69 63 73          physics
  102b0a:	 20 6d 65 6d 6f 72 79 00          memory.
  102b12:	 41 53 53 45 52 54 3a 20         ASSERT: 
  102b1a:	 76 5f 6d 65 6d 73 2e 6d         v_mems.m
  102b22:	 6d 75 5f 74 6c 62 5f 74         mu_tlb_t
  102b2a:	 61 67 5b 70 61 67 65 5f         ag[page_
  102b32:	 61 64 64 72 5d 2e 70 61         addr].pa
  102b3a:	 67 65 5f 65 6e 20 3d 3d         ge_en ==
  102b42:	 20 30 20 25 64 20 2f 20          0 %d / 
  102b4a:	 30 78 25 78 20 00 41 53         0x%x .AS
  102b52:	 53 45 52 54 3a 20 30 20         SERT: 0 
  102b5a:	 4e 6f 20 65 6e 6f 75 67         No enoug
  102b62:	 68 20 70 68 79 73 69 63         h physic
  102b6a:	 73 20 6d 65 6d 6f 72 79         s memory
  102b72:	 00                              .


sMassDescriptor:
  102b73:	 09 04 00 00 02 08 06 50         .......P
  102b7b:	 00 07 05 81 02 40 00 01         .....@..
  102b83:	 07 05 01 02 40 00 01            ....@..


SCSIInquiryData:
  102b8a:	 00 80 02 02 20 00 00 00         .... ...
  102b92:	 42 44 31 39 20 20 20 20         BD19    
  102b9a:	 55 42 4f 4f 54 31 2e 30         UBOOT1.0
  102ba2:	 30 20 20 20 20 20 20 20         0       
  102baa:	 31 2e 30 30                     1.00


scsi_mode_sense:
  102bae:	 03 00 00 00                     ....


sDeviceDescriptor:
  102bb2:	 12 01 10 01 00 00 00 40         .......@
  102bba:	 4a 4c 42 34 00 03 01 02         JLB4....
  102bc2:	 00 01                           ..


MANUFACTURE_STR:
  102bc4:	 1c 03 42 00 52 00 33 00         ..B.R.3.
  102bcc:	 34 00 55 00 42 00 4f 00         4.U.B.O.
  102bd4:	 4f 00 54 00 31 00 2e 00         O.T.1...
  102bdc:	 30 00 30 00                     0.0.


sConfigDescriptor:
  102be0:	 09 02 20 00 01 01 00 80         .. .....
  102be8:	 c8 00                           ..


usb_clr_intr_rxe:
  102bea:    74 01             	[--sp] = {rets, r4}			  ## usb_phy.c:168:0
  102bec:    c1 ff 24 4a 1e 00 	r1 = 0x1e4a24 <__stub_uECC_vli_cmp_unsafe+0xDDA28 : 1e4a24 >			  ## usb_phy.c:168:0
  102bf2:    02 42             	r2 = [r1 + 0x0]			  ## usb_phy.c:170:33
  102bf4:    13 42             	r3 = [r1 + 0x4]			  ## usb_phy.c:170:58
  102bf6:    f0 ef 08 00       	if (r0 == -0x1) goto 0x10 <usb_clr_intr_rxe+0x20 : 102c0a >			  ## usb_phy.c:170:58
  102bfa:    14 70             	r4 = 0x1			  ## usb_phy.c:174:22
  102bfc:    f8 fd 00 04       	r0 = r4 << r0			  ## usb_phy.c:174:22
  102c00:    1b c2             	r3 = r3 << 0x8			  ## usb_phy.c:170:68
  102c02:    52 b6             	r2 |= r3			  ## usb_phy.c:170:43
  102c04:    e3 fd 00 02       	r0 = r2 & ~r0			  ## usb_phy.c:174:18
  102c08:    01 18             	goto 0x2 <usb_clr_intr_rxe+0x22 : 102c0c >
  102c0a:    00 70             	r0 = 0x0
  102c0c:    02 04             	r2 = r0.b0 (u)			  ## usb_phy.c:176:37
  102c0e:    0a 42             	[r1 + 0x0] = r2			  ## usb_phy.c:176:26
  102c10:    00 d2             	r0 = r0 >> 0x8			  ## usb_phy.c:177:37
  102c12:    18 42             	[r1 + 0x4] = r0			  ## usb_phy.c:177:26
  102c14:    54 01             	{pc, r4} = [sp++]			  ## usb_phy.c:179:1


usb_clr_intr_txe:
  102c16:    74 01             	[--sp] = {rets, r4}			  ## usb_phy.c:146:0
  102c18:    c1 ff 1c 4a 1e 00 	r1 = 0x1e4a1c <__stub_uECC_vli_cmp_unsafe+0xDDA20 : 1e4a1c >			  ## usb_phy.c:146:0
  102c1e:    02 42             	r2 = [r1 + 0x0]			  ## usb_phy.c:148:33
  102c20:    13 42             	r3 = [r1 + 0x4]			  ## usb_phy.c:148:58
  102c22:    f0 ef 08 00       	if (r0 == -0x1) goto 0x10 <usb_clr_intr_txe+0x20 : 102c36 >			  ## usb_phy.c:148:58
  102c26:    14 70             	r4 = 0x1			  ## usb_phy.c:152:22
  102c28:    f8 fd 00 04       	r0 = r4 << r0			  ## usb_phy.c:152:22
  102c2c:    1b c2             	r3 = r3 << 0x8			  ## usb_phy.c:148:68
  102c2e:    52 b6             	r2 |= r3			  ## usb_phy.c:148:43
  102c30:    e3 fd 00 02       	r0 = r2 & ~r0			  ## usb_phy.c:152:18
  102c34:    01 18             	goto 0x2 <usb_clr_intr_txe+0x22 : 102c38 >
  102c36:    00 70             	r0 = 0x0
  102c38:    02 04             	r2 = r0.b0 (u)			  ## usb_phy.c:154:37
  102c3a:    0a 42             	[r1 + 0x0] = r2			  ## usb_phy.c:154:26
  102c3c:    00 d2             	r0 = r0 >> 0x8			  ## usb_phy.c:155:37
  102c3e:    18 42             	[r1 + 0x4] = r0			  ## usb_phy.c:155:26
  102c40:    54 01             	{pc, r4} = [sp++]			  ## usb_phy.c:157:1


usb_read_rxcsr:
  102c42:    c0 ff 50 4b 1e 00 	r0 = 0x1e4b50 <__stub_uECC_vli_cmp_unsafe+0xDDB54 : 1e4b50 >			  ## usb_phy.c:215:0
  102c48:    01 40             	r1 = [r0 + 0x0]			  ## usb_phy.c:220:29
  102c4a:    10 40             	r0 = [r0 + 0x4]			  ## usb_phy.c:220:62
  102c4c:    41 04             	r1 = r1.b0 (u)			  ## usb_phy.c:220:37
  102c4e:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:220:71
  102c50:    20 04             	r0 = r0.l (u)			  ## usb_phy.c:220:71
  102c52:    50 b2             	r0 |= r1			  ## usb_phy.c:220:45
  102c54:    20 00             	rts			  ## usb_phy.c:222:5


usb_g_bulk_read:
  102c56:    7c 01             	[--sp] = {rets, r12-r4}			  ## usb_phy.c:405:0
  102c58:    15 08             	r5 = r1			  ## usb_phy.c:405:0
  102c5a:    07 08             	r7 = r0			  ## usb_phy.c:405:0
  102c5c:    39 2a             	if (r5 == 0x0) goto 0x72 <usb_g_bulk_read+0x7A : 102cd0 >			  ## usb_phy.c:405:0
  102c5e:    c0 ff 50 14 00 00 	r0 = 0x1450 <ep_raddr : 1450 >			  ## usb_phy.c:405:0
  102c64:    08 f6 00 00       	r8 = [r0 + 0x0]			  ## usb_phy.c:405:0
  102c68:    09 70             	r9 = 0x0			  ## usb_phy.c:405:0
  102c6a:    1a 70             	r10 = 0x1			  ## usb_phy.c:405:0
  102c6c:    01 34             	if (r2 != 0x0) goto 0x2 <usb_g_bulk_read+0x1A : 102c70 >			  ## usb_phy.c:405:0
  102c6e:    0a 70             	r10 = 0x0			  ## usb_phy.c:405:0
  102c70:    cb ff 50 4b 1e 00 	r11 = 0x1e4b50 <__stub_uECC_vli_cmp_unsafe+0xDDB54 : 1e4b50 >			  ## usb_phy.c:405:0
  102c76:    cc ff fe ff ff 00 	r12 = 0xfffffe <__stub_uECC_vli_cmp_unsafe+0xEF9002 : fffffe >			  ## usb_phy.c:405:0
  102c7c:    00 f6 00 b0       	r0 = [r11 + 0x0]			  ## usb_phy.c:309:18
  102c80:    00 f3 22 00       	if ((r0 & 0x1) == 0) goto 0x44 <usb_g_bulk_read+0x72 : 102cc8 >			  ## usb_phy.c:309:18
  102c84:    00 f6 08 b0       	r0 = [r11 + 0x8]			  ## usb_phy.c:310:28
  102c88:    01 f6 0c b0       	r1 = [r11 + 0xc]			  ## usb_phy.c:310:50
  102c8c:    09 c2             	r1 = r1 << 0x8			  ## usb_phy.c:310:60
  102c8e:    e0 fd 00 61       	r6 = r1 | r0			  ## usb_phy.c:310:38
  102c92:    1a 2c             	if (r6 == 0x0) goto 0x34 <usb_g_bulk_read+0x72 : 102cc8 >
  102c94:    d6 17             	call -0x54 <usb_read_rxcsr : 102c42 >			  ## usb_phy.c:330:21
  102c96:    04 08             	r4 = r0			  ## usb_phy.c:330:21
  102c98:    05 2e             	if (r7 == 0x0) goto 0xa <usb_g_bulk_read+0x4E : 102ca4 >
  102c9a:    70 08             	r0 = r7			  ## usb_phy.c:344:13
  102c9c:    81 08             	r1 = r8			  ## usb_phy.c:344:13
  102c9e:    62 08             	r2 = r6			  ## usb_phy.c:344:13
  102ca0:    bf f3 ce e9       	call -0x2c64 <memmove : 100040 >			  ## usb_phy.c:344:13
  102ca4:    20 fd 8b 49       	r0 = r4 & 0x8b			  ## usb_phy.c:210:28
  102ca8:    10 b2             	r0 |= 0x10			  ## usb_phy.c:210:28
  102caa:    10 f6 00 b0       	[r11 + 0x0] = r0			  ## usb_phy.c:210:20
  102cae:    20 d2             	r0 = r4 >> 0x8			  ## usb_phy.c:211:28
  102cb0:    e2 fd c0 00       	r0 = r0 & r12			  ## usb_phy.c:211:28
  102cb4:    81 bf             	r1 = r7 + r6			  ## usb_phy.c:350:17
  102cb6:    10 f6 04 b0       	[r11 + 0x4] = r0			  ## usb_phy.c:211:20
  102cba:    01 3e             	if (r7 != 0x0) goto 0x2 <usb_g_bulk_read+0x68 : 102cbe >			  ## usb_phy.c:211:20
  102cbc:    01 70             	r1 = 0x0
  102cbe:    69 09             	r9 += r6			  ## usb_phy.c:348:14
  102cc0:    a5 bb             	r5 = r5 - r6			  ## usb_phy.c:347:13
  102cc2:    10 70             	r0 = 0x1
  102cc4:    17 08             	r7 = r1
  102cc6:    01 18             	goto 0x2 <usb_g_bulk_read+0x74 : 102cca >
  102cc8:    a0 08             	r0 = r10
  102cca:    03 2a             	if (r5 == 0x0) goto 0x6 <usb_g_bulk_read+0x7C : 102cd2 >
  102ccc:    d7 31             	if (r0 != 0x0) goto -0x52 <usb_g_bulk_read+0x26 : 102c7c >
  102cce:    01 18             	goto 0x2 <usb_g_bulk_read+0x7C : 102cd2 >
  102cd0:    09 70             	r9 = 0x0
  102cd2:    90 08             	r0 = r9			  ## usb_phy.c:406:5
  102cd4:    5c 01             	{pc, r12-r4} = [sp++]			  ## usb_phy.c:406:5


rbc_get_length:
  102cd6:    c0 ff f4 13 00 00 	r0 = 0x13f4 <cbw : 13f4 >			  ## msd_upgrade.c:51:0
  102cdc:    51 61             	r1 = b[r0 + 0x15] (u)			  ## msd_upgrade.c:63:12
  102cde:    60 61             	r0 = b[r0 + 0x16] (u)			  ## msd_upgrade.c:63:12
  102ce0:    c8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x8)			  ## msd_upgrade.c:63:12
  102ce4:    20 00             	rts			  ## msd_upgrade.c:63:5


msd_usb2mcu:
  102ce6:    12 70             	r2 = 0x1			  ## msd.c:135:0
  102ce8:    b6 1f             	goto -0x94 <usb_g_bulk_read : 102c56 >			  ## msd.c:136:12


usb_read_txcsr:
  102cea:    c0 ff 44 4b 1e 00 	r0 = 0x1e4b44 <__stub_uECC_vli_cmp_unsafe+0xDDB48 : 1e4b44 >			  ## usb_phy.c:196:0
  102cf0:    01 40             	r1 = [r0 + 0x0]			  ## usb_phy.c:201:22
  102cf2:    10 40             	r0 = [r0 + 0x4]			  ## usb_phy.c:201:42
  102cf4:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:201:50
  102cf6:    50 b2             	r0 |= r1			  ## usb_phy.c:201:30
  102cf8:    20 00             	rts			  ## usb_phy.c:203:5


msd_mcu2usb:
  102cfa:    7a 01             	[--sp] = {rets, r10-r4}			  ## msd.c:139:0
  102cfc:    c2 ff 40 14 00 00 	r2 = 0x1440 <ep_taddr : 1440 >			  ## msd.c:139:0
  102d02:    0a f6 00 20       	r10 = [r2 + 0x0]			  ## msd.c:139:0
  102d06:    18 08             	r8 = r1			  ## msd.c:139:0
  102d08:    06 08             	r6 = r0			  ## msd.c:139:0
  102d0a:    c4 ff 44 4b 1e 00 	r4 = 0x1e4b44 <__stub_uECC_vli_cmp_unsafe+0xDDB48 : 1e4b44 >			  ## msd.c:139:0
  102d10:    49 fc c8 cc       	r9 = r4 + -0x3338			  ## msd.c:139:0
  102d14:    87 08             	r7 = r8			  ## msd.c:139:0
  102d16:    04 18             	goto 0x8 <msd_mcu2usb+0x26 : 102d20 >			  ## msd.c:139:0
  102d18:    51 b1             	r1 &= r0			  ## usb_phy.c:191:28
  102d1a:    09 48             	[r4 + 0x0] = r1			  ## usb_phy.c:191:20
  102d1c:    00 d2             	r0 = r0 >> 0x8			  ## usb_phy.c:192:28
  102d1e:    18 48             	[r4 + 0x4] = r0			  ## usb_phy.c:192:20
  102d20:    e4 17             	call -0x38 <usb_read_txcsr : 102cea >			  ## usb_phy.c:373:21
  102d22:    2e f3 08 00       	if ((r0 & 0x4000) != 0) goto 0x10 <msd_mcu2usb+0x3C : 102d36 >
  102d26:    a1 7f             	r1 = 0xfa
  102d28:    22 f3 f6 0f       	if ((r0 & 0x4) != 0) goto -0x14 <msd_mcu2usb+0x1E : 102d18 >
  102d2c:    c1 7f             	r1 = 0xfc
  102d2e:    21 f3 f3 0f       	if ((r0 & 0x2) != 0) goto -0x1a <msd_mcu2usb+0x1E : 102d18 >
  102d32:    20 f3 f5 0f       	if ((r0 & 0x1) != 0) goto -0x16 <msd_mcu2usb+0x26 : 102d20 >
  102d36:    75 08             	r5 = r7			  ## usb_phy.c:392:24
  102d38:    07 e4 01 30       	if (r7 < 0x40) goto 0x2 <msd_mcu2usb+0x44 : 102d3e >			  ## usb_phy.c:392:24
  102d3c:    05 74             	r5 = 0x40			  ## usb_phy.c:392:24
  102d3e:    05 2c             	if (r6 == 0x0) goto 0xa <msd_mcu2usb+0x50 : 102d4a >
  102d40:    a0 08             	r0 = r10			  ## usb_phy.c:394:13
  102d42:    61 08             	r1 = r6			  ## usb_phy.c:394:13
  102d44:    52 08             	r2 = r5			  ## usb_phy.c:394:13
  102d46:    bf f3 7b e9       	call -0x2d0a <memmove : 100040 >			  ## usb_phy.c:394:13
  102d4a:    15 f6 00 90       	[r9 + 0x0] = r5			  ## usb_phy.c:360:11
  102d4e:    cd 17             	call -0x66 <usb_read_txcsr : 102cea >			  ## usb_phy.c:361:17
  102d50:    21 fd fe 09       	r1 = r0 & 0xfe			  ## usb_phy.c:191:28
  102d54:    11 b0             	r1 |= 0x1			  ## usb_phy.c:191:28
  102d56:    09 48             	[r4 + 0x0] = r1			  ## usb_phy.c:191:20
  102d58:    01 d2             	r1 = r0 >> 0x8			  ## usb_phy.c:192:28
  102d5a:    40 bd             	r0 = r6 + r5			  ## usb_phy.c:399:17
  102d5c:    19 48             	[r4 + 0x4] = r1			  ## usb_phy.c:192:20
  102d5e:    01 3c             	if (r6 != 0x0) goto 0x2 <msd_mcu2usb+0x68 : 102d62 >			  ## usb_phy.c:192:20
  102d60:    00 70             	r0 = 0x0
  102d62:    67 bf             	r7 = r7 - r5			  ## usb_phy.c:397:13
  102d64:    06 08             	r6 = r0
  102d66:    dc 3f             	if (r7 != 0x0) goto -0x48 <msd_mcu2usb+0x26 : 102d20 >
  102d68:    80 08             	r0 = r8			  ## msd.c:140:5
  102d6a:    5a 01             	{pc, r10-r4} = [sp++]			  ## msd.c:140:5


stall_inep:
  102d6c:    34 00             	[--sp] = rets			  ## msd.c:174:0
  102d6e:    c0 ff 44 4b 1e 00 	r0 = 0x1e4b44 <__stub_uECC_vli_cmp_unsafe+0xDDB48 : 1e4b44 >			  ## msd.c:174:0
  102d74:    c0 f4 10 09       	[r0 + 0x0] = 0x10			  ## usb_phy.c:191:20
  102d78:    c1 f4 00 09       	[r0 + 0x4] = 0x0			  ## usb_phy.c:192:20
  102d7c:    b6 17             	call -0x94 <usb_read_txcsr : 102cea >			  ## msd.c:183:14
  102d7e:    24 f3 fd 0f       	if ((r0 & 0x10) != 0) goto -0x6 <stall_inep+0x10 : 102d7c >			  ## msd.c:183:13
  102d82:    30 00             	pc = [sp++]			  ## msd.c:187:1


unknow:
  102d84:    34 00             	[--sp] = rets			  ## msd.c:202:0
  102d86:    0b 20             	if (r0 == 0x0) goto 0x16 <unknow+0x1A : 102d9e >			  ## msd.c:203:9
  102d88:    c0 ff 50 4b 1e 00 	r0 = 0x1e4b50 <__stub_uECC_vli_cmp_unsafe+0xDDB54 : 1e4b50 >
  102d8e:    c0 f4 20 09       	[r0 + 0x0] = 0x20			  ## usb_phy.c:210:20
  102d92:    c1 f4 00 09       	[r0 + 0x4] = 0x0			  ## usb_phy.c:211:20
  102d96:    55 17             	call -0x156 <usb_read_rxcsr : 102c42 >			  ## msd.c:196:14
  102d98:    25 f3 fd 0f       	if ((r0 & 0x20) != 0) goto -0x6 <unknow+0x12 : 102d96 >			  ## msd.c:196:14
  102d9c:    01 18             	goto 0x2 <unknow+0x1C : 102da0 >			  ## msd.c:196:14
  102d9e:    e6 17             	call -0x34 <stall_inep : 102d6c >			  ## msd.c:206:9
  102da0:    c0 ff 13 14 00 00 	r0 = 0x1413 <cbw+0x1E : 1412 >			  ## msd.c:210:20
  102da6:    01 70             	r1 = 0x0			  ## msd.c:210:20
  102da8:    b9 60             	b[r0 + 0xb] = r1			  ## msd.c:209:25
  102daa:    a9 60             	b[r0 + 0xa] = r1			  ## msd.c:209:25
  102dac:    99 60             	b[r0 + 0x9] = r1			  ## msd.c:209:25
  102dae:    89 60             	b[r0 + 0x8] = r1			  ## msd.c:209:25
  102db0:    11 70             	r1 = 0x1			  ## msd.c:209:25
  102db2:    c9 60             	b[r0 + 0xc] = r1			  ## msd.c:210:20
  102db4:    c0 ff 20 14 00 00 	r0 = 0x1420 <msd_status.0 : 1420 >			  ## msd.c:211:23
  102dba:    21 70             	r1 = 0x2			  ## msd.c:211:23
  102dbc:    09 60             	b[r0 + 0x0] = r1			  ## msd.c:211:23
  102dbe:    30 00             	pc = [sp++]			  ## msd.c:212:1


usb_slave_mode:
  102dc0:    ec 0b             	sp += -0x28			  ## usb_device.c:15:0
  102dc2:    c0 ff ac 14 00 00 	r0 = 0x14ac <usb_interrupt_rx : 14ac >			  ## usb_onchip.c:89:5
  102dc8:    01 70             	r1 = 0x0			  ## usb_onchip.c:89:5
  102dca:    c2 71             	r2 = 0x1c			  ## usb_onchip.c:89:5
  102dcc:    07 70             	r7 = 0x0			  ## usb_onchip.c:89:5
  102dce:    bf f3 ce e9       	call -0x2c64 <memset : 10016e >			  ## usb_onchip.c:89:5
  102dd2:    c0 ff 90 14 00 00 	r0 = 0x1490 <usb_interrupt_tx : 1490 >			  ## usb_onchip.c:90:5
  102dd8:    01 70             	r1 = 0x0			  ## usb_onchip.c:90:5
  102dda:    c2 71             	r2 = 0x1c			  ## usb_onchip.c:90:5
  102ddc:    bf f3 c7 e9       	call -0x2c72 <memset : 10016e >			  ## usb_onchip.c:90:5
  102de0:    c1 ff 1a 33 10 00 	r1 = 0x10331a <usb_device_isr : 10331a >			  ## usb_onchip.c:93:5
  102de6:    90 70             	r0 = 0x9			  ## usb_onchip.c:93:5
  102de8:    12 70             	r2 = 0x1			  ## usb_onchip.c:93:5
  102dea:    80 f3 c6 11       	call 0x238c <HWI_Install : 10517a >			  ## usb_onchip.c:93:5
  102dee:    c0 ff 00 54 1e 00 	r0 = 0x1e5400 <__stub_uECC_vli_cmp_unsafe+0xDE404 : 1e5400 >			  ## usb_onchip.c:93:5
  102df4:    01 40             	r1 = [r0 + 0x0]			  ## usb_onchip.c:95:21
  102df6:    71 b6             	r1 &= 0xffffefff			  ## usb_onchip.c:95:21
  102df8:    09 40             	[r0 + 0x0] = r1			  ## usb_onchip.c:95:21
  102dfa:    00 f4 20 0a       	[r0 + 0x0] |= 0x2000			  ## usb_onchip.c:96:21
  102dfe:    04 fc 00 c4       	r4 = r0 + -0x3c00			  ## usb_onchip.c:96:21
  102e02:    01 48             	r1 = [r4 + 0x0]			  ## usb_onchip.c:97:18
  102e04:    02 fb ca bf       	r2 = -0x4036 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF4FCE : ffffffffffffbfca >			  ## usb_onchip.c:97:18
  102e08:    51 b5             	r1 &= r2			  ## usb_onchip.c:97:18
  102e0a:    09 48             	[r4 + 0x0] = r1			  ## usb_onchip.c:97:18
  102e0c:    1f 48             	[r4 + 0x4] = r7			  ## usb_onchip.c:98:18
  102e0e:    00 f4 01 49       	[r4 + 0x0] |= 0x1			  ## usb_onchip.c:100:18
  102e12:    01 40             	r1 = [r0 + 0x0]			  ## usb_onchip.c:102:5
  102e14:    71 b3             	r1 &= 0xffffffbf			  ## usb_onchip.c:102:5
  102e16:    09 40             	[r0 + 0x0] = r1			  ## usb_onchip.c:102:5
  102e18:    00 f4 80 09       	[r0 + 0x0] |= 0x80			  ## usb_onchip.c:103:5
  102e1c:    00 f4 10 09       	[r0 + 0x0] |= 0x10			  ## usb_onchip.c:105:5
  102e20:    01 40             	r1 = [r0 + 0x0]			  ## usb_onchip.c:106:5
  102e22:    f1 b2             	r1 &= 0xffffffdf			  ## usb_onchip.c:106:5
  102e24:    09 40             	[r0 + 0x0] = r1			  ## usb_onchip.c:106:5
  102e26:    00 f4 34 49       	[r4 + 0x0] |= 0x34			  ## usb_onchip.c:108:18
  102e2a:    40 70             	r0 = 0x4			  ## usb_phy.c:133:27
  102e2c:    45 fc 04 32       	r5 = r4 + 0x3204
  102e30:    a8 4a             	[r5 + 0x28] = r0			  ## usb_phy.c:133:27
  102e32:    f0 07             	r0 = -0x1			  ## usb_onchip.c:111:5
  102e34:    da 16             	call -0x24c <usb_clr_intr_rxe : 102bea >			  ## usb_onchip.c:111:5
  102e36:    f0 07             	r0 = -0x1			  ## usb_onchip.c:112:5
  102e38:    ee 16             	call -0x224 <usb_clr_intr_txe : 102c16 >			  ## usb_onchip.c:112:5
  102e3a:    c0 f4 40 59       	[r5 + 0x0] = 0x40			  ## usb_phy.c:36:23
  102e3e:    00 f4 08 4a       	[r4 + 0x0] |= 0x800			  ## usb_onchip.c:121:18
  102e42:    c0 ff 40 10 00 00 	r0 = 0x1040 <ep0_dma_buffer : 1040 >			  ## usb_phy.c:289:25
  102e48:    78 48             	[r4 + 0x1c] = r0			  ## usb_phy.c:289:25
  102e4a:    c1 ff 3c 14 00 00 	r1 = 0x143c <ep0_addr : 143c >			  ## usb_phy.c:290:18
  102e50:    08 42             	[r1 + 0x0] = r0			  ## usb_phy.c:290:18
  102e52:    c0 ff 80 10 00 00 	r0 = 0x1080 <ep1_dma_buffer : 1080 >
  102e58:    88 48             	[r4 + 0x20] = r0			  ## usb_phy.c:276:12
  102e5a:    c1 ff 40 14 00 00 	r1 = 0x1440 <ep_taddr : 1440 >			  ## usb_phy.c:277:22
  102e60:    08 42             	[r1 + 0x0] = r0			  ## usb_phy.c:277:22
  102e62:    00 84             	r0 += 0x40			  ## usb_phy.c:277:22
  102e64:    98 48             	[r4 + 0x24] = r0			  ## usb_phy.c:295:12
  102e66:    c1 ff 50 14 00 00 	r1 = 0x1450 <ep_raddr : 1450 >			  ## usb_phy.c:296:22
  102e6c:    08 42             	[r1 + 0x0] = r0			  ## usb_phy.c:296:22
  102e6e:    60 a0             	r0 = sp + 6			  ## usb_phy.c:296:22
  102e70:    10 80             	r0 += 0x1
  102e72:    08 02             	[sp] = r0
  102e74:    c5 ff f4 13 00 00 	r5 = 0x13f4 <cbw : 13f4 >
  102e7a:    cf ff 55 53 42 43 	r15 = 0x43425355 <__stub_uECC_vli_cmp_unsafe+0x4331E358 : 43425354 >
  102e80:    c6 ff 13 14 00 00 	r6 = 0x1413 <cbw+0x1E : 1412 >
  102e86:    c8 ff 24 14 00 00 	r8 = 0x1424 <hook_usb_scsi : 1424 >
  102e8c:    c9 ff 20 14 00 00 	r9 = 0x1420 <msd_status.0 : 1420 >
  102e92:    cd ff 21 14 00 00 	r13 = 0x1421 <msd_status.0 : 1420 >
  102e98:    ca ff 22 14 00 00 	r10 = 0x1422 <msd_status.2 : 1422 >
  102e9e:    3b 75             	r11 = 0x53
  102ea0:    2e 74             	r14 = 0x42
  102ea2:    5c 75             	r12 = 0x55
  102ea4:    80 f3 dd 13       	call 0x27ba <wdt_clr : 105662 >			  ## usb_device.c:23:9
  102ea8:    3f 6a             	b[r5 + 0x3] = r7			  ## msd.c:144:23
  102eaa:    2f 6a             	b[r5 + 0x2] = r7			  ## msd.c:144:23
  102eac:    1f 6a             	b[r5 + 0x1] = r7			  ## msd.c:144:23
  102eae:    0f 6a             	b[r5 + 0x0] = r7			  ## msd.c:144:23
  102eb0:    f1 71             	r1 = 0x1f			  ## msd.c:145:18
  102eb2:    02 70             	r2 = 0x0			  ## msd.c:145:18
  102eb4:    50 08             	r0 = r5			  ## msd.c:145:18
  102eb6:    cf 16             	call -0x262 <usb_g_bulk_read : 102c56 >			  ## msd.c:145:18
  102eb8:    32 6a             	r2 = b[r5 + 0x3] (u)			  ## msd.c:149:13
  102eba:    23 6a             	r3 = b[r5 + 0x2] (u)			  ## msd.c:149:13
  102ebc:    14 6a             	r4 = b[r5 + 0x1] (u)			  ## msd.c:149:13
  102ebe:    01 6a             	r1 = b[r5 + 0x0] (u)			  ## msd.c:149:13
  102ec0:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:149:13
  102ec4:    c8 fd 40 14       	r1 <= insert(r4, p:0x8, l:0x8)			  ## msd.c:149:13
  102ec8:    d0 fd 80 13       	r1 <= insert(r3, p:0x10, l:0x10)			  ## msd.c:149:13
  102ecc:    eb 21             	if (r0 == 0x0) goto -0x2a <usb_slave_mode+0xE4 : 102ea4 >			  ## msd.c:146:9
  102ece:    f1 f2 e9 1f       	if (r1 != r15) goto -0x2e <usb_slave_mode+0xE4 : 102ea4 >
  102ed2:    70 6a             	r0 = b[r5 + 0x7] (u)			  ## msd.c:155:23
  102ed4:    51 6a             	r1 = b[r5 + 0x5] (u)			  ## msd.c:155:23
  102ed6:    42 6a             	r2 = b[r5 + 0x4] (u)			  ## msd.c:155:23
  102ed8:    63 6a             	r3 = b[r5 + 0x6] (u)			  ## msd.c:155:23
  102eda:    78 6c             	b[r6 + 0x7] = r0			  ## msd.c:155:17
  102edc:    59 6c             	b[r6 + 0x5] = r1			  ## msd.c:155:17
  102ede:    4a 6c             	b[r6 + 0x4] = r2			  ## msd.c:155:17
  102ee0:    c8 fd 40 30       	r3 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:155:23
  102ee4:    d0 fd 80 23       	r2 <= insert(r3, p:0x10, l:0x10)			  ## msd.c:155:23
  102ee8:    10 d4             	r0 = r2 >> 0x10			  ## msd.c:155:17
  102eea:    68 6c             	b[r6 + 0x6] = r0			  ## msd.c:155:17
  102eec:    b0 6a             	r0 = b[r5 + 0xb] (u)			  ## msd.c:156:31
  102eee:    91 6a             	r1 = b[r5 + 0x9] (u)			  ## msd.c:156:31
  102ef0:    83 6a             	r3 = b[r5 + 0x8] (u)			  ## msd.c:156:31
  102ef2:    a4 6a             	r4 = b[r5 + 0xa] (u)			  ## msd.c:156:31
  102ef4:    b8 6c             	b[r6 + 0xb] = r0			  ## msd.c:156:25
  102ef6:    99 6c             	b[r6 + 0x9] = r1			  ## msd.c:156:25
  102ef8:    8b 6c             	b[r6 + 0x8] = r3			  ## msd.c:156:25
  102efa:    02 f6 00 80       	r2 = [r8 + 0x0]			  ## msd_upgrade.c:135:9
  102efe:    c8 fd 40 40       	r4 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:156:31
  102f02:    d0 fd 80 34       	r3 <= insert(r4, p:0x10, l:0x10)			  ## msd.c:156:31
  102f06:    18 d4             	r0 = r3 >> 0x10			  ## msd.c:156:25
  102f08:    a8 6c             	b[r6 + 0xa] = r0			  ## msd.c:156:25
  102f0a:    04 24             	if (r2 == 0x0) goto 0x8 <usb_slave_mode+0x154 : 102f14 >			  ## msd.c:156:25
  102f0c:    81 a1             	r1 = sp + 24
  102f0e:    50 08             	r0 = r5			  ## msd_upgrade.c:135:26
  102f10:    82 00             	call r2			  ## msd_upgrade.c:135:26
  102f12:    af 30             	if (r0 != 0x0) goto 0x15e <usb_slave_mode+0x2B2 : 103072 >			  ## msd_upgrade.c:135:26
  102f14:    f0 6a             	r0 = b[r5 + 0xf] (u)			  ## msd_upgrade.c:139:18
  102f16:    00 ff fd 00 21 00 	if (r0 == 0xfd) goto 0x42 <usb_slave_mode+0x19E : 102f5e >			  ## msd_upgrade.c:139:5
  102f1c:    01 ff fb 00 42 00 	if (r0 != 0xfb) goto 0x84 <usb_slave_mode+0x1E6 : 102fa6 >
  102f22:    00 6b             	r0 = b[r5 + 0x10] (u)			  ## msd_upgrade.c:143:22
  102f24:    80 e0 7a 00       	if (r0 == 0x8) goto 0xf4 <usb_slave_mode+0x25C : 10301c >			  ## msd_upgrade.c:143:9
  102f28:    60 e0 73 10       	if (r0 != 0x6) goto 0xe6 <usb_slave_mode+0x252 : 103012 >
  102f2c:    40 6b             	r0 = b[r5 + 0x14] (u)			  ## msd_upgrade.c:43:5
  102f2e:    31 6b             	r1 = b[r5 + 0x13] (u)			  ## msd_upgrade.c:43:5
  102f30:    22 6b             	r2 = b[r5 + 0x12] (u)			  ## msd_upgrade.c:43:5
  102f32:    13 6b             	r3 = b[r5 + 0x11] (u)			  ## msd_upgrade.c:43:5
  102f34:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  102f38:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  102f3c:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  102f40:    30 fb 00 c3       	r12 = rev8(r3)			  ## msd_upgrade.c:46:12
  102f44:    c8 16             	call -0x270 <rbc_get_length : 102cd6 >			  ## msd_upgrade.c:82:11
  102f46:    04 08             	r4 = r0			  ## msd_upgrade.c:82:11
  102f48:    c0 08             	r0 = r12			  ## msd_upgrade.c:85:5
  102f4a:    41 08             	r1 = r4			  ## msd_upgrade.c:85:5
  102f4c:    cc 16             	call -0x268 <msd_usb2mcu : 102ce6 >			  ## msd_upgrade.c:85:5
  102f4e:    21 05             	r1 = r4.l (u)			  ## msd_upgrade.c:86:5
  102f50:    c0 08             	r0 = r12			  ## msd_upgrade.c:86:5
  102f52:    5c 75             	r12 = 0x55			  ## msd_upgrade.c:86:5
  102f54:    80 f3 e7 13       	call 0x27ce <CrcDecode : 105726 >			  ## msd_upgrade.c:86:5
  102f58:    17 f6 00 80       	[r8 + 0x0] = r7			  ## msd_upgrade.c:146:27
  102f5c:    8a 18             	goto 0x114 <usb_slave_mode+0x2B2 : 103072 >			  ## msd_upgrade.c:146:27
  102f5e:    00 6b             	r0 = b[r5 + 0x10] (u)			  ## msd_upgrade.c:158:22
  102f60:    70 e0 57 10       	if (r0 != 0x7) goto 0xae <usb_slave_mode+0x252 : 103012 >			  ## msd_upgrade.c:158:22
  102f64:    40 6b             	r0 = b[r5 + 0x14] (u)			  ## msd_upgrade.c:43:5
  102f66:    31 6b             	r1 = b[r5 + 0x13] (u)			  ## msd_upgrade.c:43:5
  102f68:    22 6b             	r2 = b[r5 + 0x12] (u)			  ## msd_upgrade.c:43:5
  102f6a:    13 6b             	r3 = b[r5 + 0x11] (u)			  ## msd_upgrade.c:43:5
  102f6c:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  102f70:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  102f74:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  102f78:    30 fb 00 43       	r4 = rev8(r3)			  ## msd_upgrade.c:46:12
  102f7c:    ac 16             	call -0x2a8 <rbc_get_length : 102cd6 >			  ## msd_upgrade.c:95:11
  102f7e:    ae 08             	r14 = r10			  ## msd_upgrade.c:95:11
  102f80:    da 08             	r10 = r13			  ## msd_upgrade.c:95:11
  102f82:    0d 08             	r13 = r0			  ## msd_upgrade.c:95:11
  102f84:    2c 04             	r12 = r0.l (u)			  ## msd_upgrade.c:97:5
  102f86:    40 08             	r0 = r4			  ## msd_upgrade.c:97:5
  102f88:    c1 08             	r1 = r12			  ## msd_upgrade.c:97:5
  102f8a:    80 f3 cc 13       	call 0x2798 <CrcDecode : 105726 >			  ## msd_upgrade.c:97:5
  102f8e:    40 08             	r0 = r4			  ## msd_upgrade.c:98:5
  102f90:    d1 08             	r1 = r13			  ## msd_upgrade.c:98:5
  102f92:    ad 08             	r13 = r10			  ## msd_upgrade.c:98:5
  102f94:    ea 08             	r10 = r14
  102f96:    2e 74             	r14 = 0x42
  102f98:    b0 16             	call -0x2a0 <msd_mcu2usb : 102cfa >			  ## msd_upgrade.c:98:5
  102f9a:    40 08             	r0 = r4			  ## msd_upgrade.c:99:5
  102f9c:    c1 08             	r1 = r12			  ## msd_upgrade.c:99:5
  102f9e:    5c 75             	r12 = 0x55			  ## msd_upgrade.c:99:5
  102fa0:    80 f3 c1 13       	call 0x2782 <CrcDecode : 105726 >			  ## msd_upgrade.c:99:5
  102fa4:    66 18             	goto 0xcc <usb_slave_mode+0x2B2 : 103072 >			  ## msd_upgrade.c:99:5
  102fa6:    99 20             	if (r0 == 0x0) goto 0x132 <.GJTIE54_0_0_+0x44 : 1030da >			  ## msd.c:288:9
  102fa8:    30 e0 9d 00       	if (r0 == 0x3) goto 0x13a <.GJTIE54_0_0_+0x50 : 1030e6 >
  102fac:    f0 e2 63 00       	if (r0 == 0x2f) goto 0xc6 <usb_slave_mode+0x2B6 : 103076 >
  102fb0:    a0 e1 cd 00       	if (r0 == 0x1a) goto 0x19a <.GJTIE54_0_0_+0xB8 : 10314e >
  102fb4:    e0 e1 d1 00       	if (r0 == 0x1e) goto 0x1a2 <.GJTIE54_0_0_+0xC4 : 10315a >
  102fb8:    30 e2 87 00       	if (r0 == 0x23) goto 0x10e <.GJTIE54_0_0_+0x34 : 1030ca >
  102fbc:    50 e2 85 00       	if (r0 == 0x25) goto 0x10a <.GJTIE54_0_0_+0x34 : 1030ca >
  102fc0:    80 e2 83 00       	if (r0 == 0x28) goto 0x106 <.GJTIE54_0_0_+0x34 : 1030ca >
  102fc4:    20 e1 25 10       	if (r0 != 0x12) goto 0x4a <usb_slave_mode+0x252 : 103012 >
  102fc8:    b0 6c             	r0 = b[r6 + 0xb] (u)			  ## msd.c:162:15
  102fca:    a1 6c             	r1 = b[r6 + 0xa] (u)			  ## msd.c:162:15
  102fcc:    92 6c             	r2 = b[r6 + 0x9] (u)			  ## msd.c:162:15
  102fce:    84 6c             	r4 = b[r6 + 0x8] (u)			  ## msd.c:162:15
  102fd0:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:162:15
  102fd4:    c8 fd 40 42       	r4 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:162:15
  102fd8:    d0 fd 80 41       	r4 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:162:15
  102fdc:    44 e2 01 30       	if (r4 < 0x24) goto 0x2 <usb_slave_mode+0x222 : 102fe2 >			  ## msd.c:162:15
  102fe0:    44 72             	r4 = 0x24			  ## msd.c:162:15
  102fe2:    c0 ff 8a 2b 10 00 	r0 = 0x102b8a <SCSIInquiryData : 102b8a >			  ## msd.c:164:5
  102fe8:    41 08             	r1 = r4			  ## msd.c:164:5
  102fea:    87 16             	call -0x2f2 <msd_mcu2usb : 102cfa >			  ## msd.c:164:5
  102fec:    b0 6c             	r0 = b[r6 + 0xb] (u)			  ## msd.c:165:25
  102fee:    a1 6c             	r1 = b[r6 + 0xa] (u)			  ## msd.c:165:25
  102ff0:    92 6c             	r2 = b[r6 + 0x9] (u)			  ## msd.c:165:25
  102ff2:    83 6c             	r3 = b[r6 + 0x8] (u)			  ## msd.c:165:25
  102ff4:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:165:25
  102ff8:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:165:25
  102ffc:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:165:25
  103000:    20 b7             	r0 = r3 - r4			  ## msd.c:165:25
  103002:    88 6c             	b[r6 + 0x8] = r0			  ## msd.c:165:25
  103004:    01 d6             	r1 = r0 >> 0x18			  ## msd.c:165:25
  103006:    b9 6c             	b[r6 + 0xb] = r1			  ## msd.c:165:25
  103008:    01 d4             	r1 = r0 >> 0x10			  ## msd.c:165:25
  10300a:    a9 6c             	b[r6 + 0xa] = r1			  ## msd.c:165:25
  10300c:    00 d2             	r0 = r0 >> 0x8			  ## msd.c:165:25
  10300e:    98 6c             	b[r6 + 0x9] = r0			  ## msd.c:165:25
  103010:    36 18             	goto 0x6c <usb_slave_mode+0x2BE : 10307e >			  ## msd.c:165:25
  103012:    c0 6a             	r0 = b[r5 + 0xc] (u)			  ## msd.c:313:26
  103014:    c0 d1             	r0 = r0 >> 0x7			  ## msd.c:313:20
  103016:    30 b0             	r0 ^= 0x1			  ## msd.c:313:20
  103018:    b5 16             	call -0x296 <unknow : 102d84 >			  ## msd.c:313:13
  10301a:    32 18             	goto 0x64 <usb_slave_mode+0x2C0 : 103080 >			  ## msd.c:313:13
  10301c:    0c f9 12 50       	r12 = b[r5 + 0x12] (u)			  ## msd_upgrade.c:43:5
  103020:    13 6b             	r3 = b[r5 + 0x11] (u)			  ## msd_upgrade.c:43:5
  103022:    0e f9 14 50       	r14 = b[r5 + 0x14] (u)			  ## msd_upgrade.c:43:5
  103026:    32 6b             	r2 = b[r5 + 0x13] (u)			  ## msd_upgrade.c:43:5
  103028:    56 16             	call -0x354 <rbc_get_length : 102cd6 >			  ## msd_upgrade.c:109:15
  10302a:    c4 ff 28 14 00 00 	r4 = 0x1428 <arg_list : 1428 >
  103030:    c1 ff fa 2c 10 00 	r1 = 0x102cfa <msd_mcu2usb : 102cfa >			  ## msd_upgrade.c:110:26
  103036:    09 48             	[r4 + 0x0] = r1			  ## msd_upgrade.c:110:26
  103038:    c1 ff e6 2c 10 00 	r1 = 0x102ce6 <msd_usb2mcu : 102ce6 >			  ## msd_upgrade.c:111:26
  10303e:    19 48             	[r4 + 0x4] = r1			  ## msd_upgrade.c:111:26
  103040:    18 f6 08 40       	[r4 + 0x8] = r8			  ## msd_upgrade.c:112:20
  103044:    38 48             	[r4 + 0xc] = r0			  ## msd_upgrade.c:113:21
  103046:    4f 48             	[r4 + 0x10] = r7			  ## msd_upgrade.c:114:23
  103048:    c8 fd 40 2e       	r2 <= insert(r14, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  10304c:    2e 74             	r14 = 0x42			  ## msd_upgrade.c:43:5
  10304e:    c8 fd 40 3c       	r3 <= insert(r12, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  103052:    5c 75             	r12 = 0x55			  ## msd_upgrade.c:43:5
  103054:    d0 fd 80 32       	r3 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  103058:    30 fb 00 13       	r1 = rev8(r3)			  ## msd_upgrade.c:46:12
  10305c:    40 08             	r0 = r4			  ## msd_upgrade.c:119:5
  10305e:    81 00             	call r1			  ## msd_upgrade.c:119:5
  103060:    b0 7f             	r0 = 0xfb			  ## msd_upgrade.c:121:12
  103062:    d0 f5 18 00       	b[sp+24] = r0			  ## msd_upgrade.c:121:12
  103066:    80 70             	r0 = 0x8			  ## msd_upgrade.c:122:12
  103068:    d0 f5 19 00       	b[sp+25] = r0			  ## msd_upgrade.c:122:12
  10306c:    80 a1             	r0 = sp + 24			  ## msd_upgrade.c:122:12
  10306e:    01 71             	r1 = 0x10			  ## msd_upgrade.c:124:5
  103070:    44 16             	call -0x378 <msd_mcu2usb : 102cfa >			  ## msd_upgrade.c:124:5
  103072:    17 f9 00 90       	b[r9 + 0x0] = r7			  ## msd.c:283:27
  103076:    bf 6c             	b[r6 + 0xb] = r7
  103078:    af 6c             	b[r6 + 0xa] = r7
  10307a:    9f 6c             	b[r6 + 0x9] = r7
  10307c:    8f 6c             	b[r6 + 0x8] = r7
  10307e:    cf 6c             	b[r6 + 0xc] = r7
  103080:    02 f9 00 90       	r2 = b[r9 + 0x0] (u)			  ## msd.c:317:24
  103084:    62 e0 0a 80       	if (r2 > 0x6) goto 0x14 <.GJTIE54_0_0_+0x6 : 10309c >			  ## msd.c:317:24
  103088:    40 72             	r0 = 0x24
  10308a:    51 70             	r1 = 0x5
  10308c:    a2 00             	tbb [r2]


.GJTIS54_0_0_:
  10308e:    04     < 4 : 0x4 >
  10308f:    12     < 18 : 0x12 >
  103090:    0e     < 14 : 0xE >
  103091:    12     < 18 : 0x12 >
  103092:    12     < 18 : 0x12 >
  103093:    09     < 9 : 0x9 >
  103094:    0c     < 12 : 0xC >
  103095:    00     < 0 : 0x0 >
  103096:    01 70             	r1 = 0x0
  103098:    00 70             	r0 = 0x0
  10309a:    07 18             	goto 0xe <.GJTIE54_0_0_+0x14 : 1030aa >
  10309c:    f2 e0 09 10       	if (r2 != 0xf) goto 0x12 <.GJTIE54_0_0_+0x1C : 1030b2 >
  1030a0:    a0 73             	r0 = 0x3a
  1030a2:    21 70             	r1 = 0x2
  1030a4:    02 18             	goto 0x4 <.GJTIE54_0_0_+0x14 : 1030aa >
  1030a6:    00 72             	r0 = 0x20
  1030a8:    b1 70             	r1 = 0xb
  1030aa:    11 f9 00 d0       	b[r13 + 0x0] = r1
  1030ae:    10 f9 00 a0       	b[r10 + 0x0] = r0
  1030b2:    1b f9 03 60       	b[r6 + 0x3] = r11			  ## msd.c:170:23
  1030b6:    1e f9 02 60       	b[r6 + 0x2] = r14			  ## msd.c:170:23
  1030ba:    1b f9 01 60       	b[r6 + 0x1] = r11			  ## msd.c:170:23
  1030be:    1c f9 00 60       	b[r6 + 0x0] = r12			  ## msd.c:170:23
  1030c2:    d1 70             	r1 = 0xd			  ## msd.c:171:5
  1030c4:    60 08             	r0 = r6			  ## msd.c:171:5
  1030c6:    19 16             	call -0x3ce <msd_mcu2usb : 102cfa >			  ## msd.c:171:5
  1030c8:    ed 1e             	goto -0x226 <usb_slave_mode+0xE4 : 102ea4 >			  ## msd.c:171:5
  1030ca:    00 70             	r0 = 0x0			  ## msd.c:215:5
  1030cc:    5b 16             	call -0x34a <unknow : 102d84 >			  ## msd.c:215:5
  1030ce:    50 70             	r0 = 0x5			  ## msd.c:216:23
  1030d0:    10 f9 00 90       	b[r9 + 0x0] = r0			  ## msd.c:216:23
  1030d4:    10 70             	r0 = 0x1			  ## msd.c:217:20
  1030d6:    c8 6c             	b[r6 + 0xc] = r0			  ## msd.c:217:20
  1030d8:    d3 1f             	goto -0x5a <usb_slave_mode+0x2C0 : 103080 >			  ## msd.c:217:20
  1030da:    10 70             	r0 = 0x1			  ## msd.c:221:20
  1030dc:    c8 6c             	b[r6 + 0xc] = r0			  ## msd.c:221:20
  1030de:    50 70             	r0 = 0x5			  ## msd.c:222:23
  1030e0:    10 f9 00 90       	b[r9 + 0x0] = r0			  ## msd.c:222:23
  1030e4:    dd 1f             	goto -0x46 <.GJTIE54_0_0_+0xA : 1030a0 >			  ## msd.c:222:23
  1030e6:    b1 6a             	r1 = b[r5 + 0xb] (u)			  ## msd.c:237:11
  1030e8:    a2 6a             	r2 = b[r5 + 0xa] (u)			  ## msd.c:237:11
  1030ea:    93 6a             	r3 = b[r5 + 0x9] (u)			  ## msd.c:237:11
  1030ec:    80 6a             	r0 = b[r5 + 0x8] (u)			  ## msd.c:237:11
  1030ee:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## msd.c:237:11
  1030f2:    c8 fd 40 03       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd.c:237:11
  1030f6:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd.c:237:11
  1030fa:    04 08             	r4 = r0			  ## msd.c:237:11
  1030fc:    20 e1 01 30       	if (r0 < 0x12) goto 0x2 <.GJTIE54_0_0_+0x6C : 103102 >			  ## msd.c:237:11
  103100:    24 71             	r4 = 0x12			  ## msd.c:237:11
  103102:    38 20             	if (r0 == 0x0) goto 0x70 <.GJTIE54_0_0_+0xDE : 103174 >
  103104:    01 70             	r1 = 0x0			  ## msd.c:245:9
  103106:    12 71             	r2 = 0x11			  ## msd.c:245:9
  103108:    0c 70             	r12 = 0x0			  ## msd.c:245:9
  10310a:    00 02             	r0 = [sp]			  ## msd.c:245:9
  10310c:    bf f3 2f e8       	call -0x2fa2 <memset : 10016e >			  ## msd.c:245:9
  103110:    00 f9 00 d0       	r0 = b[r13 + 0x0] (u)			  ## msd.c:246:36
  103114:    01 f9 00 a0       	r1 = b[r10 + 0x0] (u)			  ## msd.c:247:37
  103118:    d0 f5 08 00       	b[sp+8] = r0			  ## msd.c:246:23
  10311c:    d1 f5 12 00       	b[sp+18] = r1			  ## msd.c:247:24
  103120:    dc f5 13 00       	b[sp+19] = r12			  ## msd.c:248:24
  103124:    00 77             	r0 = 0x70			  ## msd.c:249:23
  103126:    d0 f5 06 00       	b[sp+6] = r0			  ## msd.c:249:23
  10312a:    a0 70             	r0 = 0xa			  ## msd.c:250:23
  10312c:    d0 f5 0d 00       	b[sp+13] = r0			  ## msd.c:250:23
  103130:    60 a0             	r0 = sp + 6			  ## msd.c:250:23
  103132:    41 08             	r1 = r4			  ## msd.c:253:9
  103134:    e2 15             	call -0x43c <msd_mcu2usb : 102cfa >			  ## msd.c:253:9
  103136:    b0 6c             	r0 = b[r6 + 0xb] (u)			  ## msd.c:256:25
  103138:    a1 6c             	r1 = b[r6 + 0xa] (u)			  ## msd.c:256:25
  10313a:    92 6c             	r2 = b[r6 + 0x9] (u)			  ## msd.c:256:25
  10313c:    83 6c             	r3 = b[r6 + 0x8] (u)			  ## msd.c:256:25
  10313e:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:256:25
  103142:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:256:25
  103146:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:256:25
  10314a:    20 b7             	r0 = r3 - r4			  ## msd.c:256:25
  10314c:    19 18             	goto 0x32 <.GJTIE54_0_0_+0xEA : 103180 >			  ## msd.c:256:25
  10314e:    41 70             	r1 = 0x4			  ## msd.c:264:5
  103150:    c0 ff ae 2b 10 00 	r0 = 0x102bae <scsi_mode_sense : 102bae >			  ## msd.c:264:5
  103156:    d1 15             	call -0x45e <msd_mcu2usb : 102cfa >			  ## msd.c:264:5
  103158:    8e 1f             	goto -0xe4 <usb_slave_mode+0x2B6 : 103076 >			  ## msd.c:264:5
  10315a:    cf 6c             	b[r6 + 0xc] = r7			  ## msd.c:226:20
  10315c:    30 6b             	r0 = b[r5 + 0x13] (u)			  ## msd.c:227:9
  10315e:    05 20             	if (r0 == 0x0) goto 0xa <.GJTIE54_0_0_+0xD4 : 10316a >			  ## msd.c:227:9
  103160:    20 70             	r0 = 0x2			  ## msd.c:228:27
  103162:    10 f9 00 90       	b[r9 + 0x0] = r0			  ## msd.c:228:27
  103166:    10 70             	r0 = 0x1			  ## msd.c:229:24
  103168:    c8 6c             	b[r6 + 0xc] = r0			  ## msd.c:229:24
  10316a:    bf 6c             	b[r6 + 0xb] = r7			  ## msd.c:231:25
  10316c:    af 6c             	b[r6 + 0xa] = r7			  ## msd.c:231:25
  10316e:    9f 6c             	b[r6 + 0x9] = r7			  ## msd.c:231:25
  103170:    8f 6c             	b[r6 + 0x8] = r7			  ## msd.c:231:25
  103172:    86 1f             	goto -0xf4 <usb_slave_mode+0x2C0 : 103080 >			  ## msd.c:231:25
  103174:    fb 15             	call -0x40a <stall_inep : 102d6c >			  ## msd.c:239:9
  103176:    20 70             	r0 = 0x2			  ## msd.c:240:27
  103178:    10 f9 00 90       	b[r9 + 0x0] = r0			  ## msd.c:240:27
  10317c:    1c 70             	r12 = 0x1			  ## msd.c:240:27
  10317e:    00 70             	r0 = 0x0			  ## msd.c:240:27
  103180:    88 6c             	b[r6 + 0x8] = r0
  103182:    01 d6             	r1 = r0 >> 0x18
  103184:    b9 6c             	b[r6 + 0xb] = r1
  103186:    01 d4             	r1 = r0 >> 0x10
  103188:    a9 6c             	b[r6 + 0xa] = r1
  10318a:    00 d2             	r0 = r0 >> 0x8
  10318c:    98 6c             	b[r6 + 0x9] = r0
  10318e:    1c f9 0c 60       	b[r6 + 0xc] = r12
  103192:    5c 75             	r12 = 0x55
  103194:    75 1f             	goto -0x116 <usb_slave_mode+0x2C0 : 103080 >


usb_write_txcsr:
  103196:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:187:0
  103198:    42 04             	r2 = r1.b0 (u)			  ## usb_phy.c:191:28
  10319a:    c3 ff 91 92 07 00 	r3 = 0x79291 <RAM_LIMIT_H+0x69290 : 79290 >			  ## usb_phy.c:191:13
  1031a0:    b2 f6 00 03       	[r0+r3<<2] = r2			  ## usb_phy.c:191:20
  1031a4:    09 d2             	r1 = r1 >> 0x8			  ## usb_phy.c:192:28
  1031a6:    12 96             	r2 = r3 + 0x1			  ## usb_phy.c:192:13
  1031a8:    b1 f6 00 02       	[r0+r2<<2] = r1			  ## usb_phy.c:192:20
  1031ac:    20 00             	rts			  ## usb_phy.c:194:1


usb_write_rxcsr:
  1031ae:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:206:0
  1031b0:    42 04             	r2 = r1.b0 (u)			  ## usb_phy.c:210:28
  1031b2:    c3 ff 94 92 07 00 	r3 = 0x79294 <RAM_LIMIT_H+0x69294 : 79294 >			  ## usb_phy.c:210:13
  1031b8:    b2 f6 00 03       	[r0+r3<<2] = r2			  ## usb_phy.c:210:20
  1031bc:    09 d2             	r1 = r1 >> 0x8			  ## usb_phy.c:211:28
  1031be:    12 96             	r2 = r3 + 0x1			  ## usb_phy.c:211:13
  1031c0:    b1 f6 00 02       	[r0+r2<<2] = r1			  ## usb_phy.c:211:20
  1031c4:    20 00             	rts			  ## usb_phy.c:213:1


usb_g_ep_config:
  1031c6:    75 01             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:429:0
  1031c8:    04 08             	r4 = r0			  ## usb_phy.c:429:0
  1031ca:    13 05             	r3 = r4.b0 (s)			  ## usb_phy.c:431:12
  1031cc:    c0 ff 3c 14 00 00 	r0 = 0x143c <ep0_addr : 143c >			  ## usb_phy.c:431:12
  1031d2:    c2 ff 1c 18 1e 00 	r2 = 0x1e181c <__stub_uECC_vli_cmp_unsafe+0xDA820 : 1e181c >			  ## usb_phy.c:431:12
  1031d8:    f3 ef 0f d0       	ifs (r3 <= -0x1) goto 0x1e <usb_g_ep_config+0x34 : 1031fa >			  ## usb_phy.c:431:12
  1031dc:    21 28             	if (r4 == 0x0) goto 0x42 <usb_g_ep_config+0x5A : 103220 >
  1031de:    40 fc ff ff       	r0 = r4 + -0x1			  ## usb_phy.c:294:22
  1031e2:    c2 c0             	r2 = r0 << 0x3			  ## usb_phy.c:294:11
  1031e4:    c3 ff 09 86 07 00 	r3 = 0x78609 <RAM_LIMIT_H+0x68608 : 78608 >			  ## usb_phy.c:294:11
  1031ea:    b1 f6 00 23       	[r2+r3<<2] = r1			  ## usb_phy.c:295:12
  1031ee:    c2 ff 50 14 00 00 	r2 = 0x1450 <ep_raddr : 1450 >			  ## usb_phy.c:296:5
  1031f4:    b1 f6 00 20       	[r2+r0<<2] = r1			  ## usb_phy.c:296:22
  1031f8:    17 18             	goto 0x2e <usb_g_ep_config+0x62 : 103228 >
  1031fa:    25 fd 0f 49       	r5 = r4 & 0xf			  ## usb_phy.c:432:12
  1031fe:    60 ff 0f 49 20 00 	if ((r4 & 0xf) == 0) goto 0x40 <usb_g_ep_config+0x7E : 103244 >
  103204:    50 fc ff ff       	r0 = r5 + -0x1			  ## usb_phy.c:275:22
  103208:    c2 c0             	r2 = r0 << 0x3			  ## usb_phy.c:275:11
  10320a:    c3 ff 08 86 07 00 	r3 = 0x78608 <RAM_LIMIT_H+0x68608 : 78608 >			  ## usb_phy.c:275:11
  103210:    b1 f6 00 23       	[r2+r3<<2] = r1			  ## usb_phy.c:276:12
  103214:    c2 ff 40 14 00 00 	r2 = 0x1440 <ep_taddr : 1440 >			  ## usb_phy.c:277:5
  10321a:    b1 f6 00 20       	[r2+r0<<2] = r1			  ## usb_phy.c:277:22
  10321e:    15 18             	goto 0x2a <usb_g_ep_config+0x84 : 10324a >			  ## usb_phy.c:277:22
  103220:    09 44             	[r2 + 0x0] = r1			  ## usb_phy.c:289:25
  103222:    09 40             	[r0 + 0x0] = r1			  ## usb_phy.c:290:18
  103224:    40 fc ff ff       	r0 = r4 + -0x1			  ## usb_phy.c:228:19
  103228:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:229:13
  10322a:    c1 ff d3 92 07 00 	r1 = 0x792d3 <RAM_LIMIT_H+0x692D2 : 792d2 >			  ## usb_phy.c:229:13
  103230:    02 fb ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0xDE : 3fe >			  ## usb_phy.c:229:20
  103234:    b2 f6 00 01       	[r0+r1<<2] = r2			  ## usb_phy.c:229:20
  103238:    01 79             	r1 = 0x90			  ## usb_phy.c:449:9
  10323a:    40 08             	r0 = r4			  ## usb_phy.c:449:9
  10323c:    b8 17             	call -0x90 <usb_write_rxcsr : 1031ae >			  ## usb_phy.c:449:9
  10323e:    40 08             	r0 = r4			  ## usb_phy.c:456:13
  103240:    15 01             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:456:13
  103242:    d3 1c             	goto -0x65a <usb_clr_intr_rxe : 102bea >			  ## usb_phy.c:456:13
  103244:    09 44             	[r2 + 0x0] = r1			  ## usb_phy.c:270:25
  103246:    09 40             	[r0 + 0x0] = r1			  ## usb_phy.c:271:18
  103248:    f0 07             	r0 = -0x1			  ## usb_phy.c:271:18
  10324a:    00 c2             	r0 = r0 << 0x8			  ## usb_phy.c:237:13
  10324c:    c1 ff d0 92 07 00 	r1 = 0x792d0 <RAM_LIMIT_H+0x692D0 : 792d0 >			  ## usb_phy.c:237:13
  103252:    02 fb ff 03       	r2 = 0x3ff <ROM_RAM_SIZE+0xDE : 3fe >			  ## usb_phy.c:237:20
  103256:    b2 f6 00 01       	[r0+r1<<2] = r2			  ## usb_phy.c:237:20
  10325a:    81 74             	r1 = 0x48			  ## usb_phy.c:436:9
  10325c:    50 08             	r0 = r5			  ## usb_phy.c:436:9
  10325e:    9b 17             	call -0xca <usb_write_txcsr : 103196 >			  ## usb_phy.c:436:9
  103260:    50 08             	r0 = r5			  ## usb_phy.c:443:13
  103262:    15 01             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:443:13
  103264:    d8 1c             	goto -0x650 <usb_clr_intr_txe : 102c16 >			  ## usb_phy.c:443:13


msd_itf_hander:
  103266:    76 01             	[--sp] = {rets, r6-r4}			  ## msd.c:96:0
  103268:    c2 ff 24 14 00 00 	r2 = 0x1424 <hook_usb_scsi : 1424 >			  ## msd_upgrade.c:128:19
  10326e:    c0 f4 00 29       	[r2 + 0x0] = 0x0			  ## msd_upgrade.c:128:19
  103272:    15 08             	r5 = r1			  ## msd_upgrade.c:128:19
  103274:    04 08             	r4 = r0
  103276:    c6 ff 80 10 00 00 	r6 = 0x1080 <ep1_dma_buffer : 1080 >			  ## msd.c:90:5
  10327c:    10 78             	r0 = 0x81			  ## msd.c:89:5
  10327e:    61 08             	r1 = r6			  ## msd.c:89:5
  103280:    a2 17             	call -0xbc <usb_g_ep_config : 1031c6 >			  ## msd.c:89:5
  103282:    61 fc 40 00       	r1 = r6 + 0x40			  ## msd.c:90:5
  103286:    10 70             	r0 = 0x1			  ## msd.c:90:5
  103288:    9e 17             	call -0xc4 <usb_g_ep_config : 1031c6 >			  ## msd.c:90:5
  10328a:    00 6a             	r0 = b[r5 + 0x0] (u)			  ## msd.c:98:15
  10328c:    31 70             	r1 = 0x3			  ## msd.c:98:15
  10328e:    00 ff a1 00 09 00 	if (r0 == 0xa1) goto 0x12 <msd_itf_hander+0x40 : 1032a6 >			  ## msd.c:98:37
  103294:    10 e2 12 10       	if (r0 != 0x21) goto 0x24 <msd_itf_hander+0x56 : 1032bc >
  103298:    10 6a             	r0 = b[r5 + 0x1] (u)			  ## msd.c:99:15
  10329a:    01 70             	r1 = 0x0			  ## msd.c:98:9
  10329c:    00 ff ff 00 0d 00 	if (r0 == 0xff) goto 0x1a <msd_itf_hander+0x56 : 1032bc >			  ## msd.c:98:9
  1032a2:    31 70             	r1 = 0x3			  ## msd.c:98:9
  1032a4:    0b 18             	goto 0x16 <msd_itf_hander+0x56 : 1032bc >			  ## msd.c:98:9
  1032a6:    10 6a             	r0 = b[r5 + 0x1] (u)			  ## msd.c:104:22
  1032a8:    01 ff fe 00 07 00 	if (r0 != 0xfe) goto 0xe <msd_itf_hander+0x56 : 1032bc >			  ## msd.c:104:22
  1032ae:    20 48             	r0 = [r4 + 0x8]			  ## msd.c:107:21
  1032b0:    01 70             	r1 = 0x0			  ## msd.c:107:37
  1032b2:    09 60             	b[r0 + 0x0] = r1			  ## msd.c:107:37
  1032b4:    20 48             	r0 = [r4 + 0x8]			  ## msd.c:108:45
  1032b6:    38 48             	[r4 + 0xc] = r0			  ## msd.c:108:31
  1032b8:    11 70             	r1 = 0x1			  ## msd.c:108:31
  1032ba:    19 58             	h[r4 + 0x2] = r1			  ## msd.c:109:33
  1032bc:    00 70             	r0 = 0x0			  ## msd.c:114:5
  1032be:    19 68             	b[r4 + 0x1] = r1			  ## msd.c:114:5
  1032c0:    56 01             	{pc, r6-r4} = [sp++]			  ## msd.c:114:5


ep0_stage_tx:
  1032c2:    76 01             	[--sp] = {rets, r6-r4}			  ## usb_setup.c:15:0
  1032c4:    c5 ff 44 4a 1e 00 	r5 = 0x1e4a44 <__stub_uECC_vli_cmp_unsafe+0xDDA48 : 1e4a44 >			  ## usb_setup.c:15:0
  1032ca:    00 4a             	r0 = [r5 + 0x0]			  ## usb_phy.c:62:28
  1032cc:    21 f3 21 00       	if ((r0 & 0x2) != 0) goto 0x42 <ep0_stage_tx+0x50 : 103312 >
  1032d0:    c6 ff 7c 14 00 00 	r6 = 0x147c <usb_device : 147c >
  1032d6:    14 5c             	r4 = h[r6 + 0x2] (u)			  ## usb_setup.c:20:16
  1032d8:    18 28             	if (r4 == 0x0) goto 0x30 <ep0_stage_tx+0x48 : 10330a >			  ## usb_setup.c:20:16
  1032da:    04 e4 01 30       	if (r4 < 0x40) goto 0x2 <ep0_stage_tx+0x1E : 1032e0 >
  1032de:    04 74             	r4 = 0x40			  ## usb_setup.c:24:19
  1032e0:    c0 ff 3c 14 00 00 	r0 = 0x143c <ep0_addr : 143c >			  ## usb_phy.c:96:20
  1032e6:    00 40             	r0 = [r0 + 0x0]			  ## usb_phy.c:96:20
  1032e8:    31 4c             	r1 = [r6 + 0xc]			  ## usb_setup.c:25:34
  1032ea:    42 08             	r2 = r4			  ## usb_phy.c:96:5
  1032ec:    bf f3 a8 e6       	call -0x32b0 <memmove : 100040 >			  ## usb_phy.c:96:5
  1032f0:    50 fc c4 cd       	r0 = r5 + -0x323c			  ## usb_phy.c:97:21
  1032f4:    0c 40             	[r0 + 0x0] = r4			  ## usb_phy.c:97:21
  1032f6:    30 4c             	r0 = [r6 + 0xc]			  ## usb_setup.c:26:30
  1032f8:    40 09             	r0 += r4			  ## usb_setup.c:26:30
  1032fa:    38 4c             	[r6 + 0xc] = r0			  ## usb_setup.c:26:30
  1032fc:    10 5c             	r0 = h[r6 + 0x2] (u)			  ## usb_setup.c:27:32
  1032fe:    20 b1             	r0 = r0 - r4			  ## usb_setup.c:27:32
  103300:    18 5c             	h[r6 + 0x2] = r0			  ## usb_setup.c:27:32
  103302:    61 6c             	r1 = b[r6 + 0x6] (u)			  ## usb_setup.c:28:50
  103304:    07 32             	if (r1 != 0x0) goto 0xe <ep0_stage_tx+0x52 : 103314 >			  ## usb_setup.c:28:50
  103306:    20 04             	r0 = r0.l (u)			  ## usb_setup.c:28:13
  103308:    05 30             	if (r0 != 0x0) goto 0xa <ep0_stage_tx+0x52 : 103314 >			  ## usb_setup.c:28:13
  10330a:    c0 f4 0a 59       	[r5 + 0x0] = 0xa
  10330e:    00 70             	r0 = 0x0
  103310:    18 6c             	b[r6 + 0x1] = r0
  103312:    56 01             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1
  103314:    c0 f4 02 59       	[r5 + 0x0] = 0x2			  ## usb_phy.c:70:22
  103318:    56 01             	{pc, r6-r4} = [sp++]			  ## usb_setup.c:35:1


usb_device_isr:
  10331a:    e9 01             	[--sp] = {psr, rets, reti}			  ## usb_onchip.c:30:0
  10331c:    78 f3 ff 1f       	[--sp] = {r12-r0}			  ## usb_onchip.c:30:0
  103320:    fc 0b             	sp += -0x8			  ## usb_onchip.c:30:0
  103322:    c4 ff 00 4a 1e 00 	r4 = 0x1e4a00 <__stub_uECC_vli_cmp_unsafe+0xDDA04 : 1e4a00 >			  ## usb_onchip.c:30:0
  103328:    60 48             	r0 = [r4 + 0x18]			  ## usb_phy.c:115:29
  10332a:    20 48             	r0 = [r4 + 0x8]			  ## usb_phy.c:116:29
  10332c:    31 48             	r1 = [r4 + 0xc]			  ## usb_phy.c:116:53
  10332e:    42 48             	r2 = [r4 + 0x10]			  ## usb_phy.c:117:29
  103330:    53 48             	r3 = [r4 + 0x14]			  ## usb_phy.c:117:53
  103332:    b5 48             	r5 = [r4 + 0x2c]			  ## usb_phy.c:125:31
  103334:    75 48             	r5 = [r4 + 0x1c]			  ## usb_phy.c:126:30
  103336:    86 48             	r6 = [r4 + 0x20]			  ## usb_phy.c:126:55
  103338:    09 c2             	r1 = r1 << 0x8			  ## usb_phy.c:116:62
  10333a:    50 b2             	r0 |= r1			  ## usb_phy.c:116:38
  10333c:    31 c2             	r1 = r6 << 0x8			  ## usb_phy.c:126:65
  10333e:    51 ba             	r1 |= r5			  ## usb_phy.c:126:40
  103340:    95 48             	r5 = [r4 + 0x24]			  ## usb_phy.c:127:30
  103342:    a6 48             	r6 = [r4 + 0x28]			  ## usb_phy.c:127:55
  103344:    e2 fd 10 c0       	r12 = r0 & r1			  ## usb_onchip.c:45:13
  103348:    18 c2             	r0 = r3 << 0x8			  ## usb_phy.c:117:62
  10334a:    e0 fd 20 70       	r7 = r0 | r2			  ## usb_phy.c:117:38
  10334e:    30 c2             	r0 = r6 << 0x8			  ## usb_phy.c:127:65
  103350:    55 b0             	r5 |= r0			  ## usb_phy.c:127:40
  103352:    00 f3 25 c1       	if ((r12 & 0x1) == 0) goto 0x24a <.GJTIE81_0_0_+0x186 : 1035a0 >
  103356:    c9 ff 7c 14 00 00 	r9 = 0x147c <usb_device : 147c >
  10335c:    00 f9 00 90       	r0 = b[r9 + 0x0] (u)			  ## usb_setup.c:220:20
  103360:    04 20             	if (r0 == 0x0) goto 0x8 <usb_device_isr+0x50 : 10336a >			  ## usb_setup.c:220:20
  103362:    08 48             	[r4 + 0x0] = r0			  ## usb_phy.c:183:23
  103364:    00 70             	r0 = 0x0			  ## usb_setup.c:222:26
  103366:    10 f9 00 90       	b[r9 + 0x0] = r0			  ## usb_setup.c:222:26
  10336a:    10 49             	r0 = [r4 + 0x44]			  ## usb_phy.c:62:28
  10336c:    22 f3 0a 00       	if ((r0 & 0x4) != 0) goto 0x14 <usb_device_isr+0x6A : 103384 >
  103370:    24 f3 0d 00       	if ((r0 & 0x10) != 0) goto 0x1a <usb_device_isr+0x74 : 10338e >
  103374:    01 f9 01 90       	r1 = b[r9 + 0x1] (u)			  ## usb_setup.c:236:24
  103378:    21 e0 59 00       	if (r1 == 0x2) goto 0xb2 <.GJTIE81_0_0_+0x14 : 10342e >			  ## usb_setup.c:236:5
  10337c:    11 e0 0f 01       	if (r1 == 0x1) goto 0x21e <.GJTIE81_0_0_+0x184 : 10359e >
  103380:    0b 22             	if (r1 == 0x0) goto 0x16 <usb_device_isr+0x7E : 103398 >
  103382:    0e 19             	goto 0x21c <.GJTIE81_0_0_+0x186 : 1035a0 >
  103384:    00 70             	r0 = 0x0
  103386:    18 49             	[r4 + 0x44] = r0			  ## usb_phy.c:70:22
  103388:    10 f9 01 90       	b[r9 + 0x1] = r0
  10338c:    09 19             	goto 0x212 <.GJTIE81_0_0_+0x186 : 1035a0 >
  10338e:    d1 f4 80 49       	[r4 + 0x44] = 0x80			  ## usb_phy.c:70:22
  103392:    01 70             	r1 = 0x0			  ## usb_setup.c:233:27
  103394:    11 f9 01 90       	b[r9 + 0x1] = r1			  ## usb_setup.c:233:27
  103398:    00 f3 02 01       	if ((r0 & 0x1) == 0) goto 0x204 <.GJTIE81_0_0_+0x186 : 1035a0 >
  10339c:    c0 ff 3c 14 00 00 	r0 = 0x143c <ep0_addr : 143c >			  ## usb_phy.c:108:25
  1033a2:    00 40             	r0 = [r0 + 0x0]			  ## usb_phy.c:108:25
  1033a4:    71 60             	r1 = b[r0 + 0x7] (u)			  ## usb_phy.c:108:5
  1033a6:    63 60             	r3 = b[r0 + 0x6] (u)			  ## usb_phy.c:108:5
  1033a8:    52 60             	r2 = b[r0 + 0x5] (u)			  ## usb_phy.c:108:5
  1033aa:    0a f9 04 00       	r10 = b[r0 + 0x4] (u)			  ## usb_phy.c:108:5
  1033ae:    c8 fd 40 31       	r3 <= insert(r1, p:0x8, l:0x8)			  ## usb_phy.c:108:5
  1033b2:    c8 fd 40 a2       	r10 <= insert(r2, p:0x8, l:0x8)			  ## usb_phy.c:108:5
  1033b6:    08 f9 01 00       	r8 = b[r0 + 0x1] (u)			  ## usb_phy.c:108:5
  1033ba:    36 60             	r6 = b[r0 + 0x3] (u)			  ## usb_phy.c:108:5
  1033bc:    21 60             	r1 = b[r0 + 0x2] (u)			  ## usb_phy.c:108:5
  1033be:    02 60             	r2 = b[r0 + 0x0] (u)			  ## usb_phy.c:108:5
  1033c0:    d0 fd 80 a3       	r10 <= insert(r3, p:0x10, l:0x10)			  ## usb_phy.c:108:5
  1033c4:    1a f5 04 00       	[sp+4] = r10			  ## usb_phy.c:108:5
  1033c8:    c8 fd 40 16       	r1 <= insert(r6, p:0x8, l:0x8)			  ## usb_phy.c:108:5
  1033cc:    c8 fd 40 28       	r2 <= insert(r8, p:0x8, l:0x8)			  ## usb_phy.c:108:5
  1033d0:    d0 fd 80 21       	r2 <= insert(r1, p:0x10, l:0x10)			  ## usb_phy.c:108:5
  1033d4:    0a 02             	[sp] = r2			  ## usb_phy.c:108:5
  1033d6:    10 70             	r0 = 0x1			  ## usb_phy.c:108:5
  1033d8:    10 f9 01 90       	b[r9 + 0x1] = r0			  ## usb_setup.c:187:23
  1033dc:    c8 ff 40 11 00 00 	r8 = 0x1140 <ep2_dma_buffer : 1140 >			  ## usb_setup.c:187:23
  1033e2:    18 f6 08 90       	[r9 + 0x8] = r8			  ## usb_setup.c:188:29
  1033e6:    11 d4             	r1 = r2 >> 0x10			  ## usb_setup.c:190:5
  1033e8:    d0 fd 80 1a       	r1 <= insert(r10, p:0x10, l:0x10)			  ## usb_setup.c:190:5
  1033ec:    13 d2             	r3 = r2 >> 0x8			  ## usb_setup.c:190:5
  1033ee:    26 fd 1f 29       	r6 = r2 & 0x1f			  ## usb_setup.c:190:5
  1033f2:    c8 fd c0 3a       	r3 <= insert(r10, p:0x18, l:0x8)			  ## usb_setup.c:190:5
  1033f6:    26 e0 1d 00       	if (r6 == 0x2) goto 0x3a <.GJTIE81_0_0_+0x1A : 103434 >			  ## usb_setup.c:190:5
  1033fa:    cb ff 60 14 00 00 	r11 = 0x1460 <interface_hander : 1460 >
  103400:    16 e0 2e 00       	if (r6 == 0x1) goto 0x5c <.GJTIE81_0_0_+0x46 : 103460 >
  103404:    ca 3c             	if (r6 != 0x0) goto 0x194 <.GJTIE81_0_0_+0x180 : 10359a >
  103406:    c0 04             	r0 = r3.b0 (u)
  103408:    b0 e0 35 80       	if (r0 > 0xb) goto 0x6a <.GJTIE81_0_0_+0x5C : 103476 >
  10340c:    a0 00             	tbb [r0]


.GJTIS81_0_0_:
  10340e:    06     < 6 : 0x6 >
  10340f:    77     < 119 : 0x77 >
  103410:    34     < 52 : 0x34 >
  103411:    34     < 52 : 0x34 >
  103412:    34     < 52 : 0x34 >
  103413:    56     < 86 : 0x56 >
  103414:    59     < 89 : 0x59 >
  103415:    34     < 52 : 0x34 >
  103416:    69     < 105 : 0x69 >
  103417:    75     < 117 : 0x75 >
  103418:    34     < 52 : 0x34 >
  103419:    77     < 119 : 0x77 >
  10341a:    10 70             	r0 = 0x1
  10341c:    10 f9 00 80       	b[r8 + 0x0] = r0			  ## usb_setup.c:105:36
  103420:    00 70             	r0 = 0x0			  ## usb_setup.c:106:36
  103422:    10 f9 01 80       	b[r8 + 0x1] = r0			  ## usb_setup.c:106:36
  103426:    20 70             	r0 = 0x2			  ## usb_setup.c:107:32
  103428:    10 f7 02 90       	h[r9 + 0x2] = r0			  ## usb_setup.c:107:32
  10342c:    b6 18             	goto 0x16c <.GJTIE81_0_0_+0x180 : 10359a >			  ## usb_setup.c:107:32
  10342e:    d1 f4 48 49       	[r4 + 0x44] = 0x48			  ## usb_phy.c:70:22
  103432:    26 18             	goto 0x4c <.GJTIE81_0_0_+0x66 : 103480 >			  ## usb_phy.c:70:22
  103434:    60 ff ff 39 25 00 	if ((r3 & 0xff) == 0) goto 0x4a <.GJTIE81_0_0_+0x6A : 103484 >			  ## usb_setup.c:150:5
  10343a:    c2 04             	r2 = r3.b0 (u)
  10343c:    32 e0 2e 00       	if (r2 == 0x3) goto 0x5c <.GJTIE81_0_0_+0x82 : 10349c >
  103440:    12 e0 2b 10       	if (r2 != 0x1) goto 0x56 <.GJTIE81_0_0_+0x80 : 10349a >
  103444:    30 70             	r0 = 0x3
  103446:    61 ff ff 19 28 00 	if ((r1 & 0xff) != 0) goto 0x50 <.GJTIE81_0_0_+0x82 : 10349c >
  10344c:    e5 fd 00 1a       	r1 = r10.b0 (s)			  ## usb_setup.c:153:29
  103450:    20 fd 03 a9       	r0 = r10 & 0x3			  ## usb_setup.c:149:34
  103454:    f1 ef 5b d0       	ifs (r1 <= -0x1) goto 0xb6 <.GJTIE81_0_0_+0xF4 : 10350e >
  103458:    01 78             	r1 = 0x80			  ## usb_setup.c:156:17
  10345a:    a9 16             	call -0x2ae <usb_write_rxcsr : 1031ae >			  ## usb_setup.c:156:17
  10345c:    00 70             	r0 = 0x0
  10345e:    1e 18             	goto 0x3c <.GJTIE81_0_0_+0x82 : 10349c >
  103460:    e4 fd 00 0a       	r0 = r10.b0 (u)			  ## usb_setup.c:127:19
  103464:    60 e0 07 80       	if (r0 > 0x6) goto 0xe <.GJTIE81_0_0_+0x5C : 103476 >			  ## usb_setup.c:127:19
  103468:    a2 f6 00 b0       	r2 = [r11+r0<<2]			  ## usb_setup.c:130:9
  10346c:    04 24             	if (r2 == 0x0) goto 0x8 <.GJTIE81_0_0_+0x5C : 103476 >			  ## usb_setup.c:130:9
  10346e:    01 a0             	r1 = sp + 0
  103470:    90 08             	r0 = r9			  ## usb_setup.c:131:10
  103472:    82 00             	call r2			  ## usb_setup.c:131:10
  103474:    49 20             	if (r0 == 0x0) goto 0x92 <.GJTIE81_0_0_+0xEE : 103508 >			  ## usb_setup.c:131:10
  103476:    30 70             	r0 = 0x3
  103478:    10 f9 01 90       	b[r9 + 0x1] = r0
  10347c:    d1 f4 60 49       	[r4 + 0x44] = 0x60			  ## usb_phy.c:70:22
  103480:    00 70             	r0 = 0x0
  103482:    82 1f             	goto -0xfc <usb_device_isr+0x6E : 103388 >
  103484:    01 70             	r1 = 0x0			  ## usb_setup.c:164:36
  103486:    11 f9 00 80       	b[r8 + 0x0] = r1			  ## usb_setup.c:164:36
  10348a:    11 f9 01 80       	b[r8 + 0x1] = r1			  ## usb_setup.c:165:36
  10348e:    18 f6 0c 90       	[r9 + 0xc] = r8			  ## usb_setup.c:166:30
  103492:    21 70             	r1 = 0x2			  ## usb_setup.c:167:32
  103494:    11 f7 02 90       	h[r9 + 0x2] = r1			  ## usb_setup.c:167:32
  103498:    01 18             	goto 0x2 <.GJTIE81_0_0_+0x82 : 10349c >			  ## usb_setup.c:167:32
  10349a:    30 70             	r0 = 0x3
  10349c:    10 f9 01 90       	b[r9 + 0x1] = r0
  1034a0:    01 fc ff ff       	r1 = r0 + -0x1			  ## usb_setup.c:203:9
  1034a4:    21 e0 04 30       	if (r1 < 0x2) goto 0x8 <.GJTIE81_0_0_+0x96 : 1034b0 >			  ## usb_setup.c:203:9
  1034a8:    2c 20             	if (r0 == 0x0) goto 0x58 <.GJTIE81_0_0_+0xE8 : 103502 >
  1034aa:    30 e0 e7 0f       	if (r0 == 0x3) goto -0x32 <.GJTIE81_0_0_+0x62 : 10347c >
  1034ae:    78 18             	goto 0xf0 <.GJTIE81_0_0_+0x186 : 1035a0 >
  1034b0:    d1 f4 40 49       	[r4 + 0x44] = 0x40			  ## usb_phy.c:70:22
  1034b4:    10 e0 73 00       	if (r0 == 0x1) goto 0xe6 <.GJTIE81_0_0_+0x184 : 10359e >			  ## usb_phy.c:70:22
  1034b8:    73 18             	goto 0xe6 <.GJTIE81_0_0_+0x186 : 1035a0 >			  ## usb_phy.c:70:22
  1034ba:    11 f9 00 90       	b[r9 + 0x0] = r1			  ## usb_setup.c:47:26
  1034be:    1e 18             	goto 0x3c <.GJTIE81_0_0_+0xE2 : 1034fc >			  ## usb_setup.c:47:26
  1034c0:    10 d6             	r0 = r2 >> 0x18			  ## usb_setup.c:64:17
  1034c2:    d8 fd 40 0a       	r0 <= insert(r10, p:0x8, l:0x18)			  ## usb_setup.c:64:17
  1034c6:    00 04             	r0 = r0.b0 (u)			  ## usb_setup.c:64:9
  1034c8:    30 e0 25 00       	if (r0 == 0x3) goto 0x4a <.GJTIE81_0_0_+0xFC : 103516 >			  ## usb_setup.c:64:9
  1034cc:    20 e0 2f 00       	if (r0 == 0x2) goto 0x5e <.GJTIE81_0_0_+0x114 : 10352e >
  1034d0:    10 e0 d1 1f       	if (r0 != 0x1) goto -0x5e <.GJTIE81_0_0_+0x5C : 103476 >
  1034d4:    c1 ff b2 2b 10 00 	r1 = 0x102bb2 <sDeviceDescriptor : 102bb2 >			  ## descriptor.c:71:5
  1034da:    22 71             	r2 = 0x12			  ## descriptor.c:71:5
  1034dc:    2b 71             	r11 = 0x12			  ## descriptor.c:71:5
  1034de:    23 18             	goto 0x46 <.GJTIE81_0_0_+0x10C : 103526 >			  ## descriptor.c:71:5
  1034e0:    00 f9 05 90       	r0 = b[r9 + 0x5] (u)			  ## usb_setup.c:57:49
  1034e4:    10 f9 00 80       	b[r8 + 0x0] = r0			  ## usb_setup.c:57:36
  1034e8:    18 f6 0c 90       	[r9 + 0xc] = r8			  ## usb_setup.c:58:30
  1034ec:    10 70             	r0 = 0x1			  ## usb_setup.c:58:30
  1034ee:    10 f7 02 90       	h[r9 + 0x2] = r0			  ## usb_setup.c:59:32
  1034f2:    10 f9 01 90       	b[r9 + 0x1] = r0			  ## usb_setup.c:60:27
  1034f6:    51 18             	goto 0xa2 <.GJTIE81_0_0_+0x180 : 10359a >			  ## usb_setup.c:60:27
  1034f8:    11 f9 05 90       	b[r9 + 0x5] = r1			  ## usb_setup.c:100:31
  1034fc:    00 70             	r0 = 0x0
  1034fe:    10 f9 01 90       	b[r9 + 0x1] = r0
  103502:    d1 f4 48 49       	[r4 + 0x44] = 0x48			  ## usb_phy.c:70:22
  103506:    4c 18             	goto 0x98 <.GJTIE81_0_0_+0x186 : 1035a0 >			  ## usb_phy.c:70:22
  103508:    00 f9 01 90       	r0 = b[r9 + 0x1] (u)
  10350c:    c9 1f             	goto -0x6e <.GJTIE81_0_0_+0x86 : 1034a0 >
  10350e:    01 74             	r1 = 0x40			  ## usb_setup.c:154:17
  103510:    42 16             	call -0x37c <usb_write_txcsr : 103196 >			  ## usb_setup.c:154:17
  103512:    00 70             	r0 = 0x0
  103514:    c3 1f             	goto -0x7a <.GJTIE81_0_0_+0x82 : 10349c >
  103516:    60 ff ff 19 29 00 	if ((r1 & 0xff) == 0) goto 0x52 <.GJTIE81_0_0_+0x154 : 10356e >
  10351c:    c1 ff c4 2b 10 00 	r1 = 0x102bc4 <MANUFACTURE_STR : 102bc4 >			  ## descriptor.c:79:5
  103522:    c2 71             	r2 = 0x1c			  ## descriptor.c:79:5
  103524:    cb 71             	r11 = 0x1c			  ## descriptor.c:79:5
  103526:    80 08             	r0 = r8
  103528:    bf f3 8a e5       	call -0x34ec <memmove : 100040 >
  10352c:    26 18             	goto 0x4c <.GJTIE81_0_0_+0x160 : 10357a >
  10352e:    c1 ff e0 2b 10 00 	r1 = 0x102be0 <sConfigDescriptor : 102be0 >			  ## descriptor.c:85:5
  103534:    92 70             	r2 = 0x9			  ## descriptor.c:85:5
  103536:    80 08             	r0 = r8			  ## descriptor.c:85:5
  103538:    bf f3 82 e5       	call -0x34fc <memmove : 100040 >			  ## descriptor.c:85:5
  10353c:    80 fc 09 00       	r0 = r8 + 0x9			  ## descriptor.c:85:5
  103540:    c1 ff 73 2b 10 00 	r1 = 0x102b73 <$data.__2+0x110 : 102b72 >			  ## msd.c:122:5
  103546:    72 71             	r2 = 0x17			  ## msd.c:122:5
  103548:    bf f3 7a e5       	call -0x350c <memmove : 100040 >			  ## msd.c:122:5
  10354c:    00 70             	r0 = 0x0			  ## msd.c:123:12
  10354e:    10 f9 0b 80       	b[r8 + 0xb] = r0			  ## msd.c:123:12
  103552:    c1 ff 66 32 10 00 	r1 = 0x103266 <msd_itf_hander : 103266 >			  ## usb_setup.c:143:31
  103558:    11 f6 00 b0       	[r11 + 0x0] = r1			  ## usb_setup.c:143:31
  10355c:    0b 72             	r11 = 0x20			  ## usb_setup.c:143:31
  10355e:    1b f9 02 80       	b[r8 + 0x2] = r11			  ## descriptor.c:99:10
  103562:    10 f9 03 80       	b[r8 + 0x3] = r0			  ## descriptor.c:100:10
  103566:    10 70             	r0 = 0x1			  ## descriptor.c:101:10
  103568:    10 f9 04 80       	b[r8 + 0x4] = r0			  ## descriptor.c:101:10
  10356c:    06 18             	goto 0xc <.GJTIE81_0_0_+0x160 : 10357a >			  ## descriptor.c:101:10
  10356e:    c0 ff 04 03 09 04 	r0 = 0x4090304 <__stub_uECC_vli_cmp_unsafe+0x3F89308 : 4090304 >			  ## descriptor.c:75:5
  103574:    10 f6 00 80       	[r8 + 0x0] = r0			  ## descriptor.c:75:5
  103578:    4b 70             	r11 = 0x4			  ## descriptor.c:75:5
  10357a:    18 f6 0c 90       	[r9 + 0xc] = r8
  10357e:    f2 fd 80 0a       	r0 = r10 >> 0x10			  ## usb_setup.c:190:5
  103582:    b1 08             	r1 = r11			  ## usb_setup.c:90:13
  103584:    10 f2 01 80       	if (r0 > r1) goto 0x2 <.GJTIE81_0_0_+0x170 : 10358a >			  ## usb_setup.c:90:13
  103588:    01 08             	r1 = r0			  ## usb_setup.c:90:13
  10358a:    11 f7 02 90       	h[r9 + 0x2] = r1			  ## usb_setup.c:89:32
  10358e:    11 70             	r1 = 0x1			  ## usb_setup.c:90:36
  103590:    b0 f2 01 80       	if (r0 > r11) goto 0x2 <.GJTIE81_0_0_+0x17C : 103596 >			  ## usb_setup.c:90:36
  103594:    01 70             	r1 = 0x0			  ## usb_setup.c:90:36
  103596:    11 f9 06 90       	b[r9 + 0x6] = r1
  10359a:    d1 f4 40 49       	[r4 + 0x44] = 0x40			  ## usb_phy.c:70:22
  10359e:    91 16             	call -0x2de <ep0_stage_tx : 1032c2 >
  1035a0:    55 bf             	r5 &= r7			  ## usb_onchip.c:46:13
  1035a2:    c7 ff 94 14 00 00 	r7 = 0x1494 <usb_interrupt_tx+0x4 : 1494 >
  1035a8:    16 70             	r6 = 0x1
  1035aa:    14 70             	r4 = 0x1
  1035ac:    0a 18             	goto 0x14 <.GJTIE81_0_0_+0x1A8 : 1035c2 >
  1035ae:    f8 fd 40 06       	r0 = r6 << r4			  ## usb_onchip.c:63:23
  1035b2:    0c f0 04 00       	if ((r12 & r0) == 0) goto 0x8 <.GJTIE81_0_0_+0x1A4 : 1035be >			  ## usb_onchip.c:63:23
  1035b6:    01 4e             	r1 = [r7 + 0x0]			  ## usb_onchip.c:64:17
  1035b8:    02 22             	if (r1 == 0x0) goto 0x4 <.GJTIE81_0_0_+0x1A4 : 1035be >			  ## usb_onchip.c:64:17
  1035ba:    40 08             	r0 = r4			  ## usb_onchip.c:65:17
  1035bc:    81 00             	call r1			  ## usb_onchip.c:65:17
  1035be:    47 80             	r7 += 0x4			  ## usb_onchip.c:62:5
  1035c0:    14 80             	r4 += 0x1			  ## usb_onchip.c:62:37
  1035c2:    74 e0 f4 1f       	if (r4 != 0x7) goto -0x18 <.GJTIE81_0_0_+0x194 : 1035ae >			  ## usb_onchip.c:62:5
  1035c6:    c6 ff b0 14 00 00 	r6 = 0x14b0 <usb_interrupt_rx+0x4 : 14b0 >
  1035cc:    17 70             	r7 = 0x1
  1035ce:    14 70             	r4 = 0x1
  1035d0:    0a 18             	goto 0x14 <.GJTIE81_0_0_+0x1CC : 1035e6 >
  1035d2:    f8 fd 40 07       	r0 = r7 << r4			  ## usb_onchip.c:70:23
  1035d6:    05 f0 04 00       	if ((r5 & r0) == 0) goto 0x8 <.GJTIE81_0_0_+0x1C8 : 1035e2 >			  ## usb_onchip.c:70:23
  1035da:    01 4c             	r1 = [r6 + 0x0]			  ## usb_onchip.c:71:17
  1035dc:    02 22             	if (r1 == 0x0) goto 0x4 <.GJTIE81_0_0_+0x1C8 : 1035e2 >			  ## usb_onchip.c:71:17
  1035de:    40 08             	r0 = r4			  ## usb_onchip.c:72:17
  1035e0:    81 00             	call r1			  ## usb_onchip.c:72:17
  1035e2:    46 80             	r6 += 0x4			  ## usb_onchip.c:69:5
  1035e4:    14 80             	r4 += 0x1			  ## usb_onchip.c:69:37
  1035e6:    74 e0 f4 1f       	if (r4 != 0x7) goto -0x18 <.GJTIE81_0_0_+0x1B8 : 1035d2 >
  1035ea:    04 0a             	sp += 0x8
  1035ec:    70 f3 ff 1f       	{r12-r0} = [sp++]			  ## usb_onchip.c:77:1
  1035f0:    a9 01             	{psr, rets, reti} = [sp++]			  ## usb_onchip.c:77:1
  1035f2:    22 00             	rti			  ## usb_onchip.c:77:1


usb_code_end:
  1035f4:    7f 01             	[--sp] = {rets, r15-r4}			  ## sha256.c:237:0
  1035f6:    fa 0b             	sp += -0xc			  ## sha256.c:237:0
  1035f8:    71 40             	r1 = [r0 + 0x1c]			  ## sha256.c:250:13
  1035fa:    29 02             	[sp+8] = r1			  ## sha256.c:249:13
  1035fc:    09 f6 18 00       	r9 = [r0 + 0x18]			  ## sha256.c:249:13
  103600:    52 40             	r2 = [r0 + 0x14]			  ## sha256.c:248:13
  103602:    0b f6 10 00       	r11 = [r0 + 0x10]			  ## sha256.c:247:13
  103606:    31 40             	r1 = [r0 + 0xc]			  ## sha256.c:246:13
  103608:    19 02             	[sp+4] = r1			  ## sha256.c:245:13
  10360a:    0f f6 08 00       	r15 = [r0 + 0x8]			  ## sha256.c:245:13
  10360e:    16 40             	r6 = [r0 + 0x4]			  ## sha256.c:244:13
  103610:    0a f6 00 00       	r10 = [r0 + 0x0]			  ## sha256.c:243:13
  103614:    0d fc 20 00       	r13 = r0 + 0x20			  ## sha256.c:256:10
  103618:    01 70             	r1 = 0x0			  ## sha256.c:256:10
  10361a:    07 18             	goto 0xe <usb_code_end+0x36 : 10362a >			  ## sha256.c:256:10
  10361c:    84 f6 00 d1       	r4 = [r13+r1]			  ## sha256.c:257:16
  103620:    30 fb 00 44       	r4 = rev8(r4)			  ## endian.c:58:12
  103624:    94 f6 00 d1       	[r13+r1] = r4			  ## sha256.c:257:14
  103628:    41 80             	r1 += 0x4			  ## sha256.c:256:5
  10362a:    01 e4 f7 1f       	if (r1 != 0x40) goto -0x12 <usb_code_end+0x28 : 10361c >			  ## sha256.c:256:5
  10362e:    08 02             	[sp] = r0
  103630:    0c fc 44 00       	r12 = r0 + 0x44			  ## sha256.c:238:9
  103634:    04 70             	r4 = 0x0			  ## sha256.c:238:9
  103636:    1c 18             	goto 0x38 <usb_code_end+0x7C : 103670 >			  ## sha256.c:238:9
  103638:    80 fb 40 5c       	r5 = r12 + r4			  ## sha256.c:262:16
  10363c:    01 4a             	r1 = [r5 + 0x0]			  ## sha256.c:262:35
  10363e:    03 f6 dc 5f       	r3 = [r5 + -0x24]			  ## sha256.c:262:66
  103642:    57 4a             	r7 = [r5 + 0x14]			  ## sha256.c:262:16
  103644:    31 09             	r1 += r3			  ## sha256.c:262:33
  103646:    bb d2             	r3 = r7 >> 0xa			  ## sha256.c:262:16
  103648:    f4 fd 98 87       	r8 = r7 <> 0x13			  ## sha256.c:262:16
  10364c:    e1 fd 80 33       	r3 = r3 ^ r8			  ## sha256.c:262:16
  103650:    00 f6 e0 5f       	r0 = [r5 + -0x20]			  ## sha256.c:262:46
  103654:    f4 fd 88 77       	r7 = r7 <> 0x11			  ## sha256.c:262:16
  103658:    d3 be             	r3 ^= r7			  ## sha256.c:262:16
  10365a:    31 09             	r1 += r3			  ## sha256.c:262:44
  10365c:    c3 d0             	r3 = r0 >> 0x3			  ## sha256.c:262:46
  10365e:    f4 fd 90 70       	r7 = r0 <> 0x12			  ## sha256.c:262:46
  103662:    d3 be             	r3 ^= r7			  ## sha256.c:262:46
  103664:    f4 fd 38 00       	r0 = r0 <> 0x7			  ## sha256.c:262:46
  103668:    d0 b6             	r0 ^= r3			  ## sha256.c:262:46
  10366a:    10 09             	r0 += r1			  ## sha256.c:262:64
  10366c:    78 4a             	[r5 + 0x1c] = r0			  ## sha256.c:262:14
  10366e:    44 80             	r4 += 0x4			  ## sha256.c:261:5
  103670:    01 ff c0 40 e1 ff 	if (r4 != 0xc0) goto -0x3e <usb_code_end+0x44 : 103638 >			  ## sha256.c:261:5
  103676:    04 70             	r4 = 0x0
  103678:    cc ff d8 3f 10 00 	r12 = 0x103fd8 <k : 103fd8 >
  10367e:    2e 18             	goto 0x5c <usb_code_end+0xE8 : 1036dc >
  103680:    e2 fd f0 05       	r0 = r5 & r15			  ## sha256.c:269:29
  103684:    e0 fd f0 35       	r3 = r5 | r15			  ## sha256.c:269:29
  103688:    53 bd             	r3 &= r6			  ## sha256.c:269:29
  10368a:    50 b6             	r0 |= r3			  ## sha256.c:269:29
  10368c:    f4 fd 68 36       	r3 = r6 <> 0xd			  ## sha256.c:269:17
  103690:    f4 fd 10 76       	r7 = r6 <> 0x2			  ## sha256.c:269:17
  103694:    d3 be             	r3 ^= r7			  ## sha256.c:269:17
  103696:    f4 fd b0 76       	r7 = r6 <> 0x16			  ## sha256.c:269:17
  10369a:    d3 be             	r3 ^= r7			  ## sha256.c:269:17
  10369c:    c8 b0             	r8 = r0 + r3			  ## sha256.c:269:27
  10369e:    e2 fd 20 39       	r3 = r9 & r2			  ## sha256.c:268:33
  1036a2:    e3 fd 20 7e       	r7 = r14 & ~r2			  ## sha256.c:268:33
  1036a6:    e0 fd 30 a7       	r10 = r7 | r3			  ## sha256.c:268:33
  1036aa:    f4 fd 58 72       	r7 = r2 <> 0xb			  ## sha256.c:268:21
  1036ae:    f4 fd 30 02       	r0 = r2 <> 0x6			  ## sha256.c:268:21
  1036b2:    d0 be             	r0 ^= r7			  ## sha256.c:268:21
  1036b4:    f4 fd c8 72       	r7 = r2 <> 0x19			  ## sha256.c:268:21
  1036b8:    d0 be             	r0 ^= r7			  ## sha256.c:268:21
  1036ba:    87 f6 00 4c       	r7 = [r4+r12]			  ## sha256.c:268:47
  1036be:    83 f6 00 d4       	r3 = [r13+r4]			  ## sha256.c:268:54
  1036c2:    21 02             	r1 = [sp+8]			  ## sha256.c:268:19
  1036c4:    10 09             	r0 += r1			  ## sha256.c:268:19
  1036c6:    a0 09             	r0 += r10			  ## sha256.c:268:31
  1036c8:    70 09             	r0 += r7			  ## sha256.c:268:45
  1036ca:    30 09             	r0 += r3			  ## sha256.c:268:52
  1036cc:    80 fb 00 a8       	r10 = r8 + r0			  ## sha256.c:279:19
  1036d0:    11 02             	r1 = [sp+4]			  ## sha256.c:275:15
  1036d2:    4b b0             	r11 = r0 + r1			  ## sha256.c:275:15
  1036d4:    44 80             	r4 += 0x4			  ## sha256.c:266:5
  1036d6:    1d 02             	[sp+4] = r5
  1036d8:    1e f5 08 00       	[sp+8] = r14
  1036dc:    9e 08             	r14 = r9
  1036de:    29 08             	r9 = r2
  1036e0:    b2 08             	r2 = r11
  1036e2:    f5 08             	r5 = r15
  1036e4:    6f 08             	r15 = r6
  1036e6:    a6 08             	r6 = r10
  1036e8:    01 ff 00 41 c9 ff 	if (r4 != 0x100) goto -0x6e <usb_code_end+0x8C : 103680 >
  1036ee:    03 02             	r3 = [sp]
  1036f0:    00 46             	r0 = [r3 + 0x0]			  ## sha256.c:283:19
  1036f2:    60 09             	r0 += r6			  ## sha256.c:283:19
  1036f4:    08 46             	[r3 + 0x0] = r0			  ## sha256.c:283:19
  1036f6:    10 46             	r0 = [r3 + 0x4]			  ## sha256.c:284:19
  1036f8:    f0 09             	r0 += r15			  ## sha256.c:284:19
  1036fa:    18 46             	[r3 + 0x4] = r0			  ## sha256.c:284:19
  1036fc:    20 46             	r0 = [r3 + 0x8]			  ## sha256.c:285:19
  1036fe:    50 09             	r0 += r5			  ## sha256.c:285:19
  103700:    28 46             	[r3 + 0x8] = r0			  ## sha256.c:285:19
  103702:    30 46             	r0 = [r3 + 0xc]			  ## sha256.c:286:19
  103704:    11 02             	r1 = [sp+4]			  ## sha256.c:286:19
  103706:    10 09             	r0 += r1			  ## sha256.c:286:19
  103708:    38 46             	[r3 + 0xc] = r0			  ## sha256.c:286:19
  10370a:    40 46             	r0 = [r3 + 0x10]			  ## sha256.c:287:19
  10370c:    20 09             	r0 += r2			  ## sha256.c:287:19
  10370e:    48 46             	[r3 + 0x10] = r0			  ## sha256.c:287:19
  103710:    50 46             	r0 = [r3 + 0x14]			  ## sha256.c:288:19
  103712:    90 09             	r0 += r9			  ## sha256.c:288:19
  103714:    58 46             	[r3 + 0x14] = r0			  ## sha256.c:288:19
  103716:    60 46             	r0 = [r3 + 0x18]			  ## sha256.c:289:19
  103718:    e0 09             	r0 += r14			  ## sha256.c:289:19
  10371a:    68 46             	[r3 + 0x18] = r0			  ## sha256.c:289:19
  10371c:    70 46             	r0 = [r3 + 0x1c]			  ## sha256.c:290:19
  10371e:    21 02             	r1 = [sp+8]			  ## sha256.c:290:19
  103720:    10 09             	r0 += r1			  ## sha256.c:290:19
  103722:    78 46             	[r3 + 0x1c] = r0			  ## sha256.c:290:19
  103724:    06 0a             	sp += 0xc			  ## sha256.c:290:19
  103726:    5f 01             	{pc, r15-r4} = [sp++]			  ## sha256.c:291:1


sha256Update:
  103728:    79 01             	[--sp] = {rets, r9-r4}			  ## sha256.c:164:0
  10372a:    24 08             	r4 = r2			  ## sha256.c:164:0
  10372c:    15 08             	r5 = r1			  ## sha256.c:164:0
  10372e:    09 08             	r9 = r0			  ## sha256.c:164:0
  103730:    08 fc 20 00       	r8 = r0 + 0x20			  ## sha256.c:164:0
  103734:    22 18             	goto 0x44 <sha256Update+0x52 : 10377a >			  ## sha256.c:164:0
  103736:    96 fc 20 01       	r6 = r9 + 0x120			  ## sha256.c:164:0
  10373a:    01 4c             	r1 = [r6 + 0x0]			  ## sha256.c:168:17
  10373c:    80 fb 10 08       	r0 = r8 + r1			  ## sha256.c:171:32
  103740:    61 fb 40 19       	r1 = 0x40 - r1			  ## sha256.c:168:17
  103744:    47 08             	r7 = r4			  ## sha256.c:168:17
  103746:    14 f2 01 b0       	ifs (r4 < r1) goto 0x2 <sha256Update+0x24 : 10374c >			  ## sha256.c:168:17
  10374a:    17 08             	r7 = r1			  ## sha256.c:168:17
  10374c:    51 08             	r1 = r5			  ## sha256.c:171:9
  10374e:    72 08             	r2 = r7			  ## sha256.c:171:9
  103750:    bf f3 76 e4       	call -0x3714 <memmove : 100040 >			  ## sha256.c:171:9
  103754:    00 4c             	r0 = [r6 + 0x0]			  ## sha256.c:174:23
  103756:    70 09             	r0 += r7			  ## sha256.c:174:23
  103758:    08 4c             	[r6 + 0x0] = r0			  ## sha256.c:174:23
  10375a:    11 4c             	r1 = [r6 + 0x4]			  ## sha256.c:175:28
  10375c:    22 4c             	r2 = [r6 + 0x8]			  ## sha256.c:175:28
  10375e:    fb df             	r3 = r7 >>> 0x1f			  ## sha256.c:175:31
  103760:    71 09             	r1 += r7			  ## sha256.c:175:28
  103762:    a0 fb 30 22       	r2 = r2 + r3 + c			  ## sha256.c:175:28
  103766:    2a 4c             	[r6 + 0x8] = r2			  ## sha256.c:175:28
  103768:    19 4c             	[r6 + 0x4] = r1			  ## sha256.c:175:28
  10376a:    e4 b9             	r4 = r4 - r7			  ## sha256.c:179:16
  10376c:    75 09             	r5 += r7			  ## sha256.c:177:28
  10376e:    00 e4 04 10       	if (r0 != 0x40) goto 0x8 <sha256Update+0x52 : 10377a >
  103772:    90 08             	r0 = r9			  ## sha256.c:184:13
  103774:    3f 17             	call -0x182 <usb_code_end : 1035f4 >			  ## sha256.c:184:13
  103776:    c0 f4 00 69       	[r6 + 0x0] = 0x0			  ## sha256.c:186:27
  10377a:    14 e0 dc af       	ifs (r4 >= 0x1) goto -0x48 <sha256Update+0xE : 103736 >
  10377e:    59 01             	{pc, r9-r4} = [sp++]			  ## sha256.c:189:1


sha256Final:
  103780:    77 01             	[--sp] = {rets, r7-r4}			  ## sha256.c:199:0
  103782:    04 08             	r4 = r0			  ## sha256.c:199:0
  103784:    40 fc 20 01       	r0 = r4 + 0x120			  ## sha256.c:199:0
  103788:    02 40             	r2 = [r0 + 0x0]			  ## sha256.c:208:29
  10378a:    15 08             	r5 = r1			  ## sha256.c:208:29
  10378c:    81 73             	r1 = 0x38
  10378e:    82 e3 01 b0       	ifs (r2 < 0x38) goto 0x2 <sha256Final+0x14 : 103794 >
  103792:    81 77             	r1 = 0x78			  ## sha256.c:208:19
  103794:    26 40             	r6 = [r0 + 0x8]			  ## sha256.c:205:26
  103796:    17 40             	r7 = [r0 + 0x4]			  ## sha256.c:205:26
  103798:    a2 b2             	r2 = r1 - r2			  ## sha256.c:205:26
  10379a:    c1 ff 98 3f 10 00 	r1 = 0x103f98 <padding : 103f98 >			  ## sha256.c:210:5
  1037a0:    40 08             	r0 = r4			  ## sha256.c:210:5
  1037a2:    c2 17             	call -0x7c <sha256Update : 103728 >			  ## sha256.c:210:5
  1037a4:    78 d7             	r0 = r7 >> 0x1d			  ## sha256.c:213:22
  1037a6:    dd fd 18 06       	r0 <= insert(r6, p:0x3, l:0x1d)			  ## sha256.c:213:22
  1037aa:    30 fb 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
  1037ae:    68 49             	[r4 + 0x58] = r0			  ## sha256.c:213:20
  1037b0:    f8 c0             	r0 = r7 << 0x3			  ## sha256.c:214:22
  1037b2:    30 fb 00 00       	r0 = rev8(r0)			  ## endian.c:58:12
  1037b6:    78 49             	[r4 + 0x5c] = r0			  ## sha256.c:214:20
  1037b8:    40 08             	r0 = r4			  ## sha256.c:217:5
  1037ba:    1c 17             	call -0x1c8 <usb_code_end : 1035f4 >			  ## sha256.c:217:5
  1037bc:    00 70             	r0 = 0x0
  1037be:    07 18             	goto 0xe <sha256Final+0x4E : 1037ce >
  1037c0:    81 f6 00 40       	r1 = [r4+r0]			  ## sha256.c:221:25
  1037c4:    30 fb 00 11       	r1 = rev8(r1)			  ## endian.c:58:12
  1037c8:    91 f6 00 40       	[r4+r0] = r1			  ## sha256.c:221:23
  1037cc:    40 80             	r0 += 0x4			  ## sha256.c:220:5
  1037ce:    00 e2 f7 1f       	if (r0 != 0x20) goto -0x12 <sha256Final+0x40 : 1037c0 >
  1037d2:    05 2a             	if (r5 == 0x0) goto 0xa <sha256Final+0x5E : 1037de >
  1037d4:    02 72             	r2 = 0x20			  ## sha256.c:226:9
  1037d6:    50 08             	r0 = r5			  ## sha256.c:226:9
  1037d8:    41 08             	r1 = r4			  ## sha256.c:226:9
  1037da:    bf f3 31 e4       	call -0x379e <memmove : 100040 >			  ## sha256.c:226:9
  1037de:    57 01             	{pc, r7-r4} = [sp++]			  ## sha256.c:228:1


hmacCompute:
  1037e0:    7b 01             	[--sp] = {rets, r11-r4}			  ## hmac.c:87:0
  1037e2:    38 0b             	sp += -0x190			  ## hmac.c:87:0
  1037e4:    38 08             	r8 = r3			  ## hmac.c:87:0
  1037e6:    2a 08             	r10 = r2			  ## hmac.c:87:0
  1037e8:    15 08             	r5 = r1			  ## hmac.c:87:0
  1037ea:    01 08             	r1 = r0			  ## hmac.c:87:0
  1037ec:    c0 ff d8 40 10 00 	r0 = 0x1040d8 <sha256HashAlgo : 1040d8 >			  ## hmac.c:125:19
  1037f2:    08 02             	[sp] = r0			  ## hmac.c:125:19
  1037f4:    15 e4 35 b0       	ifs (r5 < 0x41) goto 0x6a <hmacCompute+0x82 : 103862 >			  ## hmac.c:128:9
  1037f8:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_uECC_vli_cmp_unsafe+0x69F9766A : 6a09e666 >			  ## sha256.c:140:19
  1037fe:    18 02             	[sp+4] = r0			  ## sha256.c:140:19
  103800:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_uECC_vli_cmp_unsafe+0xBB573E88 : bb67ae84 >			  ## sha256.c:141:19
  103806:    28 02             	[sp+8] = r0			  ## sha256.c:141:19
  103808:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_uECC_vli_cmp_unsafe+0x3C5E8376 : 3c6ef372 >			  ## sha256.c:142:19
  10380e:    38 02             	[sp+12] = r0			  ## sha256.c:142:19
  103810:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_uECC_vli_cmp_unsafe+0xA53F853E : a54ff53a >			  ## sha256.c:143:19
  103816:    48 02             	[sp+16] = r0			  ## sha256.c:143:19
  103818:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_uECC_vli_cmp_unsafe+0x50FDE282 : 510e527e >			  ## sha256.c:144:19
  10381e:    58 02             	[sp+20] = r0			  ## sha256.c:144:19
  103820:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_uECC_vli_cmp_unsafe+0x9AF4F890 : 9b05688c >			  ## sha256.c:145:19
  103826:    68 02             	[sp+24] = r0			  ## sha256.c:145:19
  103828:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_uECC_vli_cmp_unsafe+0x1F7369AE : 1f83d9aa >			  ## sha256.c:146:19
  10382e:    78 02             	[sp+28] = r0			  ## sha256.c:146:19
  103830:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_uECC_vli_cmp_unsafe+0x5BD05D1C : 5be0cd18 >			  ## sha256.c:147:19
  103836:    88 02             	[sp+32] = r0			  ## sha256.c:147:19
  103838:    00 70             	r0 = 0x0			  ## sha256.c:147:19
  10383a:    10 f5 24 01       	[sp+292] = r0			  ## sha256.c:150:19
  10383e:    10 f5 2c 01       	[sp+300] = r0			  ## sha256.c:152:24
  103842:    10 f5 28 01       	[sp+296] = r0			  ## sha256.c:152:24
  103846:    04 a0             	r4 = sp + 0			  ## sha256.c:152:24
  103848:    46 98             	r6 = r4 + 0x4			  ## hmac.c:130:20
  10384a:    60 08             	r0 = r6			  ## hmac.c:132:9
  10384c:    52 08             	r2 = r5			  ## hmac.c:132:9
  10384e:    6c 17             	call -0x128 <sha256Update : 103728 >			  ## hmac.c:132:9
  103850:    41 fc 30 01       	r1 = r4 + 0x130			  ## hmac.c:134:43
  103854:    60 08             	r0 = r6			  ## hmac.c:134:9
  103856:    94 17             	call -0xd8 <sha256Final : 103780 >			  ## hmac.c:134:9
  103858:    40 fc 50 01       	r0 = r4 + 0x150			  ## hmac.c:136:29
  10385c:    01 70             	r1 = 0x0			  ## hmac.c:136:9
  10385e:    02 72             	r2 = 0x20			  ## hmac.c:136:9
  103860:    0b 18             	goto 0x16 <hmacCompute+0x98 : 103878 >			  ## hmac.c:136:9
  103862:    00 a0             	r0 = sp + 0
  103864:    06 fc 30 01       	r6 = r0 + 0x130			  ## hmac.c:139:9
  103868:    60 08             	r0 = r6			  ## hmac.c:139:9
  10386a:    52 08             	r2 = r5			  ## hmac.c:139:9
  10386c:    bf f3 e8 e3       	call -0x3830 <memmove : 100040 >			  ## hmac.c:139:9
  103870:    40 bd             	r0 = r6 + r5			  ## hmac.c:141:29
  103872:    62 fb 40 59       	r2 = 0x40 - r5			  ## hmac.c:141:61
  103876:    01 70             	r1 = 0x0			  ## hmac.c:141:9
  103878:    bf f3 79 e4       	call -0x370e <memset : 10016e >
  10387c:    09 f5 b4 01       	r9 = [sp+436]
  103880:    00 a0             	r0 = sp + 0
  103882:    00 fc 30 01       	r0 = r0 + 0x130			  ## hmac.c:122:9
  103886:    01 70             	r1 = 0x0			  ## hmac.c:122:9
  103888:    07 18             	goto 0xe <hmacCompute+0xB8 : 103898 >			  ## hmac.c:122:9
  10388a:    02 fa 00 01       	r2 = b[r0+r1] (u)			  ## hmac.c:146:25
  10388e:    12 fd 36 29       	r2 = r2 ^ 0x36			  ## hmac.c:146:25
  103892:    12 fa 00 01       	b[r0+r1] = r2			  ## hmac.c:146:25
  103896:    11 80             	r1 += 0x1			  ## hmac.c:145:39
  103898:    01 e4 f7 1f       	if (r1 != 0x40) goto -0x12 <hmacCompute+0xAA : 10388a >
  10389c:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_uECC_vli_cmp_unsafe+0x69F9766A : 6a09e666 >			  ## sha256.c:140:19
  1038a2:    18 02             	[sp+4] = r0			  ## sha256.c:140:19
  1038a4:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_uECC_vli_cmp_unsafe+0xBB573E88 : bb67ae84 >			  ## sha256.c:141:19
  1038aa:    28 02             	[sp+8] = r0			  ## sha256.c:141:19
  1038ac:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_uECC_vli_cmp_unsafe+0x3C5E8376 : 3c6ef372 >			  ## sha256.c:142:19
  1038b2:    38 02             	[sp+12] = r0			  ## sha256.c:142:19
  1038b4:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_uECC_vli_cmp_unsafe+0xA53F853E : a54ff53a >			  ## sha256.c:143:19
  1038ba:    48 02             	[sp+16] = r0			  ## sha256.c:143:19
  1038bc:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_uECC_vli_cmp_unsafe+0x50FDE282 : 510e527e >			  ## sha256.c:144:19
  1038c2:    58 02             	[sp+20] = r0			  ## sha256.c:144:19
  1038c4:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_uECC_vli_cmp_unsafe+0x9AF4F890 : 9b05688c >			  ## sha256.c:145:19
  1038ca:    68 02             	[sp+24] = r0			  ## sha256.c:145:19
  1038cc:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_uECC_vli_cmp_unsafe+0x1F7369AE : 1f83d9aa >			  ## sha256.c:146:19
  1038d2:    78 02             	[sp+28] = r0			  ## sha256.c:146:19
  1038d4:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_uECC_vli_cmp_unsafe+0x5BD05D1C : 5be0cd18 >			  ## sha256.c:147:19
  1038da:    88 02             	[sp+32] = r0			  ## sha256.c:147:19
  1038dc:    04 70             	r4 = 0x0			  ## sha256.c:147:19
  1038de:    14 f5 24 01       	[sp+292] = r4			  ## sha256.c:150:19
  1038e2:    14 f5 2c 01       	[sp+300] = r4			  ## sha256.c:152:24
  1038e6:    14 f5 28 01       	[sp+296] = r4			  ## sha256.c:152:24
  1038ea:    0b a0             	r11 = sp + 0			  ## sha256.c:152:24
  1038ec:    b7 fc 04 00       	r7 = r11 + 0x4			  ## hmac.c:150:16
  1038f0:    b5 fc 30 01       	r5 = r11 + 0x130			  ## hmac.c:152:40
  1038f4:    02 74             	r2 = 0x40			  ## hmac.c:152:5
  1038f6:    70 08             	r0 = r7			  ## hmac.c:152:5
  1038f8:    51 08             	r1 = r5			  ## hmac.c:152:5
  1038fa:    16 17             	call -0x1d4 <sha256Update : 103728 >			  ## hmac.c:152:5
  1038fc:    00 02             	r0 = [sp]			  ## hmac.c:166:37
  1038fe:    83 40             	r3 = [r0 + 0x20]			  ## hmac.c:168:11
  103900:    70 08             	r0 = r7			  ## hmac.c:168:5
  103902:    a1 08             	r1 = r10			  ## hmac.c:168:5
  103904:    82 08             	r2 = r8			  ## hmac.c:168:5
  103906:    83 00             	call r3			  ## hmac.c:168:5
  103908:    06 02             	r6 = [sp]			  ## hmac.c:183:37
  10390a:    92 4c             	r2 = [r6 + 0x24]			  ## hmac.c:185:11
  10390c:    b8 fc 70 01       	r8 = r11 + 0x170			  ## hmac.c:185:39
  103910:    70 08             	r0 = r7			  ## hmac.c:185:5
  103912:    81 08             	r1 = r8			  ## hmac.c:185:5
  103914:    82 00             	call r2			  ## hmac.c:185:5
  103916:    07 18             	goto 0xe <hmacCompute+0x146 : 103926 >
  103918:    00 fa 00 54       	r0 = b[r5+r4] (u)			  ## hmac.c:189:25
  10391c:    10 fd 6a 09       	r0 = r0 ^ 0x6a			  ## hmac.c:189:25
  103920:    10 fa 00 54       	b[r5+r4] = r0			  ## hmac.c:189:25
  103924:    14 80             	r4 += 0x1			  ## hmac.c:188:39
  103926:    40 4c             	r0 = [r6 + 0x10]			  ## hmac.c:188:27
  103928:    04 f2 f6 3f       	if (r4 < r0) goto -0x14 <hmacCompute+0x138 : 103918 >			  ## hmac.c:188:27
  10392c:    71 4c             	r1 = [r6 + 0x1c]			  ## hmac.c:193:11
  10392e:    70 08             	r0 = r7			  ## hmac.c:193:5
  103930:    81 00             	call r1			  ## hmac.c:193:5
  103932:    42 4c             	r2 = [r6 + 0x10]			  ## hmac.c:195:60
  103934:    83 4c             	r3 = [r6 + 0x20]			  ## hmac.c:195:11
  103936:    70 08             	r0 = r7			  ## hmac.c:195:5
  103938:    51 08             	r1 = r5			  ## hmac.c:195:5
  10393a:    83 00             	call r3			  ## hmac.c:195:5
  10393c:    52 4c             	r2 = [r6 + 0x14]			  ## hmac.c:197:63
  10393e:    83 4c             	r3 = [r6 + 0x20]			  ## hmac.c:197:11
  103940:    70 08             	r0 = r7			  ## hmac.c:197:5
  103942:    81 08             	r1 = r8			  ## hmac.c:197:5
  103944:    83 00             	call r3			  ## hmac.c:197:5
  103946:    92 4c             	r2 = [r6 + 0x24]			  ## hmac.c:199:11
  103948:    70 08             	r0 = r7			  ## hmac.c:199:5
  10394a:    81 08             	r1 = r8			  ## hmac.c:199:5
  10394c:    82 00             	call r2			  ## hmac.c:199:5
  10394e:    09 e0 05 00       	if (r9 == 0x0) goto 0xa <hmacCompute+0x17C : 10395c >
  103952:    52 4c             	r2 = [r6 + 0x14]			  ## hmac.c:203:47
  103954:    90 08             	r0 = r9			  ## hmac.c:203:9
  103956:    81 08             	r1 = r8			  ## hmac.c:203:9
  103958:    bf f3 72 e3       	call -0x391c <memmove : 100040 >			  ## hmac.c:203:9
  10395c:    c8 0a             	sp += 0x190
  10395e:    5b 01             	{pc, r11-r4} = [sp++]


sha256Compute:
  103960:    75 01             	[--sp] = {rets, r5, r4}			  ## sha256.c:108:0
  103962:    6a 0b             	sp += -0x12c			  ## sha256.c:108:0
  103964:    24 08             	r4 = r2			  ## sha256.c:108:0
  103966:    12 08             	r2 = r1			  ## sha256.c:108:0
  103968:    01 08             	r1 = r0			  ## sha256.c:108:0
  10396a:    c0 ff 67 e6 09 6a 	r0 = 0x6a09e667 <__stub_uECC_vli_cmp_unsafe+0x69F9766A : 6a09e666 >			  ## sha256.c:140:19
  103970:    08 02             	[sp] = r0			  ## sha256.c:140:19
  103972:    c0 ff 85 ae 67 bb 	r0 = 0xbb67ae85 <__stub_uECC_vli_cmp_unsafe+0xBB573E88 : bb67ae84 >			  ## sha256.c:141:19
  103978:    18 02             	[sp+4] = r0			  ## sha256.c:141:19
  10397a:    c0 ff 72 f3 6e 3c 	r0 = 0x3c6ef372 <__stub_uECC_vli_cmp_unsafe+0x3C5E8376 : 3c6ef372 >			  ## sha256.c:142:19
  103980:    28 02             	[sp+8] = r0			  ## sha256.c:142:19
  103982:    c0 ff 3a f5 4f a5 	r0 = 0xa54ff53a <__stub_uECC_vli_cmp_unsafe+0xA53F853E : a54ff53a >			  ## sha256.c:143:19
  103988:    38 02             	[sp+12] = r0			  ## sha256.c:143:19
  10398a:    c0 ff 7f 52 0e 51 	r0 = 0x510e527f <__stub_uECC_vli_cmp_unsafe+0x50FDE282 : 510e527e >			  ## sha256.c:144:19
  103990:    48 02             	[sp+16] = r0			  ## sha256.c:144:19
  103992:    c0 ff 8c 68 05 9b 	r0 = 0x9b05688c <__stub_uECC_vli_cmp_unsafe+0x9AF4F890 : 9b05688c >			  ## sha256.c:145:19
  103998:    58 02             	[sp+20] = r0			  ## sha256.c:145:19
  10399a:    c0 ff ab d9 83 1f 	r0 = 0x1f83d9ab <__stub_uECC_vli_cmp_unsafe+0x1F7369AE : 1f83d9aa >			  ## sha256.c:146:19
  1039a0:    68 02             	[sp+24] = r0			  ## sha256.c:146:19
  1039a2:    c0 ff 19 cd e0 5b 	r0 = 0x5be0cd19 <__stub_uECC_vli_cmp_unsafe+0x5BD05D1C : 5be0cd18 >			  ## sha256.c:147:19
  1039a8:    78 02             	[sp+28] = r0			  ## sha256.c:147:19
  1039aa:    00 70             	r0 = 0x0			  ## sha256.c:147:19
  1039ac:    10 f5 20 01       	[sp+288] = r0			  ## sha256.c:150:19
  1039b0:    10 f5 28 01       	[sp+296] = r0			  ## sha256.c:152:24
  1039b4:    10 f5 24 01       	[sp+292] = r0			  ## sha256.c:152:24
  1039b8:    05 a0             	r5 = sp + 0			  ## sha256.c:152:24
  1039ba:    50 08             	r0 = r5			  ## sha256.c:121:5
  1039bc:    b5 16             	call -0x296 <sha256Update : 103728 >			  ## sha256.c:121:5
  1039be:    50 08             	r0 = r5			  ## sha256.c:123:5
  1039c0:    41 08             	r1 = r4			  ## sha256.c:123:5
  1039c2:    de 16             	call -0x244 <sha256Final : 103780 >			  ## sha256.c:123:5
  1039c4:    10 70             	r0 = 0x1			  ## sha256.c:129:1
  1039c6:    96 0a             	sp += 0x12c			  ## sha256.c:129:1
  1039c8:    55 01             	{pc, r5, r4} = [sp++]			  ## sha256.c:129:1


sha256Init:
  1039ca:    c1 ff 67 e6 09 6a 	r1 = 0x6a09e667 <__stub_uECC_vli_cmp_unsafe+0x69F9766A : 6a09e666 >			  ## sha256.c:138:0
  1039d0:    09 40             	[r0 + 0x0] = r1			  ## sha256.c:140:19
  1039d2:    c1 ff 85 ae 67 bb 	r1 = 0xbb67ae85 <__stub_uECC_vli_cmp_unsafe+0xBB573E88 : bb67ae84 >			  ## sha256.c:141:19
  1039d8:    19 40             	[r0 + 0x4] = r1			  ## sha256.c:141:19
  1039da:    c1 ff 72 f3 6e 3c 	r1 = 0x3c6ef372 <__stub_uECC_vli_cmp_unsafe+0x3C5E8376 : 3c6ef372 >			  ## sha256.c:142:19
  1039e0:    29 40             	[r0 + 0x8] = r1			  ## sha256.c:142:19
  1039e2:    c1 ff 3a f5 4f a5 	r1 = 0xa54ff53a <__stub_uECC_vli_cmp_unsafe+0xA53F853E : a54ff53a >			  ## sha256.c:143:19
  1039e8:    39 40             	[r0 + 0xc] = r1			  ## sha256.c:143:19
  1039ea:    c1 ff 7f 52 0e 51 	r1 = 0x510e527f <__stub_uECC_vli_cmp_unsafe+0x50FDE282 : 510e527e >			  ## sha256.c:144:19
  1039f0:    49 40             	[r0 + 0x10] = r1			  ## sha256.c:144:19
  1039f2:    c1 ff 8c 68 05 9b 	r1 = 0x9b05688c <__stub_uECC_vli_cmp_unsafe+0x9AF4F890 : 9b05688c >			  ## sha256.c:145:19
  1039f8:    59 40             	[r0 + 0x14] = r1			  ## sha256.c:145:19
  1039fa:    c1 ff ab d9 83 1f 	r1 = 0x1f83d9ab <__stub_uECC_vli_cmp_unsafe+0x1F7369AE : 1f83d9aa >			  ## sha256.c:146:19
  103a00:    69 40             	[r0 + 0x18] = r1			  ## sha256.c:146:19
  103a02:    c1 ff 19 cd e0 5b 	r1 = 0x5be0cd19 <__stub_uECC_vli_cmp_unsafe+0x5BD05D1C : 5be0cd18 >			  ## sha256.c:147:19
  103a08:    79 40             	[r0 + 0x1c] = r1			  ## sha256.c:147:19
  103a0a:    01 70             	r1 = 0x0			  ## sha256.c:147:19
  103a0c:    00 fc 20 01       	r0 = r0 + 0x120			  ## sha256.c:147:19
  103a10:    09 40             	[r0 + 0x0] = r1			  ## sha256.c:150:19
  103a12:    29 40             	[r0 + 0x8] = r1			  ## sha256.c:152:24
  103a14:    19 40             	[r0 + 0x4] = r1			  ## sha256.c:152:24
  103a16:    20 00             	rts			  ## sha256.c:153:1


f1_hash_function:
  103a18:    77 01             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:14:0
  103a1a:    d4 0b             	sp += -0x58			  ## Crypto_hash.c:14:0
  103a1c:    34 08             	r4 = r3			  ## Crypto_hash.c:14:0
  103a1e:    25 08             	r5 = r2			  ## Crypto_hash.c:14:0
  103a20:    16 08             	r6 = r1			  ## Crypto_hash.c:14:0
  103a22:    01 08             	r1 = r0			  ## Crypto_hash.c:14:0
  103a24:    77 a2             	r7 = sp + 39			  ## Crypto_hash.c:14:0
  103a26:    82 71             	r2 = 0x18			  ## Crypto_hash.c:20:5
  103a28:    70 08             	r0 = r7			  ## Crypto_hash.c:20:5
  103a2a:    bf f3 09 e3       	call -0x39ee <memmove : 100040 >			  ## Crypto_hash.c:20:5
  103a2e:    80 9f             	r0 = r7 + 0x18			  ## Crypto_hash.c:21:20
  103a30:    82 71             	r2 = 0x18			  ## Crypto_hash.c:21:5
  103a32:    61 08             	r1 = r6			  ## Crypto_hash.c:21:5
  103a34:    bf f3 04 e3       	call -0x39f8 <memmove : 100040 >			  ## Crypto_hash.c:21:5
  103a38:    00 68             	r0 = b[r4 + 0x0] (u)			  ## Crypto_hash.c:23:42
  103a3a:    d0 f5 57 00       	b[sp+87] = r0			  ## Crypto_hash.c:23:40
  103a3e:    74 a0             	r4 = sp + 7			  ## Crypto_hash.c:23:40
  103a40:    01 71             	r1 = 0x10			  ## Crypto_hash.c:24:5
  103a42:    13 73             	r3 = 0x31			  ## Crypto_hash.c:24:5
  103a44:    0c 02             	[sp] = r4			  ## Crypto_hash.c:24:5
  103a46:    50 08             	r0 = r5			  ## Crypto_hash.c:24:5
  103a48:    72 08             	r2 = r7			  ## Crypto_hash.c:24:5
  103a4a:    bf f3 c9 fe       	call -0x26e <hmacCompute : 1037e0 >			  ## Crypto_hash.c:24:5
  103a4e:    b0 03             	r0 = [sp+108]
  103a50:    02 71             	r2 = 0x10			  ## Crypto_hash.c:26:5
  103a52:    41 08             	r1 = r4			  ## Crypto_hash.c:26:5
  103a54:    bf f3 f4 e2       	call -0x3a18 <memmove : 100040 >			  ## Crypto_hash.c:26:5
  103a58:    2c 0a             	sp += 0x58			  ## Crypto_hash.c:26:5
  103a5a:    57 01             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:27:1


g_hash_function:
  103a5c:    77 01             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:30:0
  103a5e:    b8 0b             	sp += -0x90			  ## Crypto_hash.c:30:0
  103a60:    35 08             	r5 = r3			  ## Crypto_hash.c:30:0
  103a62:    26 08             	r6 = r2			  ## Crypto_hash.c:30:0
  103a64:    17 08             	r7 = r1			  ## Crypto_hash.c:30:0
  103a66:    01 08             	r1 = r0			  ## Crypto_hash.c:30:0
  103a68:    04 a4             	r4 = sp + 64			  ## Crypto_hash.c:30:0
  103a6a:    82 71             	r2 = 0x18			  ## Crypto_hash.c:35:5
  103a6c:    40 08             	r0 = r4			  ## Crypto_hash.c:35:5
  103a6e:    bf f3 e7 e2       	call -0x3a32 <memmove : 100040 >			  ## Crypto_hash.c:35:5
  103a72:    80 99             	r0 = r4 + 0x18			  ## Crypto_hash.c:36:20
  103a74:    82 71             	r2 = 0x18			  ## Crypto_hash.c:36:5
  103a76:    71 08             	r1 = r7			  ## Crypto_hash.c:36:5
  103a78:    bf f3 e2 e2       	call -0x3a3c <memmove : 100040 >			  ## Crypto_hash.c:36:5
  103a7c:    40 fc 30 00       	r0 = r4 + 0x30			  ## Crypto_hash.c:37:20
  103a80:    02 71             	r2 = 0x10			  ## Crypto_hash.c:37:5
  103a82:    61 08             	r1 = r6			  ## Crypto_hash.c:37:5
  103a84:    bf f3 dc e2       	call -0x3a48 <memmove : 100040 >			  ## Crypto_hash.c:37:5
  103a88:    40 fc 40 00       	r0 = r4 + 0x40			  ## Crypto_hash.c:38:35
  103a8c:    02 71             	r2 = 0x10			  ## Crypto_hash.c:38:5
  103a8e:    51 08             	r1 = r5			  ## Crypto_hash.c:38:5
  103a90:    bf f3 d6 e2       	call -0x3a54 <memmove : 100040 >			  ## Crypto_hash.c:38:5
  103a94:    02 a0             	r2 = sp + 0
  103a96:    01 75             	r1 = 0x50			  ## Crypto_hash.c:39:5
  103a98:    40 08             	r0 = r4			  ## Crypto_hash.c:39:5
  103a9a:    bf f3 61 ff       	call -0x13e <sha256Compute : 103960 >			  ## Crypto_hash.c:39:5
  103a9e:    c0 f5 1f 00       	r0 = b[sp+31] (u)			  ## Crypto_hash.c:41:5
  103aa2:    01 f5 a4 00       	r1 = [sp+164]			  ## Crypto_hash.c:41:5
  103aa6:    c2 f5 1d 00       	r2 = b[sp+29] (u)			  ## Crypto_hash.c:41:5
  103aaa:    c3 f5 1c 00       	r3 = b[sp+28] (u)			  ## Crypto_hash.c:41:5
  103aae:    c4 f5 1e 00       	r4 = b[sp+30] (u)			  ## Crypto_hash.c:41:5
  103ab2:    38 62             	b[r1 + 0x3] = r0			  ## Crypto_hash.c:41:5
  103ab4:    1a 62             	b[r1 + 0x1] = r2			  ## Crypto_hash.c:41:5
  103ab6:    0b 62             	b[r1 + 0x0] = r3			  ## Crypto_hash.c:41:5
  103ab8:    c8 fd 40 40       	r4 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:41:5
  103abc:    d0 fd 80 34       	r3 <= insert(r4, p:0x10, l:0x10)			  ## Crypto_hash.c:41:5
  103ac0:    18 d4             	r0 = r3 >> 0x10			  ## Crypto_hash.c:41:5
  103ac2:    28 62             	b[r1 + 0x2] = r0			  ## Crypto_hash.c:41:5
  103ac4:    48 0a             	sp += 0x90			  ## Crypto_hash.c:41:5
  103ac6:    57 01             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:42:1


f2_hash_function:
  103ac8:    77 01             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:45:0
  103aca:    d6 0b             	sp += -0x54			  ## Crypto_hash.c:45:0
  103acc:    36 08             	r6 = r3			  ## Crypto_hash.c:45:0
  103ace:    27 08             	r7 = r2			  ## Crypto_hash.c:45:0
  103ad0:    04 08             	r4 = r0			  ## Crypto_hash.c:45:0
  103ad2:    45 a2             	r5 = sp + 36			  ## Crypto_hash.c:45:0
  103ad4:    02 71             	r2 = 0x10			  ## Crypto_hash.c:49:5
  103ad6:    50 08             	r0 = r5			  ## Crypto_hash.c:49:5
  103ad8:    bf f3 b2 e2       	call -0x3a9c <memmove : 100040 >			  ## Crypto_hash.c:49:5
  103adc:    00 9b             	r0 = r5 + 0x10			  ## Crypto_hash.c:50:20
  103ade:    02 71             	r2 = 0x10			  ## Crypto_hash.c:50:5
  103ae0:    71 08             	r1 = r7			  ## Crypto_hash.c:50:5
  103ae2:    bf f3 ad e2       	call -0x3aa6 <memmove : 100040 >			  ## Crypto_hash.c:50:5
  103ae6:    30 6c             	r0 = b[r6 + 0x3] (u)			  ## Crypto_hash.c:51:5
  103ae8:    11 6c             	r1 = b[r6 + 0x1] (u)			  ## Crypto_hash.c:51:5
  103aea:    02 6c             	r2 = b[r6 + 0x0] (u)			  ## Crypto_hash.c:51:5
  103aec:    23 6c             	r3 = b[r6 + 0x2] (u)			  ## Crypto_hash.c:51:5
  103aee:    d0 f5 47 00       	b[sp+71] = r0			  ## Crypto_hash.c:51:5
  103af2:    d1 f5 45 00       	b[sp+69] = r1			  ## Crypto_hash.c:51:5
  103af6:    d2 f5 44 00       	b[sp+68] = r2			  ## Crypto_hash.c:51:5
  103afa:    c8 fd 40 30       	r3 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:51:5
  103afe:    d0 fd 80 23       	r2 <= insert(r3, p:0x10, l:0x10)			  ## Crypto_hash.c:51:5
  103b02:    10 d4             	r0 = r2 >> 0x10			  ## Crypto_hash.c:51:5
  103b04:    d0 f5 46 00       	b[sp+70] = r0			  ## Crypto_hash.c:51:5
  103b08:    a1 03             	r1 = [sp+104]			  ## Crypto_hash.c:51:5
  103b0a:    50 fc 24 00       	r0 = r5 + 0x24			  ## Crypto_hash.c:52:20
  103b0e:    62 70             	r2 = 0x6			  ## Crypto_hash.c:52:5
  103b10:    bf f3 96 e2       	call -0x3ad4 <memmove : 100040 >			  ## Crypto_hash.c:52:5
  103b14:    b1 03             	r1 = [sp+108]			  ## Crypto_hash.c:52:5
  103b16:    50 fc 2a 00       	r0 = r5 + 0x2a			  ## Crypto_hash.c:53:20
  103b1a:    62 70             	r2 = 0x6			  ## Crypto_hash.c:53:5
  103b1c:    bf f3 90 e2       	call -0x3ae0 <memmove : 100040 >			  ## Crypto_hash.c:53:5
  103b20:    46 a0             	r6 = sp + 4			  ## Crypto_hash.c:53:5
  103b22:    81 71             	r1 = 0x18			  ## Crypto_hash.c:54:5
  103b24:    03 73             	r3 = 0x30			  ## Crypto_hash.c:54:5
  103b26:    0e 02             	[sp] = r6			  ## Crypto_hash.c:54:5
  103b28:    40 08             	r0 = r4			  ## Crypto_hash.c:54:5
  103b2a:    52 08             	r2 = r5			  ## Crypto_hash.c:54:5
  103b2c:    bf f3 58 fe       	call -0x350 <hmacCompute : 1037e0 >			  ## Crypto_hash.c:54:5
  103b30:    c0 03             	r0 = [sp+112]
  103b32:    02 71             	r2 = 0x10			  ## Crypto_hash.c:55:5
  103b34:    61 08             	r1 = r6			  ## Crypto_hash.c:55:5
  103b36:    bf f3 83 e2       	call -0x3afa <memmove : 100040 >			  ## Crypto_hash.c:55:5
  103b3a:    2a 0a             	sp += 0x54			  ## Crypto_hash.c:55:5
  103b3c:    57 01             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:56:1


f3_hash_function:
  103b3e:    77 01             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:67:0
  103b40:    ce 0b             	sp += -0x64			  ## Crypto_hash.c:67:0
  103b42:    36 08             	r6 = r3			  ## Crypto_hash.c:67:0
  103b44:    27 08             	r7 = r2			  ## Crypto_hash.c:67:0
  103b46:    04 08             	r4 = r0			  ## Crypto_hash.c:67:0
  103b48:    55 a2             	r5 = sp + 37			  ## Crypto_hash.c:67:0
  103b4a:    02 71             	r2 = 0x10			  ## Crypto_hash.c:71:5
  103b4c:    50 08             	r0 = r5			  ## Crypto_hash.c:71:5
  103b4e:    bf f3 77 e2       	call -0x3b12 <memmove : 100040 >			  ## Crypto_hash.c:71:5
  103b52:    00 9b             	r0 = r5 + 0x10			  ## Crypto_hash.c:72:20
  103b54:    02 71             	r2 = 0x10			  ## Crypto_hash.c:72:5
  103b56:    71 08             	r1 = r7			  ## Crypto_hash.c:72:5
  103b58:    bf f3 72 e2       	call -0x3b1c <memmove : 100040 >			  ## Crypto_hash.c:72:5
  103b5c:    50 fc 20 00       	r0 = r5 + 0x20			  ## Crypto_hash.c:73:20
  103b60:    02 71             	r2 = 0x10			  ## Crypto_hash.c:73:5
  103b62:    61 08             	r1 = r6			  ## Crypto_hash.c:73:5
  103b64:    bf f3 6c e2       	call -0x3b28 <memmove : 100040 >			  ## Crypto_hash.c:73:5
  103b68:    e1 03             	r1 = [sp+120]
  103b6a:    50 fc 30 00       	r0 = r5 + 0x30			  ## Crypto_hash.c:74:20
  103b6e:    32 70             	r2 = 0x3			  ## Crypto_hash.c:74:5
  103b70:    bf f3 66 e2       	call -0x3b34 <memmove : 100040 >			  ## Crypto_hash.c:74:5
  103b74:    f1 03             	r1 = [sp+124]			  ## Crypto_hash.c:74:5
  103b76:    50 fc 33 00       	r0 = r5 + 0x33			  ## Crypto_hash.c:75:20
  103b7a:    62 70             	r2 = 0x6			  ## Crypto_hash.c:75:5
  103b7c:    bf f3 60 e2       	call -0x3b40 <memmove : 100040 >			  ## Crypto_hash.c:75:5
  103b80:    01 f5 80 00       	r1 = [sp+128]			  ## Crypto_hash.c:75:5
  103b84:    50 fc 39 00       	r0 = r5 + 0x39			  ## Crypto_hash.c:76:20
  103b88:    62 70             	r2 = 0x6			  ## Crypto_hash.c:76:5
  103b8a:    bf f3 59 e2       	call -0x3b4e <memmove : 100040 >			  ## Crypto_hash.c:76:5
  103b8e:    56 a0             	r6 = sp + 5			  ## Crypto_hash.c:76:5
  103b90:    81 71             	r1 = 0x18			  ## Crypto_hash.c:77:5
  103b92:    f3 73             	r3 = 0x3f			  ## Crypto_hash.c:77:5
  103b94:    0e 02             	[sp] = r6			  ## Crypto_hash.c:77:5
  103b96:    40 08             	r0 = r4			  ## Crypto_hash.c:77:5
  103b98:    52 08             	r2 = r5			  ## Crypto_hash.c:77:5
  103b9a:    bf f3 21 fe       	call -0x3be <hmacCompute : 1037e0 >			  ## Crypto_hash.c:77:5
  103b9e:    00 f5 84 00       	r0 = [sp+132]
  103ba2:    02 71             	r2 = 0x10			  ## Crypto_hash.c:78:5
  103ba4:    61 08             	r1 = r6			  ## Crypto_hash.c:78:5
  103ba6:    bf f3 4b e2       	call -0x3b6a <memmove : 100040 >			  ## Crypto_hash.c:78:5
  103baa:    32 0a             	sp += 0x64			  ## Crypto_hash.c:78:5
  103bac:    57 01             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:79:1


h2_hash_function:
  103bae:    76 01             	[--sp] = {rets, r6-r4}			  ## Crypto_hash.c:86:0
  103bb0:    ee 0b             	sp += -0x24			  ## Crypto_hash.c:86:0
  103bb2:    34 08             	r4 = r3			  ## Crypto_hash.c:86:0
  103bb4:    25 08             	r5 = r2			  ## Crypto_hash.c:86:0
  103bb6:    12 08             	r2 = r1			  ## Crypto_hash.c:86:0
  103bb8:    46 a0             	r6 = sp + 4			  ## Crypto_hash.c:86:0
  103bba:    01 72             	r1 = 0x20			  ## Crypto_hash.c:89:5
  103bbc:    43 70             	r3 = 0x4			  ## Crypto_hash.c:89:5
  103bbe:    0e 02             	[sp] = r6			  ## Crypto_hash.c:89:5
  103bc0:    bf f3 0e fe       	call -0x3e4 <hmacCompute : 1037e0 >			  ## Crypto_hash.c:89:5
  103bc4:    02 6a             	r2 = b[r5 + 0x0] (u)			  ## Crypto_hash.c:91:24
  103bc6:    40 08             	r0 = r4			  ## Crypto_hash.c:91:5
  103bc8:    61 08             	r1 = r6			  ## Crypto_hash.c:91:5
  103bca:    bf f3 39 e2       	call -0x3b8e <memmove : 100040 >			  ## Crypto_hash.c:91:5
  103bce:    12 0a             	sp += 0x24
  103bd0:    56 01             	{pc, r6-r4} = [sp++]			  ## Crypto_hash.c:92:1


h3_hash_function:
  103bd2:    79 01             	[--sp] = {rets, r9-r4}			  ## Crypto_hash.c:101:0
  103bd4:    e2 0b             	sp += -0x3c			  ## Crypto_hash.c:101:0
  103bd6:    35 62             	r5 = b[r1 + 0x3] (u)			  ## Crypto_hash.c:105:5
  103bd8:    27 62             	r7 = b[r1 + 0x2] (u)			  ## Crypto_hash.c:105:5
  103bda:    14 62             	r4 = b[r1 + 0x1] (u)			  ## Crypto_hash.c:105:5
  103bdc:    06 62             	r6 = b[r1 + 0x0] (u)			  ## Crypto_hash.c:105:5
  103bde:    39 08             	r9 = r3			  ## Crypto_hash.c:105:5
  103be0:    21 08             	r1 = r2
  103be2:    08 08             	r8 = r0
  103be4:    c8 fd 40 75       	r7 <= insert(r5, p:0x8, l:0x8)			  ## Crypto_hash.c:105:5
  103be8:    c8 fd 40 64       	r6 <= insert(r4, p:0x8, l:0x8)			  ## Crypto_hash.c:105:5
  103bec:    d0 fd 80 67       	r6 <= insert(r7, p:0x10, l:0x10)			  ## Crypto_hash.c:105:5
  103bf0:    9e 02             	[sp+36] = r6			  ## Crypto_hash.c:105:5
  103bf2:    45 a2             	r5 = sp + 36			  ## Crypto_hash.c:105:5
  103bf4:    40 9a             	r0 = r5 + 0x4			  ## Crypto_hash.c:106:20
  103bf6:    62 70             	r2 = 0x6			  ## Crypto_hash.c:106:5
  103bf8:    bf f3 22 e2       	call -0x3bbc <memmove : 100040 >			  ## Crypto_hash.c:106:5
  103bfc:    a0 9a             	r0 = r5 + 0xa			  ## Crypto_hash.c:107:20
  103bfe:    62 70             	r2 = 0x6			  ## Crypto_hash.c:107:5
  103c00:    91 08             	r1 = r9			  ## Crypto_hash.c:107:5
  103c02:    bf f3 1d e2       	call -0x3bc6 <memmove : 100040 >			  ## Crypto_hash.c:107:5
  103c06:    60 03             	r0 = [sp+88]
  103c08:    71 60             	r1 = b[r0 + 0x7] (u)			  ## Crypto_hash.c:108:5
  103c0a:    62 60             	r2 = b[r0 + 0x6] (u)			  ## Crypto_hash.c:108:5
  103c0c:    53 60             	r3 = b[r0 + 0x5] (u)			  ## Crypto_hash.c:108:5
  103c0e:    44 60             	r4 = b[r0 + 0x4] (u)			  ## Crypto_hash.c:108:5
  103c10:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## Crypto_hash.c:108:5
  103c14:    c8 fd 40 43       	r4 <= insert(r3, p:0x8, l:0x8)			  ## Crypto_hash.c:108:5
  103c18:    11 60             	r1 = b[r0 + 0x1] (u)			  ## Crypto_hash.c:108:5
  103c1a:    33 60             	r3 = b[r0 + 0x3] (u)			  ## Crypto_hash.c:108:5
  103c1c:    26 60             	r6 = b[r0 + 0x2] (u)			  ## Crypto_hash.c:108:5
  103c1e:    00 60             	r0 = b[r0 + 0x0] (u)			  ## Crypto_hash.c:108:5
  103c20:    d0 fd 80 42       	r4 <= insert(r2, p:0x10, l:0x10)			  ## Crypto_hash.c:108:5
  103c24:    ec 02             	[sp+56] = r4			  ## Crypto_hash.c:108:5
  103c26:    c8 fd 40 63       	r6 <= insert(r3, p:0x8, l:0x8)			  ## Crypto_hash.c:108:5
  103c2a:    c8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x8)			  ## Crypto_hash.c:108:5
  103c2e:    d0 fd 80 06       	r0 <= insert(r6, p:0x10, l:0x10)			  ## Crypto_hash.c:108:5
  103c32:    d8 02             	[sp+52] = r0			  ## Crypto_hash.c:108:5
  103c34:    46 a0             	r6 = sp + 4			  ## Crypto_hash.c:108:5
  103c36:    01 71             	r1 = 0x10			  ## Crypto_hash.c:109:5
  103c38:    83 71             	r3 = 0x18			  ## Crypto_hash.c:109:5
  103c3a:    0e 02             	[sp] = r6			  ## Crypto_hash.c:109:5
  103c3c:    80 08             	r0 = r8			  ## Crypto_hash.c:109:5
  103c3e:    52 08             	r2 = r5			  ## Crypto_hash.c:109:5
  103c40:    bf f3 ce fd       	call -0x464 <hmacCompute : 1037e0 >			  ## Crypto_hash.c:109:5
  103c44:    70 03             	r0 = [sp+92]
  103c46:    02 71             	r2 = 0x10			  ## Crypto_hash.c:110:5
  103c48:    61 08             	r1 = r6			  ## Crypto_hash.c:110:5
  103c4a:    bf f3 f9 e1       	call -0x3c0e <memmove : 100040 >			  ## Crypto_hash.c:110:5
  103c4e:    1e 0a             	sp += 0x3c			  ## Crypto_hash.c:110:5
  103c50:    59 01             	{pc, r9-r4} = [sp++]			  ## Crypto_hash.c:111:1


h4_hash_function:
  103c52:    79 01             	[--sp] = {rets, r9-r4}			  ## Crypto_hash.c:120:0
  103c54:    e6 0b             	sp += -0x34			  ## Crypto_hash.c:120:0
  103c56:    36 62             	r6 = b[r1 + 0x3] (u)			  ## Crypto_hash.c:124:5
  103c58:    27 62             	r7 = b[r1 + 0x2] (u)			  ## Crypto_hash.c:124:5
  103c5a:    15 62             	r5 = b[r1 + 0x1] (u)			  ## Crypto_hash.c:124:5
  103c5c:    04 62             	r4 = b[r1 + 0x0] (u)			  ## Crypto_hash.c:124:5
  103c5e:    39 08             	r9 = r3			  ## Crypto_hash.c:124:5
  103c60:    21 08             	r1 = r2
  103c62:    08 08             	r8 = r0
  103c64:    c8 fd 40 76       	r7 <= insert(r6, p:0x8, l:0x8)			  ## Crypto_hash.c:124:5
  103c68:    c8 fd 40 45       	r4 <= insert(r5, p:0x8, l:0x8)			  ## Crypto_hash.c:124:5
  103c6c:    d0 fd 80 47       	r4 <= insert(r7, p:0x10, l:0x10)			  ## Crypto_hash.c:124:5
  103c70:    9c 02             	[sp+36] = r4			  ## Crypto_hash.c:124:5
  103c72:    46 a2             	r6 = sp + 36			  ## Crypto_hash.c:124:5
  103c74:    40 9c             	r0 = r6 + 0x4			  ## Crypto_hash.c:125:20
  103c76:    62 70             	r2 = 0x6			  ## Crypto_hash.c:125:5
  103c78:    bf f3 e2 e1       	call -0x3c3c <memmove : 100040 >			  ## Crypto_hash.c:125:5
  103c7c:    a0 9c             	r0 = r6 + 0xa			  ## Crypto_hash.c:126:20
  103c7e:    62 70             	r2 = 0x6			  ## Crypto_hash.c:126:5
  103c80:    91 08             	r1 = r9			  ## Crypto_hash.c:126:5
  103c82:    bf f3 dd e1       	call -0x3c46 <memmove : 100040 >			  ## Crypto_hash.c:126:5
  103c86:    44 a0             	r4 = sp + 4
  103c88:    01 71             	r1 = 0x10			  ## Crypto_hash.c:127:5
  103c8a:    03 71             	r3 = 0x10			  ## Crypto_hash.c:127:5
  103c8c:    0c 02             	[sp] = r4			  ## Crypto_hash.c:127:5
  103c8e:    80 08             	r0 = r8			  ## Crypto_hash.c:127:5
  103c90:    62 08             	r2 = r6			  ## Crypto_hash.c:127:5
  103c92:    bf f3 a5 fd       	call -0x4b6 <hmacCompute : 1037e0 >			  ## Crypto_hash.c:127:5
  103c96:    40 03             	r0 = [sp+80]
  103c98:    02 71             	r2 = 0x10			  ## Crypto_hash.c:128:5
  103c9a:    41 08             	r1 = r4			  ## Crypto_hash.c:128:5
  103c9c:    bf f3 d0 e1       	call -0x3c60 <memmove : 100040 >			  ## Crypto_hash.c:128:5
  103ca0:    1a 0a             	sp += 0x34			  ## Crypto_hash.c:128:5
  103ca2:    59 01             	{pc, r9-r4} = [sp++]			  ## Crypto_hash.c:129:1


h5_hash_function:
  103ca4:    77 01             	[--sp] = {rets, r7-r4}			  ## Crypto_hash.c:137:0
  103ca6:    de 0b             	sp += -0x44			  ## Crypto_hash.c:137:0
  103ca8:    34 08             	r4 = r3			  ## Crypto_hash.c:137:0
  103caa:    25 08             	r5 = r2			  ## Crypto_hash.c:137:0
  103cac:    06 08             	r6 = r0			  ## Crypto_hash.c:137:0
  103cae:    47 a2             	r7 = sp + 36			  ## Crypto_hash.c:137:0
  103cb0:    02 71             	r2 = 0x10			  ## Crypto_hash.c:141:5
  103cb2:    70 08             	r0 = r7			  ## Crypto_hash.c:141:5
  103cb4:    bf f3 c4 e1       	call -0x3c78 <memmove : 100040 >			  ## Crypto_hash.c:141:5
  103cb8:    00 9f             	r0 = r7 + 0x10			  ## Crypto_hash.c:142:20
  103cba:    02 71             	r2 = 0x10			  ## Crypto_hash.c:142:5
  103cbc:    51 08             	r1 = r5			  ## Crypto_hash.c:142:5
  103cbe:    bf f3 bf e1       	call -0x3c82 <memmove : 100040 >			  ## Crypto_hash.c:142:5
  103cc2:    45 a0             	r5 = sp + 4
  103cc4:    01 71             	r1 = 0x10			  ## Crypto_hash.c:143:5
  103cc6:    03 72             	r3 = 0x20			  ## Crypto_hash.c:143:5
  103cc8:    0d 02             	[sp] = r5			  ## Crypto_hash.c:143:5
  103cca:    60 08             	r0 = r6			  ## Crypto_hash.c:143:5
  103ccc:    72 08             	r2 = r7			  ## Crypto_hash.c:143:5
  103cce:    bf f3 87 fd       	call -0x4f2 <hmacCompute : 1037e0 >			  ## Crypto_hash.c:143:5
  103cd2:    02 71             	r2 = 0x10			  ## Crypto_hash.c:144:5
  103cd4:    40 08             	r0 = r4			  ## Crypto_hash.c:144:5
  103cd6:    51 08             	r1 = r5			  ## Crypto_hash.c:144:5
  103cd8:    bf f3 b2 e1       	call -0x3c9c <memmove : 100040 >			  ## Crypto_hash.c:144:5
  103cdc:    22 0a             	sp += 0x44
  103cde:    57 01             	{pc, r7-r4} = [sp++]			  ## Crypto_hash.c:145:1


g_function:
  103ce0:    78 01             	[--sp] = {rets, r8-r4}			  ## Crypto_hash.c:149:0
  103ce2:    d4 0b             	sp += -0x58			  ## Crypto_hash.c:149:0
  103ce4:    38 08             	r8 = r3			  ## Crypto_hash.c:149:0
  103ce6:    27 08             	r7 = r2			  ## Crypto_hash.c:149:0
  103ce8:    16 08             	r6 = r1			  ## Crypto_hash.c:149:0
  103cea:    01 08             	r1 = r0			  ## Crypto_hash.c:149:0
  103cec:    04 a4             	r4 = sp + 64			  ## Crypto_hash.c:149:0
  103cee:    82 71             	r2 = 0x18			  ## Crypto_hash.c:154:5
  103cf0:    40 08             	r0 = r4			  ## Crypto_hash.c:154:5
  103cf2:    bf f3 a5 e1       	call -0x3cb6 <memmove : 100040 >			  ## Crypto_hash.c:154:5
  103cf6:    85 a2             	r5 = sp + 40
  103cf8:    82 71             	r2 = 0x18			  ## Crypto_hash.c:155:5
  103cfa:    50 08             	r0 = r5			  ## Crypto_hash.c:155:5
  103cfc:    61 08             	r1 = r6			  ## Crypto_hash.c:155:5
  103cfe:    bf f3 9f e1       	call -0x3cc2 <memmove : 100040 >			  ## Crypto_hash.c:155:5
  103d02:    86 a1             	r6 = sp + 24
  103d04:    02 71             	r2 = 0x10			  ## Crypto_hash.c:156:5
  103d06:    60 08             	r0 = r6			  ## Crypto_hash.c:156:5
  103d08:    71 08             	r1 = r7			  ## Crypto_hash.c:156:5
  103d0a:    bf f3 99 e1       	call -0x3cce <memmove : 100040 >			  ## Crypto_hash.c:156:5
  103d0e:    87 a0             	r7 = sp + 8
  103d10:    02 71             	r2 = 0x10			  ## Crypto_hash.c:157:5
  103d12:    70 08             	r0 = r7			  ## Crypto_hash.c:157:5
  103d14:    81 08             	r1 = r8			  ## Crypto_hash.c:157:5
  103d16:    bf f3 93 e1       	call -0x3cda <memmove : 100040 >			  ## Crypto_hash.c:157:5
  103d1a:    81 71             	r1 = 0x18			  ## Crypto_hash.c:158:5
  103d1c:    40 08             	r0 = r4			  ## Crypto_hash.c:158:5
  103d1e:    80 f3 75 17       	call 0x2eea <endian_change : 106c0c >			  ## Crypto_hash.c:158:5
  103d22:    81 71             	r1 = 0x18			  ## Crypto_hash.c:159:5
  103d24:    50 08             	r0 = r5			  ## Crypto_hash.c:159:5
  103d26:    80 f3 71 17       	call 0x2ee2 <endian_change : 106c0c >			  ## Crypto_hash.c:159:5
  103d2a:    01 71             	r1 = 0x10			  ## Crypto_hash.c:160:5
  103d2c:    60 08             	r0 = r6			  ## Crypto_hash.c:160:5
  103d2e:    80 f3 6d 17       	call 0x2eda <endian_change : 106c0c >			  ## Crypto_hash.c:160:5
  103d32:    01 71             	r1 = 0x10			  ## Crypto_hash.c:161:5
  103d34:    70 08             	r0 = r7			  ## Crypto_hash.c:161:5
  103d36:    80 f3 69 17       	call 0x2ed2 <endian_change : 106c0c >			  ## Crypto_hash.c:161:5
  103d3a:    40 a0             	r0 = sp + 4			  ## Crypto_hash.c:161:5
  103d3c:    08 02             	[sp] = r0			  ## Crypto_hash.c:164:5
  103d3e:    40 08             	r0 = r4			  ## Crypto_hash.c:164:5
  103d40:    51 08             	r1 = r5			  ## Crypto_hash.c:164:5
  103d42:    62 08             	r2 = r6			  ## Crypto_hash.c:164:5
  103d44:    73 08             	r3 = r7			  ## Crypto_hash.c:164:5
  103d46:    8a 16             	call -0x2ec <g_hash_function : 103a5c >			  ## Crypto_hash.c:164:5
  103d48:    c0 f5 06 00       	r0 = b[sp+6] (u)			  ## Crypto_hash.c:165:26
  103d4c:    c1 f5 07 00       	r1 = b[sp+7] (u)			  ## Crypto_hash.c:165:16
  103d50:    c2 f5 05 00       	r2 = b[sp+5] (u)			  ## Crypto_hash.c:165:42
  103d54:    c3 f5 04 00       	r3 = b[sp+4] (u)			  ## Crypto_hash.c:165:59
  103d58:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:165:23
  103d5c:    c8 fd 80 12       	r1 <= insert(r2, p:0x10, l:0x8)			  ## Crypto_hash.c:165:39
  103d60:    c8 fd c0 13       	r1 <= insert(r3, p:0x18, l:0x8)			  ## Crypto_hash.c:165:56
  103d64:    c0 ff 40 42 0f 00 	r0 = 0xf4240 <$data.__3 : f4240 >			  ## Crypto_hash.c:166:14
  103d6a:    d0 fe 00 01       	r0 = r1 % r0 (u)			  ## Crypto_hash.c:166:14
  103d6e:    2c 0a             	sp += 0x58
  103d70:    58 01             	{pc, r8-r4} = [sp++]			  ## Crypto_hash.c:167:5


f1_function:
  103d72:    78 01             	[--sp] = {rets, r8-r4}			  ## Crypto_hash.c:172:0
  103d74:    dc 0b             	sp += -0x48			  ## Crypto_hash.c:172:0
  103d76:    38 08             	r8 = r3			  ## Crypto_hash.c:172:0
  103d78:    27 08             	r7 = r2			  ## Crypto_hash.c:172:0
  103d7a:    16 08             	r6 = r1			  ## Crypto_hash.c:172:0
  103d7c:    01 08             	r1 = r0			  ## Crypto_hash.c:172:0
  103d7e:    04 a3             	r4 = sp + 48			  ## Crypto_hash.c:172:0
  103d80:    82 71             	r2 = 0x18			  ## Crypto_hash.c:177:5
  103d82:    40 08             	r0 = r4			  ## Crypto_hash.c:177:5
  103d84:    bf f3 5c e1       	call -0x3d48 <memmove : 100040 >			  ## Crypto_hash.c:177:5
  103d88:    85 a1             	r5 = sp + 24
  103d8a:    82 71             	r2 = 0x18			  ## Crypto_hash.c:178:5
  103d8c:    50 08             	r0 = r5			  ## Crypto_hash.c:178:5
  103d8e:    61 08             	r1 = r6			  ## Crypto_hash.c:178:5
  103d90:    bf f3 56 e1       	call -0x3d54 <memmove : 100040 >			  ## Crypto_hash.c:178:5
  103d94:    86 a0             	r6 = sp + 8
  103d96:    02 71             	r2 = 0x10			  ## Crypto_hash.c:179:5
  103d98:    60 08             	r0 = r6			  ## Crypto_hash.c:179:5
  103d9a:    71 08             	r1 = r7			  ## Crypto_hash.c:179:5
  103d9c:    bf f3 50 e1       	call -0x3d60 <memmove : 100040 >			  ## Crypto_hash.c:179:5
  103da0:    00 f9 00 80       	r0 = b[r8 + 0x0] (u)			  ## Crypto_hash.c:180:5
  103da4:    d0 f5 07 00       	b[sp+7] = r0			  ## Crypto_hash.c:180:5
  103da8:    81 71             	r1 = 0x18			  ## Crypto_hash.c:181:5
  103daa:    40 08             	r0 = r4			  ## Crypto_hash.c:181:5
  103dac:    80 f3 2e 17       	call 0x2e5c <endian_change : 106c0c >			  ## Crypto_hash.c:181:5
  103db0:    81 71             	r1 = 0x18			  ## Crypto_hash.c:182:5
  103db2:    50 08             	r0 = r5			  ## Crypto_hash.c:182:5
  103db4:    80 f3 2a 17       	call 0x2e54 <endian_change : 106c0c >			  ## Crypto_hash.c:182:5
  103db8:    01 71             	r1 = 0x10			  ## Crypto_hash.c:183:5
  103dba:    60 08             	r0 = r6			  ## Crypto_hash.c:183:5
  103dbc:    80 f3 26 17       	call 0x2e4c <endian_change : 106c0c >			  ## Crypto_hash.c:183:5
  103dc0:    87 03             	r7 = [sp+96]			  ## Crypto_hash.c:183:5
  103dc2:    73 a0             	r3 = sp + 7			  ## Crypto_hash.c:183:5
  103dc4:    0f 02             	[sp] = r7			  ## Crypto_hash.c:185:5
  103dc6:    40 08             	r0 = r4			  ## Crypto_hash.c:185:5
  103dc8:    51 08             	r1 = r5			  ## Crypto_hash.c:185:5
  103dca:    62 08             	r2 = r6			  ## Crypto_hash.c:185:5
  103dcc:    25 16             	call -0x3b6 <f1_hash_function : 103a18 >			  ## Crypto_hash.c:185:5
  103dce:    01 71             	r1 = 0x10			  ## Crypto_hash.c:186:5
  103dd0:    70 08             	r0 = r7			  ## Crypto_hash.c:186:5
  103dd2:    80 f3 1b 17       	call 0x2e36 <endian_change : 106c0c >			  ## Crypto_hash.c:186:5
  103dd6:    24 0a             	sp += 0x48			  ## Crypto_hash.c:186:5
  103dd8:    58 01             	{pc, r8-r4} = [sp++]			  ## Crypto_hash.c:187:1


f2_function:
  103dda:    78 01             	[--sp] = {rets, r8-r4}			  ## Crypto_hash.c:190:0
  103ddc:    d4 0b             	sp += -0x58			  ## Crypto_hash.c:190:0
  103dde:    37 08             	r7 = r3			  ## Crypto_hash.c:190:0
  103de0:    24 08             	r4 = r2			  ## Crypto_hash.c:190:0
  103de2:    16 08             	r6 = r1			  ## Crypto_hash.c:190:0
  103de4:    01 08             	r1 = r0			  ## Crypto_hash.c:190:0
  103de6:    c0 ff 62 74 6c 6b 	r0 = 0x6b6c7462 <__stub_uECC_vli_cmp_unsafe+0x6B5C0466 : 6b6c7462 >			  ## Crypto_hash.c:194:8
  103dec:    78 02             	[sp+28] = r0			  ## Crypto_hash.c:194:8
  103dee:    08 a4             	r8 = sp + 64			  ## Crypto_hash.c:194:8
  103df0:    82 71             	r2 = 0x18			  ## Crypto_hash.c:197:5
  103df2:    80 08             	r0 = r8			  ## Crypto_hash.c:197:5
  103df4:    bf f3 24 e1       	call -0x3db8 <memmove : 100040 >			  ## Crypto_hash.c:197:5
  103df8:    05 a3             	r5 = sp + 48
  103dfa:    02 71             	r2 = 0x10			  ## Crypto_hash.c:198:5
  103dfc:    50 08             	r0 = r5			  ## Crypto_hash.c:198:5
  103dfe:    61 08             	r1 = r6			  ## Crypto_hash.c:198:5
  103e00:    bf f3 1e e1       	call -0x3dc4 <memmove : 100040 >			  ## Crypto_hash.c:198:5
  103e04:    06 a2             	r6 = sp + 32
  103e06:    02 71             	r2 = 0x10			  ## Crypto_hash.c:199:5
  103e08:    60 08             	r0 = r6			  ## Crypto_hash.c:199:5
  103e0a:    41 08             	r1 = r4			  ## Crypto_hash.c:199:5
  103e0c:    bf f3 18 e1       	call -0x3dd0 <memmove : 100040 >			  ## Crypto_hash.c:199:5
  103e10:    50 6e             	r0 = b[r7 + 0x5] (u)			  ## Crypto_hash.c:200:5
  103e12:    41 6e             	r1 = b[r7 + 0x4] (u)			  ## Crypto_hash.c:200:5
  103e14:    d8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x18)			  ## Crypto_hash.c:200:5
  103e18:    91 f5 18 00       	h[sp+24] = r1			  ## Crypto_hash.c:200:5
  103e1c:    30 6e             	r0 = b[r7 + 0x3] (u)			  ## Crypto_hash.c:200:5
  103e1e:    21 6e             	r1 = b[r7 + 0x2] (u)			  ## Crypto_hash.c:200:5
  103e20:    12 6e             	r2 = b[r7 + 0x1] (u)			  ## Crypto_hash.c:200:5
  103e22:    03 6e             	r3 = b[r7 + 0x0] (u)			  ## Crypto_hash.c:200:5
  103e24:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:200:5
  103e28:    c0 03             	r0 = [sp+112]			  ## Crypto_hash.c:200:5
  103e2a:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## Crypto_hash.c:200:5
  103e2e:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## Crypto_hash.c:200:5
  103e32:    5b 02             	[sp+20] = r3			  ## Crypto_hash.c:200:5
  103e34:    51 60             	r1 = b[r0 + 0x5] (u)			  ## Crypto_hash.c:201:5
  103e36:    42 60             	r2 = b[r0 + 0x4] (u)			  ## Crypto_hash.c:201:5
  103e38:    d8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x18)			  ## Crypto_hash.c:201:5
  103e3c:    92 f5 10 00       	h[sp+16] = r2			  ## Crypto_hash.c:201:5
  103e40:    31 60             	r1 = b[r0 + 0x3] (u)			  ## Crypto_hash.c:201:5
  103e42:    22 60             	r2 = b[r0 + 0x2] (u)			  ## Crypto_hash.c:201:5
  103e44:    13 60             	r3 = b[r0 + 0x1] (u)			  ## Crypto_hash.c:201:5
  103e46:    00 60             	r0 = b[r0 + 0x0] (u)			  ## Crypto_hash.c:201:5
  103e48:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## Crypto_hash.c:201:5
  103e4c:    c8 fd 40 03       	r0 <= insert(r3, p:0x8, l:0x8)			  ## Crypto_hash.c:201:5
  103e50:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## Crypto_hash.c:201:5
  103e54:    38 02             	[sp+12] = r0			  ## Crypto_hash.c:201:5
  103e56:    81 71             	r1 = 0x18			  ## Crypto_hash.c:203:5
  103e58:    80 08             	r0 = r8			  ## Crypto_hash.c:203:5
  103e5a:    80 f3 d7 16       	call 0x2dae <endian_change : 106c0c >			  ## Crypto_hash.c:203:5
  103e5e:    01 71             	r1 = 0x10			  ## Crypto_hash.c:204:5
  103e60:    50 08             	r0 = r5			  ## Crypto_hash.c:204:5
  103e62:    80 f3 d3 16       	call 0x2da6 <endian_change : 106c0c >			  ## Crypto_hash.c:204:5
  103e66:    01 71             	r1 = 0x10			  ## Crypto_hash.c:205:5
  103e68:    60 08             	r0 = r6			  ## Crypto_hash.c:205:5
  103e6a:    80 f3 cf 16       	call 0x2d9e <endian_change : 106c0c >			  ## Crypto_hash.c:205:5
  103e6e:    44 a1             	r4 = sp + 20			  ## Crypto_hash.c:205:5
  103e70:    61 70             	r1 = 0x6			  ## Crypto_hash.c:206:5
  103e72:    40 08             	r0 = r4			  ## Crypto_hash.c:206:5
  103e74:    80 f3 ca 16       	call 0x2d94 <endian_change : 106c0c >			  ## Crypto_hash.c:206:5
  103e78:    c0 a0             	r0 = sp + 12			  ## Crypto_hash.c:206:5
  103e7a:    61 70             	r1 = 0x6			  ## Crypto_hash.c:207:5
  103e7c:    80 f3 c6 16       	call 0x2d8c <endian_change : 106c0c >			  ## Crypto_hash.c:207:5
  103e80:    d7 03             	r7 = [sp+116]			  ## Crypto_hash.c:207:5
  103e82:    2f 02             	[sp+8] = r7			  ## Crypto_hash.c:208:5
  103e84:    18 02             	[sp+4] = r0			  ## Crypto_hash.c:208:5
  103e86:    c3 a1             	r3 = sp + 28			  ## Crypto_hash.c:208:5
  103e88:    0c 02             	[sp] = r4			  ## Crypto_hash.c:208:5
  103e8a:    80 08             	r0 = r8			  ## Crypto_hash.c:208:5
  103e8c:    51 08             	r1 = r5			  ## Crypto_hash.c:208:5
  103e8e:    62 08             	r2 = r6			  ## Crypto_hash.c:208:5
  103e90:    1b 16             	call -0x3ca <f2_hash_function : 103ac8 >			  ## Crypto_hash.c:208:5
  103e92:    01 71             	r1 = 0x10			  ## Crypto_hash.c:209:5
  103e94:    70 08             	r0 = r7			  ## Crypto_hash.c:209:5
  103e96:    80 f3 b9 16       	call 0x2d72 <endian_change : 106c0c >			  ## Crypto_hash.c:209:5
  103e9a:    2c 0a             	sp += 0x58			  ## Crypto_hash.c:209:5
  103e9c:    58 01             	{pc, r8-r4} = [sp++]			  ## Crypto_hash.c:210:1


f3_function:
  103e9e:    7a 01             	[--sp] = {rets, r10-r4}			  ## Crypto_hash.c:213:0
  103ea0:    ca 0b             	sp += -0x6c			  ## Crypto_hash.c:213:0
  103ea2:    34 08             	r4 = r3			  ## Crypto_hash.c:213:0
  103ea4:    27 08             	r7 = r2			  ## Crypto_hash.c:213:0
  103ea6:    16 08             	r6 = r1			  ## Crypto_hash.c:213:0
  103ea8:    01 08             	r1 = r0			  ## Crypto_hash.c:213:0
  103eaa:    48 a5             	r8 = sp + 84			  ## Crypto_hash.c:213:0
  103eac:    82 71             	r2 = 0x18			  ## Crypto_hash.c:221:5
  103eae:    80 08             	r0 = r8			  ## Crypto_hash.c:221:5
  103eb0:    bf f3 c6 e0       	call -0x3e74 <memmove : 100040 >			  ## Crypto_hash.c:221:5
  103eb4:    49 a4             	r9 = sp + 68
  103eb6:    02 71             	r2 = 0x10			  ## Crypto_hash.c:222:5
  103eb8:    90 08             	r0 = r9			  ## Crypto_hash.c:222:5
  103eba:    61 08             	r1 = r6			  ## Crypto_hash.c:222:5
  103ebc:    bf f3 c0 e0       	call -0x3e80 <memmove : 100040 >			  ## Crypto_hash.c:222:5
  103ec0:    4a a3             	r10 = sp + 52
  103ec2:    02 71             	r2 = 0x10			  ## Crypto_hash.c:223:5
  103ec4:    a0 08             	r0 = r10			  ## Crypto_hash.c:223:5
  103ec6:    71 08             	r1 = r7			  ## Crypto_hash.c:223:5
  103ec8:    bf f3 ba e0       	call -0x3e8c <memmove : 100040 >			  ## Crypto_hash.c:223:5
  103ecc:    47 a2             	r7 = sp + 36
  103ece:    02 71             	r2 = 0x10			  ## Crypto_hash.c:224:5
  103ed0:    70 08             	r0 = r7			  ## Crypto_hash.c:224:5
  103ed2:    41 08             	r1 = r4			  ## Crypto_hash.c:224:5
  103ed4:    bf f3 b4 e0       	call -0x3e98 <memmove : 100040 >			  ## Crypto_hash.c:224:5
  103ed8:    00 f5 8c 00       	r0 = [sp+140]
  103edc:    21 60             	r1 = b[r0 + 0x2] (u)			  ## Crypto_hash.c:225:5
  103ede:    d1 f5 22 00       	b[sp+34] = r1			  ## Crypto_hash.c:225:5
  103ee2:    11 60             	r1 = b[r0 + 0x1] (u)			  ## Crypto_hash.c:225:5
  103ee4:    00 60             	r0 = b[r0 + 0x0] (u)			  ## Crypto_hash.c:225:5
  103ee6:    02 f5 90 00       	r2 = [sp+144]			  ## Crypto_hash.c:225:5
  103eea:    d8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x18)			  ## Crypto_hash.c:225:5
  103eee:    90 f5 20 00       	h[sp+32] = r0			  ## Crypto_hash.c:225:5
  103ef2:    50 64             	r0 = b[r2 + 0x5] (u)			  ## Crypto_hash.c:226:5
  103ef4:    41 64             	r1 = b[r2 + 0x4] (u)			  ## Crypto_hash.c:226:5
  103ef6:    d8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x18)			  ## Crypto_hash.c:226:5
  103efa:    91 f5 1c 00       	h[sp+28] = r1			  ## Crypto_hash.c:226:5
  103efe:    30 64             	r0 = b[r2 + 0x3] (u)			  ## Crypto_hash.c:226:5
  103f00:    21 64             	r1 = b[r2 + 0x2] (u)			  ## Crypto_hash.c:226:5
  103f02:    13 64             	r3 = b[r2 + 0x1] (u)			  ## Crypto_hash.c:226:5
  103f04:    02 64             	r2 = b[r2 + 0x0] (u)			  ## Crypto_hash.c:226:5
  103f06:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## Crypto_hash.c:226:5
  103f0a:    00 f5 94 00       	r0 = [sp+148]			  ## Crypto_hash.c:226:5
  103f0e:    c8 fd 40 23       	r2 <= insert(r3, p:0x8, l:0x8)			  ## Crypto_hash.c:226:5
  103f12:    d0 fd 80 21       	r2 <= insert(r1, p:0x10, l:0x10)			  ## Crypto_hash.c:226:5
  103f16:    6a 02             	[sp+24] = r2			  ## Crypto_hash.c:226:5
  103f18:    51 60             	r1 = b[r0 + 0x5] (u)			  ## Crypto_hash.c:227:5
  103f1a:    42 60             	r2 = b[r0 + 0x4] (u)			  ## Crypto_hash.c:227:5
  103f1c:    d8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x18)			  ## Crypto_hash.c:227:5
  103f20:    92 f5 14 00       	h[sp+20] = r2			  ## Crypto_hash.c:227:5
  103f24:    31 60             	r1 = b[r0 + 0x3] (u)			  ## Crypto_hash.c:227:5
  103f26:    22 60             	r2 = b[r0 + 0x2] (u)			  ## Crypto_hash.c:227:5
  103f28:    13 60             	r3 = b[r0 + 0x1] (u)			  ## Crypto_hash.c:227:5
  103f2a:    00 60             	r0 = b[r0 + 0x0] (u)			  ## Crypto_hash.c:227:5
  103f2c:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## Crypto_hash.c:227:5
  103f30:    c8 fd 40 03       	r0 <= insert(r3, p:0x8, l:0x8)			  ## Crypto_hash.c:227:5
  103f34:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## Crypto_hash.c:227:5
  103f38:    48 02             	[sp+16] = r0			  ## Crypto_hash.c:227:5
  103f3a:    81 71             	r1 = 0x18			  ## Crypto_hash.c:229:5
  103f3c:    80 08             	r0 = r8			  ## Crypto_hash.c:229:5
  103f3e:    80 f3 65 16       	call 0x2cca <endian_change : 106c0c >			  ## Crypto_hash.c:229:5
  103f42:    01 71             	r1 = 0x10			  ## Crypto_hash.c:230:5
  103f44:    90 08             	r0 = r9			  ## Crypto_hash.c:230:5
  103f46:    80 f3 61 16       	call 0x2cc2 <endian_change : 106c0c >			  ## Crypto_hash.c:230:5
  103f4a:    01 71             	r1 = 0x10			  ## Crypto_hash.c:231:5
  103f4c:    a0 08             	r0 = r10			  ## Crypto_hash.c:231:5
  103f4e:    80 f3 5d 16       	call 0x2cba <endian_change : 106c0c >			  ## Crypto_hash.c:231:5
  103f52:    01 71             	r1 = 0x10			  ## Crypto_hash.c:232:5
  103f54:    70 08             	r0 = r7			  ## Crypto_hash.c:232:5
  103f56:    80 f3 59 16       	call 0x2cb2 <endian_change : 106c0c >			  ## Crypto_hash.c:232:5
  103f5a:    04 a2             	r4 = sp + 32			  ## Crypto_hash.c:232:5
  103f5c:    31 70             	r1 = 0x3			  ## Crypto_hash.c:233:5
  103f5e:    40 08             	r0 = r4			  ## Crypto_hash.c:233:5
  103f60:    80 f3 54 16       	call 0x2ca8 <endian_change : 106c0c >			  ## Crypto_hash.c:233:5
  103f64:    85 a1             	r5 = sp + 24			  ## Crypto_hash.c:233:5
  103f66:    61 70             	r1 = 0x6			  ## Crypto_hash.c:234:5
  103f68:    50 08             	r0 = r5			  ## Crypto_hash.c:234:5
  103f6a:    80 f3 4f 16       	call 0x2c9e <endian_change : 106c0c >			  ## Crypto_hash.c:234:5
  103f6e:    00 a1             	r0 = sp + 16			  ## Crypto_hash.c:234:5
  103f70:    61 70             	r1 = 0x6			  ## Crypto_hash.c:235:5
  103f72:    80 f3 4b 16       	call 0x2c96 <endian_change : 106c0c >			  ## Crypto_hash.c:235:5
  103f76:    06 f5 98 00       	r6 = [sp+152]			  ## Crypto_hash.c:235:5
  103f7a:    3e 02             	[sp+12] = r6			  ## Crypto_hash.c:236:5
  103f7c:    28 02             	[sp+8] = r0			  ## Crypto_hash.c:236:5
  103f7e:    1d 02             	[sp+4] = r5			  ## Crypto_hash.c:236:5
  103f80:    0c 02             	[sp] = r4			  ## Crypto_hash.c:236:5
  103f82:    80 08             	r0 = r8			  ## Crypto_hash.c:236:5
  103f84:    91 08             	r1 = r9			  ## Crypto_hash.c:236:5
  103f86:    a2 08             	r2 = r10			  ## Crypto_hash.c:236:5
  103f88:    73 08             	r3 = r7			  ## Crypto_hash.c:236:5
  103f8a:    d9 15             	call -0x44e <f3_hash_function : 103b3e >			  ## Crypto_hash.c:236:5
  103f8c:    01 71             	r1 = 0x10			  ## Crypto_hash.c:237:5
  103f8e:    60 08             	r0 = r6			  ## Crypto_hash.c:237:5
  103f90:    80 f3 3c 16       	call 0x2c78 <endian_change : 106c0c >			  ## Crypto_hash.c:237:5
  103f94:    36 0a             	sp += 0x6c			  ## Crypto_hash.c:237:5
  103f96:    5a 01             	{pc, r10-r4} = [sp++]			  ## Crypto_hash.c:238:1


padding:
  103f98:	 80 00 00 00 00 00 00 00         ........
  103fa0:	 00 00 00 00 00 00 00 00         ........
  103fa8:	 00 00 00 00 00 00 00 00         ........
  103fb0:	 00 00 00 00 00 00 00 00         ........
  103fb8:	 00 00 00 00 00 00 00 00         ........
  103fc0:	 00 00 00 00 00 00 00 00         ........
  103fc8:	 00 00 00 00 00 00 00 00         ........
  103fd0:	 00 00 00 00 00 00 00 00         ........


k:
  103fd8:	 98 2f 8a 42 91 44 37 71         ./.B.D7q
  103fe0:	 cf fb c0 b5 a5 db b5 e9         ........
  103fe8:	 5b c2 56 39 f1 11 f1 59         [.V9...Y
  103ff0:	 a4 82 3f 92 d5 5e 1c ab         ..?..^..
  103ff8:	 98 aa 07 d8 01 5b 83 12         .....[..
  104000:	 be 85 31 24 c3 7d 0c 55         ..1$.}.U
  104008:	 74 5d be 72 fe b1 de 80         t].r....
  104010:	 a7 06 dc 9b 74 f1 9b c1         ....t...
  104018:	 c1 69 9b e4 86 47 be ef         .i...G..
  104020:	 c6 9d c1 0f cc a1 0c 24         .......$
  104028:	 6f 2c e9 2d aa 84 74 4a         o,.-..tJ
  104030:	 dc a9 b0 5c da 88 f9 76         ...\...v
  104038:	 52 51 3e 98 6d c6 31 a8         RQ>.m.1.
  104040:	 c8 27 03 b0 c7 7f 59 bf         .'....Y.
  104048:	 f3 0b e0 c6 47 91 a7 d5         ....G...
  104050:	 51 63 ca 06 67 29 29 14         Qc..g)).
  104058:	 85 0a b7 27 38 21 1b 2e         ...'8!..
  104060:	 fc 6d 2c 4d 13 0d 38 53         .m,M..8S
  104068:	 54 73 0a 65 bb 0a 6a 76         Ts.e..jv
  104070:	 2e c9 c2 81 85 2c 72 92         .....,r.
  104078:	 a1 e8 bf a2 4b 66 1a a8         ....Kf..
  104080:	 70 8b 4b c2 a3 51 6c c7         p.K..Ql.
  104088:	 19 e8 92 d1 24 06 99 d6         ....$...
  104090:	 85 35 0e f4 70 a0 6a 10         .5..p.j.
  104098:	 16 c1 a4 19 08 6c 37 1e         .....l7.
  1040a0:	 4c 77 48 27 b5 bc b0 34         LwH'...4
  1040a8:	 b3 0c 1c 39 4a aa d8 4e         ...9J..N
  1040b0:	 4f ca 9c 5b f3 6f 2e 68         O..[.o.h
  1040b8:	 ee 82 8f 74 6f 63 a5 78         ...toc.x
  1040c0:	 14 78 c8 84 08 02 c7 8c         .x......
  1040c8:	 fa ff be 90 eb 6c 50 a4         .....lP.
  1040d0:	 f7 a3 f9 be f2 78 71 c6         .....xq.


sha256HashAlgo:
  1040d8:	 54 6d 10 00 00 41 10 00         Tm...A..
  1040e0:	 09 00 00 00 2c 01 00 00         ....,...
  1040e8:	 40 00 00 00 20 00 00 00         @... ...
  1040f0:	 60 39 10 00 ca 39 10 00         `9...9..
  1040f8:	 28 37 10 00 80 37 10 00         (7...7..


sha256Oid:
  104100:	 60 86 48 01 65 03 04 02         `.H.e...
  104108:	 01 00                           ..


uECC_vli_isZero:
  10410a:    74 01             	[--sp] = {rets, r4}			  ## uECC_new.c:224:0
  10410c:    02 70             	r2 = 0x0			  ## uECC_new.c:224:0
  10410e:    03 70             	r3 = 0x0			  ## uECC_new.c:224:0
  104110:    04 18             	goto 0x8 <uECC_vli_isZero+0x10 : 10411a >			  ## uECC_new.c:224:0
  104112:    44 f6 04 00       	r4 = [r0 ++= 0x4]			  ## uECC_new.c:228:17
  104116:    53 b8             	r3 |= r4			  ## uECC_new.c:228:14
  104118:    12 80             	r2 += 0x1			  ## uECC_new.c:227:32
  10411a:    12 f2 fa bf       	ifs (r2 < r1) goto -0xc <uECC_vli_isZero+0x8 : 104112 >
  10411e:    10 70             	r0 = 0x1			  ## uECC_new.c:230:18
  104120:    01 26             	if (r3 == 0x0) goto 0x2 <uECC_vli_isZero+0x1A : 104124 >
  104122:    00 70             	r0 = 0x0			  ## uECC_new.c:230:18
  104124:    54 01             	{pc, r4} = [sp++]			  ## uECC_new.c:230:5


uECC_vli_testBit:
  104126:    4a d9             	r2 = r1 >>> 0x5			  ## uECC_new.c:234:0
  104128:    a0 f6 00 02       	r0 = [r0+r2<<2]			  ## uECC_new.c:235:13
  10412c:    21 fd 1f 19       	r1 = r1 & 0x1f			  ## uECC_new.c:235:72
  104130:    12 70             	r2 = 0x1			  ## uECC_new.c:235:64
  104132:    f8 fd 10 12       	r1 = r2 << r1			  ## uECC_new.c:235:64
  104136:    50 b3             	r0 &= r1			  ## uECC_new.c:235:46
  104138:    20 00             	rts			  ## uECC_new.c:235:5


uECC_vli_set:
  10413a:    74 01             	[--sp] = {rets, r4}			  ## uECC_new.c:269:0
  10413c:    03 70             	r3 = 0x0			  ## uECC_new.c:269:0
  10413e:    05 18             	goto 0xa <uECC_vli_set+0x10 : 10414a >			  ## uECC_new.c:269:0
  104140:    44 f6 04 10       	r4 = [r1 ++= 0x4]			  ## uECC_new.c:272:19
  104144:    54 f6 04 00       	[r0 ++= 0x4] = r4			  ## uECC_new.c:272:17
  104148:    13 80             	r3 += 0x1			  ## uECC_new.c:271:32
  10414a:    23 f2 f9 bf       	ifs (r3 < r2) goto -0xe <uECC_vli_set+0x6 : 104140 >
  10414e:    54 01             	{pc, r4} = [sp++]			  ## uECC_new.c:274:1


uECC_vli_cmp_unsafe:
  104150:    74 01             	[--sp] = {rets, r4}			  ## uECC_new.c:280:0
  104152:    f2 8f             	r2 += -0x1			  ## uECC_new.c:282:10
  104154:    94 04             	r4 = r2.b0 (s)			  ## uECC_new.c:282:29
  104156:    04 e0 0b b0       	ifs (r4 < 0x0) goto 0x16 <uECC_vli_cmp_unsafe+0x20 : 104170 >			  ## uECC_new.c:282:29
  10415a:    a3 f6 00 14       	r3 = [r1+r4<<2]			  ## uECC_new.c:283:23
  10415e:    a4 f6 00 04       	r4 = [r0+r4<<2]			  ## uECC_new.c:283:13
  104162:    34 f2 07 80       	if (r4 > r3) goto 0xe <uECC_vli_cmp_unsafe+0x24 : 104174 >			  ## uECC_new.c:283:13
  104166:    f2 8f             	r2 += -0x1			  ## uECC_new.c:285:20
  104168:    34 f2 f4 2f       	if (r4 >= r3) goto -0x18 <uECC_vli_cmp_unsafe+0x4 : 104154 >			  ## uECC_new.c:285:20
  10416c:    f0 7f             	r0 = 0xff
  10416e:    03 18             	goto 0x6 <uECC_vli_cmp_unsafe+0x26 : 104176 >
  104170:    00 70             	r0 = 0x0
  104172:    01 18             	goto 0x2 <uECC_vli_cmp_unsafe+0x26 : 104176 >
  104174:    10 70             	r0 = 0x1
  104176:    10 04             	r0 = r0.b0 (s)			  ## uECC_new.c:290:1
  104178:    54 01             	{pc, r4} = [sp++]			  ## uECC_new.c:290:1


uECC_vli_sub:
  10417a:    78 01             	[--sp] = {rets, r8-r4}			  ## uECC_new.c:359:0
  10417c:    05 70             	r5 = 0x0			  ## uECC_new.c:359:0
  10417e:    08 70             	r8 = 0x0			  ## uECC_new.c:359:0
  104180:    11 18             	goto 0x22 <uECC_vli_sub+0x2A : 1041a4 >			  ## uECC_new.c:359:0
  104182:    44 f6 04 20       	r4 = [r2 ++= 0x4]			  ## uECC_new.c:363:38
  104186:    46 f6 04 10       	r6 = [r1 ++= 0x4]			  ## uECC_new.c:363:28
  10418a:    24 bd             	r4 = r6 - r4			  ## uECC_new.c:363:36
  10418c:    90 fb 80 74       	r7 = r4 - r8			  ## uECC_new.c:363:47
  104190:    57 f6 04 00       	[r0 ++= 0x4] = r7			  ## uECC_new.c:367:19
  104194:    14 70             	r4 = 0x1
  104196:    67 f2 01 80       	if (r7 > r6) goto 0x2 <uECC_vli_sub+0x22 : 10419c >
  10419a:    04 70             	r4 = 0x0			  ## uECC_new.c:365:28
  10419c:    67 f2 01 00       	if (r7 == r6) goto 0x2 <uECC_vli_sub+0x28 : 1041a2 >
  1041a0:    48 08             	r8 = r4			  ## uECC_new.c:364:13
  1041a2:    15 80             	r5 += 0x1			  ## uECC_new.c:362:32
  1041a4:    35 f2 ed bf       	ifs (r5 < r3) goto -0x26 <uECC_vli_sub+0x8 : 104182 >
  1041a8:    80 08             	r0 = r8			  ## uECC_new.c:369:5
  1041aa:    58 01             	{pc, r8-r4} = [sp++]			  ## uECC_new.c:369:5


uECC_vli_rshift1:
  1041ac:    74 01             	[--sp] = {rets, r4}			  ## uECC_new.c:322:0
  1041ae:    89 c0             	r1 = r1 << 0x2			  ## uECC_new.c:326:9
  1041b0:    01 09             	r1 += r0			  ## uECC_new.c:326:9
  1041b2:    02 70             	r2 = 0x0
  1041b4:    08 18             	goto 0x10 <uECC_vli_rshift1+0x1A : 1041c6 >
  1041b6:    03 f6 fc 1f       	r3 = [r1 + -0x4]			  ## uECC_new.c:328:28
  1041ba:    5c d0             	r4 = r3 >> 0x1			  ## uECC_new.c:329:22
  1041bc:    52 b8             	r2 |= r4			  ## uECC_new.c:329:28
  1041be:    12 f6 fc 1f       	[r1 + -0x4] = r2			  ## uECC_new.c:329:14
  1041c2:    c1 8f             	r1 += -0x4			  ## uECC_new.c:327:15
  1041c4:    da c7             	r2 = r3 << 0x1f			  ## uECC_new.c:330:22
  1041c6:    01 f2 f6 8f       	if (r1 > r0) goto -0x14 <uECC_vli_rshift1+0xA : 1041b6 >
  1041ca:    54 01             	{pc, r4} = [sp++]			  ## uECC_new.c:332:1


uECC_vli_add:
  1041cc:    78 01             	[--sp] = {rets, r8-r4}			  ## uECC_new.c:340:0
  1041ce:    05 70             	r5 = 0x0			  ## uECC_new.c:340:0
  1041d0:    08 70             	r8 = 0x0			  ## uECC_new.c:340:0
  1041d2:    11 18             	goto 0x22 <uECC_vli_add+0x2A : 1041f6 >			  ## uECC_new.c:340:0
  1041d4:    46 f6 04 10       	r6 = [r1 ++= 0x4]			  ## uECC_new.c:344:27
  1041d8:    44 f6 04 20       	r4 = [r2 ++= 0x4]			  ## uECC_new.c:344:37
  1041dc:    80 fb 80 76       	r7 = r6 + r8			  ## uECC_new.c:344:35
  1041e0:    47 09             	r7 += r4			  ## uECC_new.c:344:46
  1041e2:    57 f6 04 00       	[r0 ++= 0x4] = r7			  ## uECC_new.c:348:19
  1041e6:    14 70             	r4 = 0x1
  1041e8:    67 f2 01 30       	if (r7 < r6) goto 0x2 <uECC_vli_add+0x22 : 1041ee >
  1041ec:    04 70             	r4 = 0x0			  ## uECC_new.c:346:26
  1041ee:    67 f2 01 00       	if (r7 == r6) goto 0x2 <uECC_vli_add+0x28 : 1041f4 >
  1041f2:    48 08             	r8 = r4			  ## uECC_new.c:345:13
  1041f4:    15 80             	r5 += 0x1			  ## uECC_new.c:343:32
  1041f6:    35 f2 ed bf       	ifs (r5 < r3) goto -0x26 <uECC_vli_add+0x8 : 1041d4 >
  1041fa:    80 08             	r0 = r8			  ## uECC_new.c:350:5
  1041fc:    58 01             	{pc, r8-r4} = [sp++]			  ## uECC_new.c:350:5


uECC_vli_modAdd:
  1041fe:    76 01             	[--sp] = {rets, r6-r4}			  ## uECC_new.c:546:0
  104200:    34 08             	r4 = r3			  ## uECC_new.c:546:0
  104202:    05 08             	r5 = r0			  ## uECC_new.c:546:0
  104204:    46 02             	r6 = [sp+16]			  ## uECC_new.c:546:0
  104206:    63 08             	r3 = r6			  ## uECC_new.c:547:25
  104208:    e1 17             	call -0x3e <uECC_vli_add : 1041cc >			  ## uECC_new.c:547:25
  10420a:    06 30             	if (r0 != 0x0) goto 0xc <uECC_vli_modAdd+0x1A : 104218 >
  10420c:    40 08             	r0 = r4			  ## uECC_new.c:548:18
  10420e:    51 08             	r1 = r5			  ## uECC_new.c:548:18
  104210:    62 08             	r2 = r6			  ## uECC_new.c:548:18
  104212:    9e 17             	call -0xc4 <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:548:18
  104214:    10 e0 05 00       	if (r0 == 0x1) goto 0xa <uECC_vli_modAdd+0x24 : 104222 >			  ## uECC_new.c:548:18
  104218:    50 08             	r0 = r5			  ## uECC_new.c:550:9
  10421a:    51 08             	r1 = r5			  ## uECC_new.c:550:9
  10421c:    42 08             	r2 = r4			  ## uECC_new.c:550:9
  10421e:    63 08             	r3 = r6			  ## uECC_new.c:550:9
  104220:    ac 17             	call -0xa8 <uECC_vli_sub : 10417a >			  ## uECC_new.c:550:9
  104222:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:552:1


uECC_vli_modSub:
  104224:    75 01             	[--sp] = {rets, r5, r4}			  ## uECC_new.c:560:0
  104226:    34 08             	r4 = r3			  ## uECC_new.c:560:0
  104228:    05 08             	r5 = r0			  ## uECC_new.c:560:0
  10422a:    33 02             	r3 = [sp+12]			  ## uECC_new.c:560:0
  10422c:    a6 17             	call -0xb4 <uECC_vli_sub : 10417a >			  ## uECC_new.c:561:28
  10422e:    04 20             	if (r0 == 0x0) goto 0x8 <uECC_vli_modSub+0x14 : 104238 >
  104230:    50 08             	r0 = r5			  ## uECC_new.c:565:9
  104232:    51 08             	r1 = r5			  ## uECC_new.c:565:9
  104234:    42 08             	r2 = r4			  ## uECC_new.c:565:9
  104236:    ca 17             	call -0x6c <uECC_vli_add : 1041cc >			  ## uECC_new.c:565:9
  104238:    55 01             	{pc, r5, r4} = [sp++]			  ## uECC_new.c:567:1


muladd:
  10423a:    77 01             	[--sp] = {rets, r7-r4}			  ## uECC_new.c:380:0
  10423c:    35 08             	r5 = r3			  ## uECC_new.c:380:0
  10423e:    24 08             	r4 = r2			  ## uECC_new.c:380:0
  104240:    12 08             	r2 = r1			  ## uECC_new.c:380:0
  104242:    06 08             	r6 = r0			  ## uECC_new.c:380:0
  104244:    01 70             	r1 = 0x0			  ## uECC_new.c:407:38
  104246:    03 70             	r3 = 0x0			  ## uECC_new.c:407:38
  104248:    20 08             	r0 = r2			  ## uECC_new.c:407:38
  10424a:    62 08             	r2 = r6			  ## uECC_new.c:407:38
  10424c:    80 f3 38 15       	call 0x2a70 <__muldi3 : 106cc0 >			  ## uECC_new.c:407:38
  104250:    07 48             	r7 = [r4 + 0x0]			  ## uECC_new.c:408:66
  104252:    03 4a             	r3 = [r5 + 0x0]			  ## uECC_new.c:408:25
  104254:    70 09             	r0 += r7			  ## uECC_new.c:408:25
  104256:    a0 fb 30 11       	r1 = r1 + r3 + c			  ## uECC_new.c:408:25
  10425a:    12 70             	r2 = 0x1			  ## uECC_new.c:408:25
  10425c:    16 70             	r6 = 0x1			  ## uECC_new.c:408:25
  10425e:    31 f2 01 30       	if (r1 < r3) goto 0x2 <muladd+0x2A : 104264 >			  ## uECC_new.c:408:25
  104262:    06 70             	r6 = 0x0
  104264:    70 f2 01 30       	if (r0 < r7) goto 0x2 <muladd+0x30 : 10426a >
  104268:    02 70             	r2 = 0x0
  10426a:    31 f2 01 00       	if (r1 == r3) goto 0x2 <muladd+0x36 : 104270 >
  10426e:    62 08             	r2 = r6
  104270:    53 02             	r3 = [sp+20]
  104272:    06 46             	r6 = [r3 + 0x0]			  ## uECC_new.c:410:9
  104274:    62 09             	r2 += r6			  ## uECC_new.c:410:9
  104276:    0a 46             	[r3 + 0x0] = r2			  ## uECC_new.c:410:9
  104278:    09 4a             	[r5 + 0x0] = r1			  ## uECC_new.c:411:9
  10427a:    08 48             	[r4 + 0x0] = r0			  ## uECC_new.c:412:9
  10427c:    57 01             	{pc, r7-r4} = [sp++]			  ## uECC_new.c:414:1


uECC_vli_modMult_fast:
  10427e:    7f 01             	[--sp] = {rets, r15-r4}			  ## uECC_new.c:627:0
  104280:    d4 0b             	sp += -0x58			  ## uECC_new.c:627:0
  104282:    2f 08             	r15 = r2			  ## uECC_new.c:627:0
  104284:    19 08             	r9 = r1			  ## uECC_new.c:627:0
  104286:    18 02             	[sp+4] = r0			  ## uECC_new.c:627:0
  104288:    2b 02             	[sp+8] = r3			  ## uECC_new.c:627:0
  10428a:    25 f9 00 30       	r5 = b[r3 + 0x0] (s)			  ## uECC_new.c:428:10
  10428e:    0a 70             	r10 = 0x0			  ## uECC_new.c:428:10
  104290:    1a f5 54 00       	[sp+84] = r10			  ## uECC_new.c:422:17
  104294:    1a f5 50 00       	[sp+80] = r10			  ## uECC_new.c:423:17
  104298:    1a f5 4c 00       	[sp+76] = r10			  ## uECC_new.c:424:17
  10429c:    4b 05             	r11 = r5.b0 (u)			  ## uECC_new.c:629:48
  10429e:    00 70             	r0 = 0x0			  ## uECC_new.c:629:48
  1042a0:    04 70             	r4 = 0x0			  ## uECC_new.c:629:48
  1042a2:    1b 18             	goto 0x36 <uECC_vli_modMult_fast+0x5C : 1042da >			  ## uECC_new.c:629:48
  1042a4:    06 70             	r6 = 0x0
  1042a6:    0b 18             	goto 0x16 <uECC_vli_modMult_fast+0x40 : 1042be >
  1042a8:    a0 f6 00 91       	r0 = [r9+r1<<2]			  ## uECC_new.c:430:20
  1042ac:    61 b8             	r1 = r4 - r1			  ## uECC_new.c:430:37
  1042ae:    a1 f6 00 f1       	r1 = [r15+r1<<2]			  ## uECC_new.c:430:29
  1042b2:    c7 a4             	r7 = sp + 76			  ## uECC_new.c:430:29
  1042b4:    42 a5             	r2 = sp + 84
  1042b6:    03 a5             	r3 = sp + 80
  1042b8:    0f 02             	[sp] = r7			  ## uECC_new.c:430:13
  1042ba:    bf 17             	call -0x82 <muladd : 10423a >			  ## uECC_new.c:430:13
  1042bc:    16 80             	r6 += 0x1			  ## uECC_new.c:429:29
  1042be:    91 05             	r1 = r6.b0 (s)			  ## uECC_new.c:429:21
  1042c0:    14 f2 f2 af       	ifs (r4 >= r1) goto -0x1c <uECC_vli_modMult_fast+0x2A : 1042a8 >			  ## uECC_new.c:429:21
  1042c4:    51 03             	r1 = [sp+84]			  ## uECC_new.c:432:21
  1042c6:    40 03             	r0 = [sp+80]			  ## uECC_new.c:433:14
  1042c8:    32 03             	r2 = [sp+76]			  ## uECC_new.c:434:14
  1042ca:    c3 a0             	r3 = sp + 12
  1042cc:    b1 f6 00 34       	[r3+r4<<2] = r1			  ## uECC_new.c:432:19
  1042d0:    58 03             	[sp+84] = r0			  ## uECC_new.c:433:12
  1042d2:    4a 03             	[sp+80] = r2			  ## uECC_new.c:434:12
  1042d4:    1a f5 4c 00       	[sp+76] = r10			  ## uECC_new.c:435:12
  1042d8:    14 80             	r4 += 0x1			  ## uECC_new.c:428:32
  1042da:    54 f2 e3 bf       	ifs (r4 < r5) goto -0x3a <uECC_vli_modMult_fast+0x26 : 1042a4 >
  1042de:    69 c0             	r1 = r5 << 0x1
  1042e0:    1a fc ff ff       	r10 = r1 + -0x1
  1042e4:    1d 70             	r13 = 0x1
  1042e6:    0c 70             	r12 = 0x0
  1042e8:    23 18             	goto 0x46 <uECC_vli_modMult_fast+0xB2 : 104330 >
  1042ea:    e5 fd 00 4d       	r4 = r13.b0 (s)			  ## uECC_new.c:437:25
  1042ee:    a0 c0             	r0 = r4 << 0x2			  ## uECC_new.c:437:25
  1042f0:    80 fb 00 69       	r6 = r9 + r0			  ## uECC_new.c:437:25
  1042f4:    90 fb 40 0e       	r0 = r14 - r4			  ## uECC_new.c:437:25
  1042f8:    80 c0             	r0 = r0 << 0x2			  ## uECC_new.c:437:25
  1042fa:    80 fb 00 8f       	r8 = r15 + r0			  ## uECC_new.c:437:25
  1042fe:    0a 18             	goto 0x14 <uECC_vli_modMult_fast+0x96 : 104314 >			  ## uECC_new.c:437:25
  104300:    41 f6 fc 8f       	r1 = [r8 ++= -0x4]			  ## uECC_new.c:439:29
  104304:    40 f6 04 60       	r0 = [r6 ++= 0x4]			  ## uECC_new.c:439:20
  104308:    c7 a4             	r7 = sp + 76			  ## uECC_new.c:439:20
  10430a:    42 a5             	r2 = sp + 84
  10430c:    03 a5             	r3 = sp + 80
  10430e:    0f 02             	[sp] = r7			  ## uECC_new.c:439:13
  104310:    94 17             	call -0xd8 <muladd : 10423a >			  ## uECC_new.c:439:13
  104312:    14 80             	r4 += 0x1			  ## uECC_new.c:438:54
  104314:    54 f2 f4 bf       	ifs (r4 < r5) goto -0x18 <uECC_vli_modMult_fast+0x82 : 104300 >
  104318:    51 03             	r1 = [sp+84]			  ## uECC_new.c:441:21
  10431a:    40 03             	r0 = [sp+80]			  ## uECC_new.c:442:14
  10431c:    32 03             	r2 = [sp+76]			  ## uECC_new.c:443:14
  10431e:    c3 a0             	r3 = sp + 12
  104320:    b1 f6 00 3e       	[r3+r14<<2] = r1			  ## uECC_new.c:441:19
  104324:    58 03             	[sp+84] = r0			  ## uECC_new.c:442:12
  104326:    4a 03             	[sp+80] = r2			  ## uECC_new.c:443:12
  104328:    1c f5 4c 00       	[sp+76] = r12			  ## uECC_new.c:444:12
  10432c:    1d 80             	r13 += 0x1			  ## uECC_new.c:437:5
  10432e:    1b 80             	r11 += 0x1			  ## uECC_new.c:438:21
  104330:    e5 fd 00 eb       	r14 = r11.b0 (s)			  ## uECC_new.c:437:25
  104334:    ae f2 d9 bf       	ifs (r14 < r10) goto -0x4e <uECC_vli_modMult_fast+0x6C : 1042ea >			  ## uECC_new.c:437:25
  104338:    c1 a0             	r1 = sp + 12
  10433a:    b0 f6 00 1a       	[r1+r10<<2] = r0			  ## uECC_new.c:446:31
  10433e:    20 02             	r0 = [sp+8]			  ## uECC_new.c:631:12
  104340:    02 f6 ac 00       	r2 = [r0 + 0xac]			  ## uECC_new.c:631:12
  104344:    10 02             	r0 = [sp+4]			  ## uECC_new.c:631:5
  104346:    82 00             	call r2			  ## uECC_new.c:631:5
  104348:    2c 0a             	sp += 0x58
  10434a:    5f 01             	{pc, r15-r4} = [sp++]			  ## uECC_new.c:635:1


uECC_vli_modSquare_fast:
  10434c:    23 08             	r3 = r2			  ## uECC_new.c:676:0
  10434e:    12 08             	r2 = r1			  ## uECC_new.c:677:5
  104350:    96 1f             	goto -0xd4 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:677:5


uECC_vli_cmp:
  104352:    76 01             	[--sp] = {rets, r6-r4}			  ## uECC_new.c:313:0
  104354:    f0 0b             	sp += -0x20			  ## uECC_new.c:313:0
  104356:    23 08             	r3 = r2			  ## uECC_new.c:313:0
  104358:    12 08             	r2 = r1			  ## uECC_new.c:313:0
  10435a:    01 08             	r1 = r0			  ## uECC_new.c:313:0
  10435c:    04 a0             	r4 = sp + 0			  ## uECC_new.c:313:0
  10435e:    40 08             	r0 = r4			  ## uECC_new.c:315:25
  104360:    0c 17             	call -0x1e8 <uECC_vli_sub : 10417a >			  ## uECC_new.c:315:25
  104362:    15 70             	r5 = 0x1
  104364:    11 70             	r1 = 0x1			  ## uECC_new.c:315:24
  104366:    01 30             	if (r0 != 0x0) goto 0x2 <uECC_vli_cmp+0x18 : 10436a >			  ## uECC_new.c:315:24
  104368:    01 70             	r1 = 0x0			  ## uECC_new.c:315:24
  10436a:    4e c0             	r6 = r1 << 0x1			  ## uECC_new.c:317:24
  10436c:    40 08             	r0 = r4			  ## uECC_new.c:316:25
  10436e:    31 08             	r1 = r3			  ## uECC_new.c:316:25
  104370:    cc 16             	call -0x268 <uECC_vli_isZero : 10410a >			  ## uECC_new.c:316:25
  104372:    01 20             	if (r0 == 0x0) goto 0x2 <uECC_vli_cmp+0x24 : 104376 >
  104374:    05 70             	r5 = 0x0			  ## uECC_new.c:317:13
  104376:    a0 bb             	r0 = r5 - r6			  ## uECC_new.c:317:20
  104378:    10 0a             	sp += 0x20
  10437a:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:317:5


uECC_generate_random_int:
  10437c:    7c 01             	[--sp] = {rets, r12-r4}			  ## uECC_new.c:989:0
  10437e:    2a 08             	r10 = r2			  ## uECC_new.c:989:0
  104380:    19 08             	r9 = r1			  ## uECC_new.c:989:0
  104382:    06 08             	r6 = r0			  ## uECC_new.c:989:0
  104384:    a1 08             	r1 = r10			  ## uECC_new.c:989:0
  104386:    10 08             	r0 = r1			  ## uECC_new.c:989:0
  104388:    01 fc ff ff       	r1 = r0 + -0x1			  ## uECC_new.c:989:0
  10438c:    51 04             	r1 = r1.b0 (s)			  ## uECC_new.c:989:0
  10438e:    01 e0 04 b0       	ifs (r1 < 0x0) goto 0x8 <uECC_generate_random_int+0x1E : 10439a >			  ## uECC_new.c:243:36
  104392:    a2 f6 00 91       	r2 = [r9+r1<<2]			  ## uECC_new.c:243:39
  104396:    f7 25             	if (r2 == 0x0) goto -0x12 <uECC_generate_random_int+0xA : 104386 >			  ## uECC_new.c:243:39
  104398:    03 18             	goto 0x6 <uECC_generate_random_int+0x24 : 1043a0 >			  ## uECC_new.c:243:39
  10439a:    60 ff ff 09 0d 00 	if ((r0 & 0xff) == 0) goto 0x1a <uECC_generate_random_int+0x3E : 1043ba >
  1043a0:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:255:9
  1043a2:    88 c0             	r0 = r1 << 0x2			  ## uECC_new.c:259:28
  1043a4:    90 09             	r0 += r9			  ## uECC_new.c:259:13
  1043a6:    00 f6 fc 0f       	r0 = [r0 + -0x4]			  ## uECC_new.c:259:13
  1043aa:    49 c1             	r1 = r1 << 0x5			  ## uECC_new.c:260:10
  1043ac:    01 8e             	r1 += -0x20			  ## uECC_new.c:260:10
  1043ae:    02 18             	goto 0x4 <uECC_generate_random_int+0x38 : 1043b4 >			  ## uECC_new.c:260:10
  1043b0:    11 80             	r1 += 0x1			  ## uECC_new.c:260:5
  1043b2:    40 d0             	r0 = r0 >> 0x1			  ## uECC_new.c:261:15
  1043b4:    fd 31             	if (r0 != 0x0) goto -0x6 <uECC_generate_random_int+0x34 : 1043b0 >
  1043b6:    60 04             	r0 = r1.l (u)			  ## uECC_new.c:264:5
  1043b8:    01 18             	goto 0x2 <uECC_generate_random_int+0x40 : 1043bc >
  1043ba:    00 70             	r0 = 0x0
  1043bc:    f0 fd 28 1a       	r1 = r10 << 0x5
  1043c0:    20 b2             	r0 = r1 - r0
  1043c2:    30 04             	r0 = r0.l (s)
  1043c4:    f1 07             	r1 = -0x1
  1043c6:    fa fd 00 b1       	r11 = r1 >> r0
  1043ca:    f0 fd 10 5a       	r5 = r10 << 0x2
  1043ce:    40 bd             	r0 = r6 + r5
  1043d0:    0c fc fc ff       	r12 = r0 + -0x4
  1043d4:    08 70             	r8 = 0x0
  1043d6:    c7 ff 00 3b 1e 00 	r7 = 0x1e3b00 <__stub_uECC_vli_cmp_unsafe+0xDCB04 : 1e3b00 >
  1043dc:    04 70             	r4 = 0x0
  1043de:    19 18             	goto 0x32 <uECC_generate_random_int+0x96 : 104412 >
  1043e0:    00 70             	r0 = 0x0
  1043e2:    04 18             	goto 0x8 <uECC_generate_random_int+0x70 : 1043ec >
  1043e4:    01 4e             	r1 = [r7 + 0x0]			  ## platform-specific.inc:74:28
  1043e6:    11 fa 00 60       	b[r6+r0] = r1			  ## platform-specific.inc:74:17
  1043ea:    10 80             	r0 += 0x1			  ## platform-specific.inc:73:36
  1043ec:    05 f2 fa 1f       	if (r5 != r0) goto -0xc <uECC_generate_random_int+0x68 : 1043e4 >
  1043f0:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## uECC_new.c:1002:31
  1043f4:    e2 fd b0 00       	r0 = r0 & r11			  ## uECC_new.c:1002:31
  1043f8:    10 f6 00 c0       	[r12 + 0x0] = r0			  ## uECC_new.c:1002:31
  1043fc:    60 08             	r0 = r6			  ## uECC_new.c:1003:14
  1043fe:    a1 08             	r1 = r10			  ## uECC_new.c:1003:14
  104400:    84 16             	call -0x2f8 <uECC_vli_isZero : 10410a >			  ## uECC_new.c:1003:14
  104402:    06 30             	if (r0 != 0x0) goto 0xc <uECC_generate_random_int+0x94 : 104410 >			  ## uECC_new.c:1003:14
  104404:    90 08             	r0 = r9			  ## uECC_new.c:1004:11
  104406:    61 08             	r1 = r6			  ## uECC_new.c:1004:11
  104408:    a2 08             	r2 = r10			  ## uECC_new.c:1004:11
  10440a:    a3 17             	call -0xba <uECC_vli_cmp : 104352 >			  ## uECC_new.c:1004:11
  10440c:    10 e0 04 00       	if (r0 == 0x1) goto 0x8 <uECC_generate_random_int+0x9C : 104418 >			  ## uECC_new.c:1004:11
  104410:    14 80             	r4 += 0x1			  ## uECC_new.c:998:49
  104412:    f4 e3 e5 9f       	if (r4 <= 0x3f) goto -0x36 <uECC_generate_random_int+0x64 : 1043e0 >
  104416:    01 18             	goto 0x2 <uECC_generate_random_int+0x9E : 10441a >
  104418:    18 70             	r8 = 0x1
  10441a:    80 08             	r0 = r8			  ## uECC_new.c:1009:1
  10441c:    5c 01             	{pc, r12-r4} = [sp++]			  ## uECC_new.c:1009:1


regularize_k:
  10441e:    79 01             	[--sp] = {rets, r9-r4}			  ## uECC_new.c:912:0
  104420:    36 08             	r6 = r3			  ## uECC_new.c:912:0
  104422:    25 f7 02 60       	r5 = h[r6 + 0x2] (s)			  ## uECC_new.c:913:31
  104426:    28 08             	r8 = r2			  ## uECC_new.c:913:31
  104428:    19 08             	r9 = r1
  10442a:    01 08             	r1 = r0
  10442c:    f0 9b             	r0 = r5 + 0x1f			  ## uECC_new.c:913:31
  10442e:    02 72             	r2 = 0x20			  ## uECC_new.c:913:31
  104430:    e0 fe 20 40       	r4 = r0 / r2 (s)			  ## uECC_new.c:913:31
  104434:    13 05             	r3 = r4.b0 (s)			  ## uECC_new.c:915:25
  104436:    46 82             	r6 += 0x24			  ## uECC_new.c:915:45
  104438:    90 08             	r0 = r9			  ## uECC_new.c:915:25
  10443a:    62 08             	r2 = r6			  ## uECC_new.c:915:25
  10443c:    c7 16             	call -0x272 <uECC_vli_add : 1041cc >			  ## uECC_new.c:915:25
  10443e:    17 70             	r7 = 0x1
  104440:    0c 30             	if (r0 != 0x0) goto 0x18 <regularize_k+0x3C : 10445a >
  104442:    20 c6             	r0 = r4 << 0x18			  ## uECC_new.c:916:24
  104444:    c0 dc             	r0 = r0 >>> 0x13			  ## uECC_new.c:916:65
  104446:    07 70             	r7 = 0x0			  ## uECC_new.c:916:65
  104448:    05 f2 07 a0       	ifs (r5 >= r0) goto 0xe <regularize_k+0x3C : 10445a >			  ## uECC_new.c:916:65
  10444c:    60 05             	r0 = r5.l (u)			  ## uECC_new.c:913:31
  10444e:    31 04             	r1 = r0.l (s)			  ## uECC_new.c:917:10
  104450:    90 08             	r0 = r9			  ## uECC_new.c:917:10
  104452:    69 16             	call -0x32e <uECC_vli_testBit : 104126 >			  ## uECC_new.c:917:10
  104454:    17 70             	r7 = 0x1			  ## uECC_new.c:916:70
  104456:    01 30             	if (r0 != 0x0) goto 0x2 <regularize_k+0x3C : 10445a >			  ## uECC_new.c:916:70
  104458:    07 70             	r7 = 0x0			  ## uECC_new.c:916:70
  10445a:    80 08             	r0 = r8			  ## uECC_new.c:918:5
  10445c:    91 08             	r1 = r9			  ## uECC_new.c:918:5
  10445e:    62 08             	r2 = r6			  ## uECC_new.c:918:5
  104460:    b5 16             	call -0x296 <uECC_vli_add : 1041cc >			  ## uECC_new.c:918:5
  104462:    70 08             	r0 = r7			  ## uECC_new.c:919:5
  104464:    59 01             	{pc, r9-r4} = [sp++]			  ## uECC_new.c:919:5


uECC_vli_clear:
  104466:    02 70             	r2 = 0x0			  ## uECC_new.c:214:0
  104468:    03 70             	r3 = 0x0			  ## uECC_new.c:214:0
  10446a:    03 18             	goto 0x6 <uECC_vli_clear+0xC : 104472 >			  ## uECC_new.c:214:0
  10446c:    52 f6 04 00       	[r0 ++= 0x4] = r2			  ## uECC_new.c:217:16
  104470:    13 80             	r3 += 0x1			  ## uECC_new.c:216:32
  104472:    13 f2 fb bf       	ifs (r3 < r1) goto -0xa <uECC_vli_clear+0x6 : 10446c >
  104476:    20 00             	rts			  ## uECC_new.c:219:1


apply_z:
  104478:    78 01             	[--sp] = {rets, r8-r4}			  ## uECC_new.c:758:0
  10447a:    f0 0b             	sp += -0x20			  ## uECC_new.c:758:0
  10447c:    34 08             	r4 = r3			  ## uECC_new.c:758:0
  10447e:    25 08             	r5 = r2			  ## uECC_new.c:758:0
  104480:    18 08             	r8 = r1			  ## uECC_new.c:758:0
  104482:    07 08             	r7 = r0			  ## uECC_new.c:758:0
  104484:    06 a0             	r6 = sp + 0			  ## uECC_new.c:758:0
  104486:    60 08             	r0 = r6			  ## uECC_new.c:761:5
  104488:    51 08             	r1 = r5			  ## uECC_new.c:761:5
  10448a:    42 08             	r2 = r4			  ## uECC_new.c:761:5
  10448c:    5f 17             	call -0x142 <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:761:5
  10448e:    70 08             	r0 = r7			  ## uECC_new.c:762:5
  104490:    71 08             	r1 = r7			  ## uECC_new.c:762:5
  104492:    62 08             	r2 = r6			  ## uECC_new.c:762:5
  104494:    43 08             	r3 = r4			  ## uECC_new.c:762:5
  104496:    f3 16             	call -0x21a <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:762:5
  104498:    60 08             	r0 = r6			  ## uECC_new.c:763:5
  10449a:    61 08             	r1 = r6			  ## uECC_new.c:763:5
  10449c:    52 08             	r2 = r5			  ## uECC_new.c:763:5
  10449e:    43 08             	r3 = r4			  ## uECC_new.c:763:5
  1044a0:    ee 16             	call -0x224 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:763:5
  1044a2:    80 08             	r0 = r8			  ## uECC_new.c:764:5
  1044a4:    81 08             	r1 = r8			  ## uECC_new.c:764:5
  1044a6:    62 08             	r2 = r6			  ## uECC_new.c:764:5
  1044a8:    43 08             	r3 = r4			  ## uECC_new.c:764:5
  1044aa:    e9 16             	call -0x22e <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:764:5
  1044ac:    10 0a             	sp += 0x20			  ## uECC_new.c:764:5
  1044ae:    58 01             	{pc, r8-r4} = [sp++]			  ## uECC_new.c:765:1


XYcZ_addC:
  1044b0:    7d 01             	[--sp] = {rets, r13-r4}			  ## uECC_new.c:830:0
  1044b2:    ce 0b             	sp += -0x64			  ## uECC_new.c:830:0
  1044b4:    0b f5 90 00       	r11 = [sp+144]			  ## uECC_new.c:830:0
  1044b8:    24 f9 00 b0       	r4 = b[r11 + 0x0] (s)			  ## uECC_new.c:837:5
  1044bc:    3c 08             	r12 = r3			  ## uECC_new.c:837:5
  1044be:    25 08             	r5 = r2
  1044c0:    18 08             	r8 = r1
  1044c2:    09 08             	r9 = r0
  1044c4:    bd fc 04 00       	r13 = r11 + 0x4			  ## uECC_new.c:837:33
  1044c8:    4a a4             	r10 = sp + 68			  ## uECC_new.c:837:33
  1044ca:    0c 02             	[sp] = r4			  ## uECC_new.c:837:5
  1044cc:    a0 08             	r0 = r10			  ## uECC_new.c:837:5
  1044ce:    51 08             	r1 = r5			  ## uECC_new.c:837:5
  1044d0:    92 08             	r2 = r9			  ## uECC_new.c:837:5
  1044d2:    d3 08             	r3 = r13			  ## uECC_new.c:837:5
  1044d4:    a7 16             	call -0x2b2 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:837:5
  1044d6:    a0 08             	r0 = r10			  ## uECC_new.c:838:5
  1044d8:    a1 08             	r1 = r10			  ## uECC_new.c:838:5
  1044da:    b2 08             	r2 = r11			  ## uECC_new.c:838:5
  1044dc:    37 17             	call -0x192 <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:838:5
  1044de:    90 08             	r0 = r9			  ## uECC_new.c:839:5
  1044e0:    91 08             	r1 = r9			  ## uECC_new.c:839:5
  1044e2:    a2 08             	r2 = r10			  ## uECC_new.c:839:5
  1044e4:    b3 08             	r3 = r11			  ## uECC_new.c:839:5
  1044e6:    cb 16             	call -0x26a <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:839:5
  1044e8:    50 08             	r0 = r5			  ## uECC_new.c:840:5
  1044ea:    51 08             	r1 = r5			  ## uECC_new.c:840:5
  1044ec:    a2 08             	r2 = r10			  ## uECC_new.c:840:5
  1044ee:    b3 08             	r3 = r11			  ## uECC_new.c:840:5
  1044f0:    c6 16             	call -0x274 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:840:5
  1044f2:    0c 02             	[sp] = r4			  ## uECC_new.c:841:5
  1044f4:    a0 08             	r0 = r10			  ## uECC_new.c:841:5
  1044f6:    c1 08             	r1 = r12			  ## uECC_new.c:841:5
  1044f8:    82 08             	r2 = r8			  ## uECC_new.c:841:5
  1044fa:    d3 08             	r3 = r13			  ## uECC_new.c:841:5
  1044fc:    80 16             	call -0x300 <uECC_vli_modAdd : 1041fe >			  ## uECC_new.c:841:5
  1044fe:    0c 02             	[sp] = r4			  ## uECC_new.c:842:5
  104500:    c0 08             	r0 = r12			  ## uECC_new.c:842:5
  104502:    c1 08             	r1 = r12			  ## uECC_new.c:842:5
  104504:    82 08             	r2 = r8			  ## uECC_new.c:842:5
  104506:    d3 08             	r3 = r13			  ## uECC_new.c:842:5
  104508:    8d 16             	call -0x2e6 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:842:5
  10450a:    46 a2             	r6 = sp + 36			  ## uECC_new.c:842:5
  10450c:    0c 02             	[sp] = r4			  ## uECC_new.c:844:5
  10450e:    60 08             	r0 = r6			  ## uECC_new.c:844:5
  104510:    51 08             	r1 = r5			  ## uECC_new.c:844:5
  104512:    92 08             	r2 = r9			  ## uECC_new.c:844:5
  104514:    d3 08             	r3 = r13			  ## uECC_new.c:844:5
  104516:    86 16             	call -0x2f4 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:844:5
  104518:    80 08             	r0 = r8			  ## uECC_new.c:845:5
  10451a:    81 08             	r1 = r8			  ## uECC_new.c:845:5
  10451c:    62 08             	r2 = r6			  ## uECC_new.c:845:5
  10451e:    b3 08             	r3 = r11			  ## uECC_new.c:845:5
  104520:    ae 16             	call -0x2a4 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:845:5
  104522:    0c 02             	[sp] = r4			  ## uECC_new.c:846:5
  104524:    60 08             	r0 = r6			  ## uECC_new.c:846:5
  104526:    91 08             	r1 = r9			  ## uECC_new.c:846:5
  104528:    52 08             	r2 = r5			  ## uECC_new.c:846:5
  10452a:    d3 08             	r3 = r13			  ## uECC_new.c:846:5
  10452c:    68 16             	call -0x330 <uECC_vli_modAdd : 1041fe >			  ## uECC_new.c:846:5
  10452e:    50 08             	r0 = r5			  ## uECC_new.c:847:5
  104530:    c1 08             	r1 = r12			  ## uECC_new.c:847:5
  104532:    b2 08             	r2 = r11			  ## uECC_new.c:847:5
  104534:    0b 17             	call -0x1ea <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:847:5
  104536:    0c 02             	[sp] = r4			  ## uECC_new.c:848:5
  104538:    50 08             	r0 = r5			  ## uECC_new.c:848:5
  10453a:    51 08             	r1 = r5			  ## uECC_new.c:848:5
  10453c:    62 08             	r2 = r6			  ## uECC_new.c:848:5
  10453e:    d3 08             	r3 = r13			  ## uECC_new.c:848:5
  104540:    71 16             	call -0x31e <uECC_vli_modSub : 104224 >			  ## uECC_new.c:848:5
  104542:    47 a0             	r7 = sp + 4			  ## uECC_new.c:848:5
  104544:    0c 02             	[sp] = r4			  ## uECC_new.c:850:5
  104546:    70 08             	r0 = r7			  ## uECC_new.c:850:5
  104548:    91 08             	r1 = r9			  ## uECC_new.c:850:5
  10454a:    52 08             	r2 = r5			  ## uECC_new.c:850:5
  10454c:    d3 08             	r3 = r13			  ## uECC_new.c:850:5
  10454e:    6a 16             	call -0x32c <uECC_vli_modSub : 104224 >			  ## uECC_new.c:850:5
  104550:    c0 08             	r0 = r12			  ## uECC_new.c:851:5
  104552:    c1 08             	r1 = r12			  ## uECC_new.c:851:5
  104554:    72 08             	r2 = r7			  ## uECC_new.c:851:5
  104556:    b3 08             	r3 = r11			  ## uECC_new.c:851:5
  104558:    92 16             	call -0x2dc <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:851:5
  10455a:    0c 02             	[sp] = r4			  ## uECC_new.c:852:5
  10455c:    c0 08             	r0 = r12			  ## uECC_new.c:852:5
  10455e:    c1 08             	r1 = r12			  ## uECC_new.c:852:5
  104560:    82 08             	r2 = r8			  ## uECC_new.c:852:5
  104562:    d3 08             	r3 = r13			  ## uECC_new.c:852:5
  104564:    5f 16             	call -0x342 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:852:5
  104566:    70 08             	r0 = r7			  ## uECC_new.c:854:5
  104568:    a1 08             	r1 = r10			  ## uECC_new.c:854:5
  10456a:    b2 08             	r2 = r11			  ## uECC_new.c:854:5
  10456c:    ef 16             	call -0x222 <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:854:5
  10456e:    0c 02             	[sp] = r4			  ## uECC_new.c:855:5
  104570:    70 08             	r0 = r7			  ## uECC_new.c:855:5
  104572:    71 08             	r1 = r7			  ## uECC_new.c:855:5
  104574:    62 08             	r2 = r6			  ## uECC_new.c:855:5
  104576:    d3 08             	r3 = r13			  ## uECC_new.c:855:5
  104578:    55 16             	call -0x356 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:855:5
  10457a:    0c 02             	[sp] = r4			  ## uECC_new.c:856:5
  10457c:    60 08             	r0 = r6			  ## uECC_new.c:856:5
  10457e:    71 08             	r1 = r7			  ## uECC_new.c:856:5
  104580:    92 08             	r2 = r9			  ## uECC_new.c:856:5
  104582:    d3 08             	r3 = r13			  ## uECC_new.c:856:5
  104584:    4f 16             	call -0x362 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:856:5
  104586:    60 08             	r0 = r6			  ## uECC_new.c:857:5
  104588:    61 08             	r1 = r6			  ## uECC_new.c:857:5
  10458a:    a2 08             	r2 = r10			  ## uECC_new.c:857:5
  10458c:    b3 08             	r3 = r11			  ## uECC_new.c:857:5
  10458e:    77 16             	call -0x312 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:857:5
  104590:    0c 02             	[sp] = r4			  ## uECC_new.c:858:5
  104592:    80 08             	r0 = r8			  ## uECC_new.c:858:5
  104594:    61 08             	r1 = r6			  ## uECC_new.c:858:5
  104596:    82 08             	r2 = r8			  ## uECC_new.c:858:5
  104598:    d3 08             	r3 = r13			  ## uECC_new.c:858:5
  10459a:    44 16             	call -0x378 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:858:5
  10459c:    90 08             	r0 = r9			  ## uECC_new.c:860:5
  10459e:    71 08             	r1 = r7			  ## uECC_new.c:860:5
  1045a0:    42 08             	r2 = r4			  ## uECC_new.c:860:5
  1045a2:    cb 15             	call -0x46a <uECC_vli_set : 10413a >			  ## uECC_new.c:860:5
  1045a4:    32 0a             	sp += 0x64			  ## uECC_new.c:860:5
  1045a6:    5d 01             	{pc, r13-r4} = [sp++]			  ## uECC_new.c:861:1


XYcZ_add:
  1045a8:    7b 01             	[--sp] = {rets, r11-r4}			  ## uECC_new.c:799:0
  1045aa:    ee 0b             	sp += -0x24			  ## uECC_new.c:799:0
  1045ac:    27 03             	r7 = [sp+72]			  ## uECC_new.c:799:0
  1045ae:    24 f9 00 70       	r4 = b[r7 + 0x0] (s)			  ## uECC_new.c:804:5
  1045b2:    39 08             	r9 = r3			  ## uECC_new.c:804:5
  1045b4:    25 08             	r5 = r2
  1045b6:    18 08             	r8 = r1
  1045b8:    0b 08             	r11 = r0
  1045ba:    4a 9e             	r10 = r7 + 0x4			  ## uECC_new.c:804:33
  1045bc:    46 a0             	r6 = sp + 4			  ## uECC_new.c:804:33
  1045be:    0c 02             	[sp] = r4			  ## uECC_new.c:804:5
  1045c0:    60 08             	r0 = r6			  ## uECC_new.c:804:5
  1045c2:    51 08             	r1 = r5			  ## uECC_new.c:804:5
  1045c4:    b2 08             	r2 = r11			  ## uECC_new.c:804:5
  1045c6:    a3 08             	r3 = r10			  ## uECC_new.c:804:5
  1045c8:    2d 16             	call -0x3a6 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:804:5
  1045ca:    60 08             	r0 = r6			  ## uECC_new.c:805:5
  1045cc:    61 08             	r1 = r6			  ## uECC_new.c:805:5
  1045ce:    72 08             	r2 = r7			  ## uECC_new.c:805:5
  1045d0:    bd 16             	call -0x286 <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:805:5
  1045d2:    b0 08             	r0 = r11			  ## uECC_new.c:806:5
  1045d4:    b1 08             	r1 = r11			  ## uECC_new.c:806:5
  1045d6:    62 08             	r2 = r6			  ## uECC_new.c:806:5
  1045d8:    73 08             	r3 = r7			  ## uECC_new.c:806:5
  1045da:    51 16             	call -0x35e <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:806:5
  1045dc:    50 08             	r0 = r5			  ## uECC_new.c:807:5
  1045de:    51 08             	r1 = r5			  ## uECC_new.c:807:5
  1045e0:    62 08             	r2 = r6			  ## uECC_new.c:807:5
  1045e2:    73 08             	r3 = r7			  ## uECC_new.c:807:5
  1045e4:    4c 16             	call -0x368 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:807:5
  1045e6:    0c 02             	[sp] = r4			  ## uECC_new.c:808:5
  1045e8:    90 08             	r0 = r9			  ## uECC_new.c:808:5
  1045ea:    91 08             	r1 = r9			  ## uECC_new.c:808:5
  1045ec:    82 08             	r2 = r8			  ## uECC_new.c:808:5
  1045ee:    a3 08             	r3 = r10			  ## uECC_new.c:808:5
  1045f0:    19 16             	call -0x3ce <uECC_vli_modSub : 104224 >			  ## uECC_new.c:808:5
  1045f2:    60 08             	r0 = r6			  ## uECC_new.c:809:5
  1045f4:    91 08             	r1 = r9			  ## uECC_new.c:809:5
  1045f6:    72 08             	r2 = r7			  ## uECC_new.c:809:5
  1045f8:    a9 16             	call -0x2ae <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:809:5
  1045fa:    0c 02             	[sp] = r4			  ## uECC_new.c:811:5
  1045fc:    60 08             	r0 = r6			  ## uECC_new.c:811:5
  1045fe:    61 08             	r1 = r6			  ## uECC_new.c:811:5
  104600:    b2 08             	r2 = r11			  ## uECC_new.c:811:5
  104602:    a3 08             	r3 = r10			  ## uECC_new.c:811:5
  104604:    0f 16             	call -0x3e2 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:811:5
  104606:    0c 02             	[sp] = r4			  ## uECC_new.c:812:5
  104608:    60 08             	r0 = r6			  ## uECC_new.c:812:5
  10460a:    61 08             	r1 = r6			  ## uECC_new.c:812:5
  10460c:    52 08             	r2 = r5			  ## uECC_new.c:812:5
  10460e:    a3 08             	r3 = r10			  ## uECC_new.c:812:5
  104610:    09 16             	call -0x3ee <uECC_vli_modSub : 104224 >			  ## uECC_new.c:812:5
  104612:    0c 02             	[sp] = r4			  ## uECC_new.c:813:5
  104614:    50 08             	r0 = r5			  ## uECC_new.c:813:5
  104616:    51 08             	r1 = r5			  ## uECC_new.c:813:5
  104618:    b2 08             	r2 = r11			  ## uECC_new.c:813:5
  10461a:    a3 08             	r3 = r10			  ## uECC_new.c:813:5
  10461c:    03 16             	call -0x3fa <uECC_vli_modSub : 104224 >			  ## uECC_new.c:813:5
  10461e:    80 08             	r0 = r8			  ## uECC_new.c:814:5
  104620:    81 08             	r1 = r8			  ## uECC_new.c:814:5
  104622:    52 08             	r2 = r5			  ## uECC_new.c:814:5
  104624:    73 08             	r3 = r7			  ## uECC_new.c:814:5
  104626:    2b 16             	call -0x3aa <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:814:5
  104628:    0c 02             	[sp] = r4			  ## uECC_new.c:815:5
  10462a:    50 08             	r0 = r5			  ## uECC_new.c:815:5
  10462c:    b1 08             	r1 = r11			  ## uECC_new.c:815:5
  10462e:    62 08             	r2 = r6			  ## uECC_new.c:815:5
  104630:    a3 08             	r3 = r10			  ## uECC_new.c:815:5
  104632:    f8 15             	call -0x410 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:815:5
  104634:    90 08             	r0 = r9			  ## uECC_new.c:816:5
  104636:    91 08             	r1 = r9			  ## uECC_new.c:816:5
  104638:    52 08             	r2 = r5			  ## uECC_new.c:816:5
  10463a:    73 08             	r3 = r7			  ## uECC_new.c:816:5
  10463c:    20 16             	call -0x3c0 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:816:5
  10463e:    0c 02             	[sp] = r4			  ## uECC_new.c:817:5
  104640:    90 08             	r0 = r9			  ## uECC_new.c:817:5
  104642:    91 08             	r1 = r9			  ## uECC_new.c:817:5
  104644:    82 08             	r2 = r8			  ## uECC_new.c:817:5
  104646:    a3 08             	r3 = r10			  ## uECC_new.c:817:5
  104648:    ed 15             	call -0x426 <uECC_vli_modSub : 104224 >			  ## uECC_new.c:817:5
  10464a:    50 08             	r0 = r5			  ## uECC_new.c:819:5
  10464c:    61 08             	r1 = r6			  ## uECC_new.c:819:5
  10464e:    42 08             	r2 = r4			  ## uECC_new.c:819:5
  104650:    74 15             	call -0x518 <uECC_vli_set : 10413a >			  ## uECC_new.c:819:5
  104652:    12 0a             	sp += 0x24			  ## uECC_new.c:819:5
  104654:    5b 01             	{pc, r11-r4} = [sp++]			  ## uECC_new.c:820:1


vli_modInv_update:
  104656:    76 01             	[--sp] = {rets, r6-r4}			  ## uECC_new.c:685:0
  104658:    04 08             	r4 = r0			  ## uECC_new.c:685:0
  10465a:    00 68             	r0 = b[r4 + 0x0] (u)			  ## uECC_new.c:687:9
  10465c:    25 08             	r5 = r2
  10465e:    12 08             	r2 = r1
  104660:    20 f3 04 00       	if ((r0 & 0x1) != 0) goto 0x8 <vli_modInv_update+0x16 : 10466c >
  104664:    40 08             	r0 = r4			  ## uECC_new.c:690:5
  104666:    51 08             	r1 = r5			  ## uECC_new.c:690:5
  104668:    a1 15             	call -0x4be <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:690:5
  10466a:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:694:1
  10466c:    40 08             	r0 = r4			  ## uECC_new.c:688:17
  10466e:    41 08             	r1 = r4			  ## uECC_new.c:688:17
  104670:    53 08             	r3 = r5			  ## uECC_new.c:688:17
  104672:    ac 15             	call -0x4a8 <uECC_vli_add : 1041cc >			  ## uECC_new.c:688:17
  104674:    06 08             	r6 = r0			  ## uECC_new.c:688:17
  104676:    40 08             	r0 = r4			  ## uECC_new.c:690:5
  104678:    51 08             	r1 = r5			  ## uECC_new.c:690:5
  10467a:    98 15             	call -0x4d0 <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:690:5
  10467c:    05 2c             	if (r6 == 0x0) goto 0xa <vli_modInv_update+0x32 : 104688 >			  ## uECC_new.c:690:5
  10467e:    a8 c0             	r0 = r5 << 0x2			  ## uECC_new.c:692:22
  104680:    40 09             	r0 += r4			  ## uECC_new.c:692:9
  104682:    3f f4 80 0c       	[r0 + -0x4] |= 0x80000000			  ## uECC_new.c:692:27
  104686:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:694:1
  104688:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:694:1


EccPoint_mult:
  10468a:    7f 01             	[--sp] = {rets, r15-r4}			  ## uECC_new.c:869:0
  10468c:    58 0b             	sp += -0x150			  ## uECC_new.c:869:0
  10468e:    08 f5 88 01       	r8 = [sp+392]			  ## uECC_new.c:869:0
  104692:    26 f9 00 80       	r6 = b[r8 + 0x0] (s)			  ## uECC_new.c:878:5
  104696:    3a 08             	r10 = r3			  ## uECC_new.c:878:5
  104698:    2c 08             	r12 = r2
  10469a:    1e 08             	r14 = r1
  10469c:    38 02             	[sp+12] = r0
  10469e:    00 a7             	r0 = sp + 112
  1046a0:    0f fc 20 00       	r15 = r0 + 0x20			  ## uECC_new.c:878:18
  1046a4:    f0 08             	r0 = r15			  ## uECC_new.c:878:5
  1046a6:    62 08             	r2 = r6			  ## uECC_new.c:878:5
  1046a8:    48 15             	call -0x570 <uECC_vli_set : 10413a >			  ## uECC_new.c:878:5
  1046aa:    b0 c0             	r0 = r6 << 0x2			  ## uECC_new.c:879:31
  1046ac:    28 02             	[sp+8] = r0			  ## uECC_new.c:879:31
  1046ae:    80 fb 00 1e       	r1 = r14 + r0			  ## uECC_new.c:879:31
  1046b2:    00 a3             	r0 = sp + 48			  ## uECC_new.c:879:31
  1046b4:    0b fc 20 00       	r11 = r0 + 0x20			  ## uECC_new.c:879:18
  1046b8:    b0 08             	r0 = r11			  ## uECC_new.c:879:5
  1046ba:    19 02             	[sp+4] = r1
  1046bc:    3e 15             	call -0x584 <uECC_vli_set : 10413a >			  ## uECC_new.c:879:5
  1046be:    05 f9 00 80       	r5 = b[r8 + 0x0] (u)			  ## uECC_new.c:775:36
  1046c2:    04 f5 84 01       	r4 = [sp+388]			  ## uECC_new.c:775:36
  1046c6:    0a e0 05 00       	if (r10 == 0x0) goto 0xa <EccPoint_mult+0x4A : 1046d4 >			  ## uECC_new.c:776:9
  1046ca:    52 05             	r2 = r5.b0 (s)			  ## uECC_new.c:777:9
  1046cc:    00 ab             	r0 = sp + 176			  ## uECC_new.c:777:9
  1046ce:    a1 08             	r1 = r10			  ## uECC_new.c:777:9
  1046d0:    34 15             	call -0x598 <uECC_vli_set : 10413a >			  ## uECC_new.c:777:9
  1046d2:    06 18             	goto 0xc <EccPoint_mult+0x56 : 1046e0 >			  ## uECC_new.c:777:9
  1046d4:    51 05             	r1 = r5.b0 (s)			  ## uECC_new.c:779:9
  1046d6:    00 ab             	r0 = sp + 176			  ## uECC_new.c:779:9
  1046d8:    c6 16             	call -0x274 <uECC_vli_clear : 104466 >			  ## uECC_new.c:779:9
  1046da:    10 70             	r0 = 0x1			  ## uECC_new.c:780:14
  1046dc:    10 f5 b0 00       	[sp+176] = r0			  ## uECC_new.c:780:14
  1046e0:    89 05             	r9 = r6.b0 (u)			  ## uECC_new.c:876:36
  1046e2:    52 05             	r2 = r5.b0 (s)			  ## uECC_new.c:783:5
  1046e4:    0a a7             	r10 = sp + 112			  ## uECC_new.c:783:5
  1046e6:    a0 08             	r0 = r10			  ## uECC_new.c:783:5
  1046e8:    f1 08             	r1 = r15			  ## uECC_new.c:783:5
  1046ea:    27 15             	call -0x5b2 <uECC_vli_set : 10413a >			  ## uECC_new.c:783:5
  1046ec:    06 a3             	r6 = sp + 48			  ## uECC_new.c:783:5
  1046ee:    60 08             	r0 = r6			  ## uECC_new.c:784:5
  1046f0:    b1 08             	r1 = r11			  ## uECC_new.c:784:5
  1046f2:    23 15             	call -0x5ba <uECC_vli_set : 10413a >			  ## uECC_new.c:784:5
  1046f4:    07 ab             	r7 = sp + 176			  ## uECC_new.c:784:5
  1046f6:    f0 08             	r0 = r15			  ## uECC_new.c:786:5
  1046f8:    b1 08             	r1 = r11			  ## uECC_new.c:786:5
  1046fa:    72 08             	r2 = r7			  ## uECC_new.c:786:5
  1046fc:    83 08             	r3 = r8			  ## uECC_new.c:786:5
  1046fe:    bc 16             	call -0x288 <apply_z : 104478 >			  ## uECC_new.c:786:5
  104700:    05 f6 a4 80       	r5 = [r8 + 0xa4]			  ## uECC_new.c:787:12
  104704:    f0 08             	r0 = r15			  ## uECC_new.c:787:5
  104706:    b1 08             	r1 = r11			  ## uECC_new.c:787:5
  104708:    72 08             	r2 = r7			  ## uECC_new.c:787:5
  10470a:    83 08             	r3 = r8			  ## uECC_new.c:787:5
  10470c:    85 00             	call r5			  ## uECC_new.c:787:5
  10470e:    a0 08             	r0 = r10			  ## uECC_new.c:788:5
  104710:    61 08             	r1 = r6			  ## uECC_new.c:788:5
  104712:    72 08             	r2 = r7			  ## uECC_new.c:788:5
  104714:    83 08             	r3 = r8			  ## uECC_new.c:788:5
  104716:    b0 16             	call -0x2a0 <apply_z : 104478 >			  ## uECC_new.c:788:5
  104718:    4a fc fe ff       	r10 = r4 + -0x2			  ## uECC_new.c:883:23
  10471c:    1f 18             	goto 0x3e <EccPoint_mult+0xD2 : 10475c >			  ## uECC_new.c:883:23
  10471e:    c0 08             	r0 = r12			  ## uECC_new.c:884:15
  104720:    02 15             	call -0x5fc <uECC_vli_testBit : 104126 >			  ## uECC_new.c:884:15
  104722:    18 f5 00 00       	[sp] = r8			  ## uECC_new.c:885:9
  104726:    11 70             	r1 = 0x1			  ## uECC_new.c:885:9
  104728:    12 70             	r2 = 0x1			  ## uECC_new.c:885:24
  10472a:    01 30             	if (r0 != 0x0) goto 0x2 <EccPoint_mult+0xA4 : 10472e >			  ## uECC_new.c:885:24
  10472c:    02 70             	r2 = 0x0			  ## uECC_new.c:885:24
  10472e:    54 c1             	r4 = r2 << 0x5			  ## uECC_new.c:885:19
  104730:    02 a7             	r2 = sp + 112
  104732:    06 b5             	r6 = r2 + r4			  ## uECC_new.c:885:19
  104734:    03 a3             	r3 = sp + 48			  ## uECC_new.c:885:19
  104736:    07 b7             	r7 = r3 + r4			  ## uECC_new.c:885:31
  104738:    01 20             	if (r0 == 0x0) goto 0x2 <EccPoint_mult+0xB2 : 10473c >			  ## uECC_new.c:885:31
  10473a:    01 70             	r1 = 0x0			  ## uECC_new.c:884:14
  10473c:    48 c1             	r0 = r1 << 0x5			  ## uECC_new.c:885:43
  10473e:    05 b4             	r5 = r2 + r0			  ## uECC_new.c:885:43
  104740:    04 b6             	r4 = r3 + r0			  ## uECC_new.c:885:51
  104742:    60 08             	r0 = r6			  ## uECC_new.c:885:9
  104744:    71 08             	r1 = r7			  ## uECC_new.c:885:9
  104746:    52 08             	r2 = r5			  ## uECC_new.c:885:9
  104748:    43 08             	r3 = r4			  ## uECC_new.c:885:9
  10474a:    b2 16             	call -0x29c <XYcZ_addC : 1044b0 >			  ## uECC_new.c:885:9
  10474c:    18 f5 00 00       	[sp] = r8			  ## uECC_new.c:886:9
  104750:    50 08             	r0 = r5			  ## uECC_new.c:886:9
  104752:    41 08             	r1 = r4			  ## uECC_new.c:886:9
  104754:    62 08             	r2 = r6			  ## uECC_new.c:886:9
  104756:    73 08             	r3 = r7			  ## uECC_new.c:886:9
  104758:    27 17             	call -0x1b2 <XYcZ_add : 1045a8 >			  ## uECC_new.c:886:9
  10475a:    fa 8f             	r10 += -0x1			  ## uECC_new.c:883:35
  10475c:    e7 fd 00 1a       	r1 = r10.l (s)			  ## uECC_new.c:883:30
  104760:    11 e0 dd af       	ifs (r1 >= 0x1) goto -0x46 <EccPoint_mult+0x94 : 10471e >			  ## uECC_new.c:883:30
  104764:    00 f6 00 c0       	r0 = [r12 + 0x0]			  ## uECC_new.c:235:13
  104768:    20 fd 01 09       	r0 = r0 & 0x1			  ## uECC_new.c:235:46
  10476c:    41 c1             	r1 = r0 << 0x5			  ## uECC_new.c:890:15
  10476e:    05 a7             	r5 = sp + 112			  ## uECC_new.c:890:15
  104770:    4c ba             	r12 = r5 + r1			  ## uECC_new.c:890:15
  104772:    02 a3             	r2 = sp + 48
  104774:    4d b4             	r13 = r2 + r1			  ## uECC_new.c:890:27
  104776:    30 b0             	r0 ^= 0x1			  ## uECC_new.c:889:10
  104778:    40 c1             	r0 = r0 << 0x5			  ## uECC_new.c:890:39
  10477a:    0a ba             	r10 = r5 + r0			  ## uECC_new.c:890:39
  10477c:    0b b4             	r11 = r2 + r0			  ## uECC_new.c:890:47
  10477e:    18 f5 00 00       	[sp] = r8			  ## uECC_new.c:890:5
  104782:    c0 08             	r0 = r12			  ## uECC_new.c:890:5
  104784:    d1 08             	r1 = r13			  ## uECC_new.c:890:5
  104786:    a2 08             	r2 = r10			  ## uECC_new.c:890:5
  104788:    b3 08             	r3 = r11			  ## uECC_new.c:890:5
  10478a:    92 16             	call -0x2dc <XYcZ_addC : 1044b0 >			  ## uECC_new.c:890:5
  10478c:    e5 fd 00 79       	r7 = r9.b0 (s)			  ## uECC_new.c:893:5
  104790:    84 fc 04 00       	r4 = r8 + 0x4			  ## uECC_new.c:893:38
  104794:    06 a1             	r6 = sp + 16
  104796:    0f 02             	[sp] = r7			  ## uECC_new.c:893:5
  104798:    60 08             	r0 = r6			  ## uECC_new.c:893:5
  10479a:    f1 08             	r1 = r15			  ## uECC_new.c:893:5
  10479c:    52 08             	r2 = r5			  ## uECC_new.c:893:5
  10479e:    43 08             	r3 = r4			  ## uECC_new.c:893:5
  1047a0:    41 15             	call -0x57e <uECC_vli_modSub : 104224 >			  ## uECC_new.c:893:5
  1047a2:    60 08             	r0 = r6			  ## uECC_new.c:894:5
  1047a4:    61 08             	r1 = r6			  ## uECC_new.c:894:5
  1047a6:    d2 08             	r2 = r13			  ## uECC_new.c:894:5
  1047a8:    83 08             	r3 = r8			  ## uECC_new.c:894:5
  1047aa:    69 15             	call -0x52e <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:894:5
  1047ac:    60 08             	r0 = r6			  ## uECC_new.c:895:5
  1047ae:    61 08             	r1 = r6			  ## uECC_new.c:895:5
  1047b0:    e2 08             	r2 = r14			  ## uECC_new.c:895:5
  1047b2:    83 08             	r3 = r8			  ## uECC_new.c:895:5
  1047b4:    64 15             	call -0x538 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:895:5
  1047b6:    60 08             	r0 = r6			  ## uECC_new.c:705:9
  1047b8:    71 08             	r1 = r7			  ## uECC_new.c:705:9
  1047ba:    a7 14             	call -0x6b2 <uECC_vli_isZero : 10410a >			  ## uECC_new.c:705:9
  1047bc:    03 20             	if (r0 == 0x0) goto 0x6 <EccPoint_mult+0x13A : 1047c4 >			  ## uECC_new.c:705:9
  1047be:    00 a1             	r0 = sp + 16
  1047c0:    52 16             	call -0x35c <uECC_vli_clear : 104466 >			  ## uECC_new.c:706:9
  1047c2:    6c 18             	goto 0xd8 <EccPoint_mult+0x212 : 10489c >			  ## uECC_new.c:706:9
  1047c4:    e0 fb 30 01       	r0 = sp + 304
  1047c8:    01 a1             	r1 = sp + 16
  1047ca:    72 08             	r2 = r7			  ## uECC_new.c:710:5
  1047cc:    b6 14             	call -0x694 <uECC_vli_set : 10413a >			  ## uECC_new.c:710:5
  1047ce:    e0 fb 10 01       	r0 = sp + 272			  ## uECC_new.c:710:5
  1047d2:    41 08             	r1 = r4			  ## uECC_new.c:711:5
  1047d4:    b2 14             	call -0x69c <uECC_vli_set : 10413a >			  ## uECC_new.c:711:5
  1047d6:    00 af             	r0 = sp + 240			  ## uECC_new.c:711:5
  1047d8:    71 08             	r1 = r7			  ## uECC_new.c:712:5
  1047da:    45 16             	call -0x376 <uECC_vli_clear : 104466 >			  ## uECC_new.c:712:5
  1047dc:    10 70             	r0 = 0x1			  ## uECC_new.c:713:10
  1047de:    10 f5 f0 00       	[sp+240] = r0			  ## uECC_new.c:713:10
  1047e2:    00 ad             	r0 = sp + 208			  ## uECC_new.c:713:10
  1047e4:    40 16             	call -0x380 <uECC_vli_clear : 104466 >			  ## uECC_new.c:714:5
  1047e6:    4f 18             	goto 0x9e <EccPoint_mult+0x1FC : 104886 >			  ## uECC_new.c:714:5
  1047e8:    c1 f5 30 01       	r1 = b[sp+304] (u)			  ## uECC_new.c:716:13
  1047ec:    20 f3 06 10       	if ((r1 & 0x1) != 0) goto 0xc <EccPoint_mult+0x172 : 1047fc >			  ## uECC_new.c:716:13
  1047f0:    e0 fb 30 01       	r0 = sp + 304
  1047f4:    71 08             	r1 = r7			  ## uECC_new.c:717:13
  1047f6:    da 14             	call -0x64c <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:717:13
  1047f8:    00 af             	r0 = sp + 240			  ## uECC_new.c:717:13
  1047fa:    42 18             	goto 0x84 <EccPoint_mult+0x1F6 : 104880 >			  ## uECC_new.c:717:13
  1047fc:    c1 f5 10 01       	r1 = b[sp+272] (u)			  ## uECC_new.c:719:20
  104800:    20 f3 06 10       	if ((r1 & 0x1) != 0) goto 0xc <EccPoint_mult+0x186 : 104810 >			  ## uECC_new.c:719:20
  104804:    e0 fb 10 01       	r0 = sp + 272
  104808:    71 08             	r1 = r7			  ## uECC_new.c:720:13
  10480a:    d0 14             	call -0x660 <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:720:13
  10480c:    00 ad             	r0 = sp + 208			  ## uECC_new.c:720:13
  10480e:    38 18             	goto 0x70 <EccPoint_mult+0x1F6 : 104880 >			  ## uECC_new.c:720:13
  104810:    10 e0 19 b0       	ifs (r0 < 0x1) goto 0x32 <EccPoint_mult+0x1BC : 104846 >			  ## uECC_new.c:722:20
  104814:    e5 fb 30 01       	r5 = sp + 304
  104818:    e2 fb 10 01       	r2 = sp + 272
  10481c:    50 08             	r0 = r5			  ## uECC_new.c:723:13
  10481e:    51 08             	r1 = r5			  ## uECC_new.c:723:13
  104820:    73 08             	r3 = r7			  ## uECC_new.c:723:13
  104822:    ab 14             	call -0x6aa <uECC_vli_sub : 10417a >			  ## uECC_new.c:723:13
  104824:    50 08             	r0 = r5			  ## uECC_new.c:724:13
  104826:    71 08             	r1 = r7			  ## uECC_new.c:724:13
  104828:    c1 14             	call -0x67e <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:724:13
  10482a:    00 af             	r0 = sp + 240			  ## uECC_new.c:724:13
  10482c:    01 ad             	r1 = sp + 208			  ## uECC_new.c:724:13
  10482e:    72 08             	r2 = r7			  ## uECC_new.c:725:17
  104830:    8f 14             	call -0x6e2 <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:725:17
  104832:    f0 ef 05 c0       	ifs (r0 > -0x1) goto 0xa <EccPoint_mult+0x1B6 : 104840 >			  ## uECC_new.c:725:17
  104836:    00 af             	r0 = sp + 240
  104838:    01 08             	r1 = r0			  ## uECC_new.c:726:17
  10483a:    42 08             	r2 = r4			  ## uECC_new.c:726:17
  10483c:    73 08             	r3 = r7			  ## uECC_new.c:726:17
  10483e:    c6 14             	call -0x674 <uECC_vli_add : 1041cc >			  ## uECC_new.c:726:17
  104840:    05 af             	r5 = sp + 240
  104842:    02 ad             	r2 = sp + 208
  104844:    18 18             	goto 0x30 <EccPoint_mult+0x1EC : 104876 >
  104846:    e5 fb 10 01       	r5 = sp + 272
  10484a:    e2 fb 30 01       	r2 = sp + 304
  10484e:    50 08             	r0 = r5			  ## uECC_new.c:731:13
  104850:    51 08             	r1 = r5			  ## uECC_new.c:731:13
  104852:    73 08             	r3 = r7			  ## uECC_new.c:731:13
  104854:    92 14             	call -0x6dc <uECC_vli_sub : 10417a >			  ## uECC_new.c:731:13
  104856:    50 08             	r0 = r5			  ## uECC_new.c:732:13
  104858:    71 08             	r1 = r7			  ## uECC_new.c:732:13
  10485a:    a8 14             	call -0x6b0 <uECC_vli_rshift1 : 1041ac >			  ## uECC_new.c:732:13
  10485c:    00 ad             	r0 = sp + 208			  ## uECC_new.c:732:13
  10485e:    01 af             	r1 = sp + 240			  ## uECC_new.c:732:13
  104860:    72 08             	r2 = r7			  ## uECC_new.c:733:17
  104862:    76 14             	call -0x714 <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:733:17
  104864:    f0 ef 05 c0       	ifs (r0 > -0x1) goto 0xa <EccPoint_mult+0x1E8 : 104872 >			  ## uECC_new.c:733:17
  104868:    00 ad             	r0 = sp + 208
  10486a:    01 08             	r1 = r0			  ## uECC_new.c:734:17
  10486c:    42 08             	r2 = r4			  ## uECC_new.c:734:17
  10486e:    73 08             	r3 = r7			  ## uECC_new.c:734:17
  104870:    ad 14             	call -0x6a6 <uECC_vli_add : 1041cc >			  ## uECC_new.c:734:17
  104872:    05 ad             	r5 = sp + 208
  104874:    02 af             	r2 = sp + 240
  104876:    50 08             	r0 = r5
  104878:    51 08             	r1 = r5
  10487a:    73 08             	r3 = r7
  10487c:    7e 14             	call -0x704 <uECC_vli_sub : 10417a >
  10487e:    50 08             	r0 = r5
  104880:    41 08             	r1 = r4
  104882:    72 08             	r2 = r7
  104884:    e8 16             	call -0x230 <vli_modInv_update : 104656 >
  104886:    e0 fb 30 01       	r0 = sp + 304
  10488a:    e1 fb 10 01       	r1 = sp + 272
  10488e:    72 08             	r2 = r7			  ## uECC_new.c:715:25
  104890:    5f 14             	call -0x742 <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:715:25
  104892:    aa 31             	if (r0 != 0x0) goto -0xac <EccPoint_mult+0x15E : 1047e8 >			  ## uECC_new.c:715:25
  104894:    00 a1             	r0 = sp + 16
  104896:    01 af             	r1 = sp + 240
  104898:    72 08             	r2 = r7			  ## uECC_new.c:740:5
  10489a:    4f 14             	call -0x762 <uECC_vli_set : 10413a >			  ## uECC_new.c:740:5
  10489c:    04 a1             	r4 = sp + 16
  10489e:    40 08             	r0 = r4			  ## uECC_new.c:898:5
  1048a0:    41 08             	r1 = r4			  ## uECC_new.c:898:5
  1048a2:    12 02             	r2 = [sp+4]			  ## uECC_new.c:898:5
  1048a4:    83 08             	r3 = r8			  ## uECC_new.c:898:5
  1048a6:    eb 14             	call -0x62a <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:898:5
  1048a8:    40 08             	r0 = r4			  ## uECC_new.c:899:5
  1048aa:    41 08             	r1 = r4			  ## uECC_new.c:899:5
  1048ac:    c2 08             	r2 = r12			  ## uECC_new.c:899:5
  1048ae:    83 08             	r3 = r8			  ## uECC_new.c:899:5
  1048b0:    e6 14             	call -0x634 <uECC_vli_modMult_fast : 10427e >			  ## uECC_new.c:899:5
  1048b2:    18 f5 00 00       	[sp] = r8			  ## uECC_new.c:902:5
  1048b6:    a0 08             	r0 = r10			  ## uECC_new.c:902:5
  1048b8:    b1 08             	r1 = r11			  ## uECC_new.c:902:5
  1048ba:    c2 08             	r2 = r12			  ## uECC_new.c:902:5
  1048bc:    d3 08             	r3 = r13			  ## uECC_new.c:902:5
  1048be:    74 16             	call -0x318 <XYcZ_add : 1045a8 >			  ## uECC_new.c:902:5
  1048c0:    05 a7             	r5 = sp + 112			  ## uECC_new.c:902:5
  1048c2:    06 a3             	r6 = sp + 48			  ## uECC_new.c:902:5
  1048c4:    50 08             	r0 = r5			  ## uECC_new.c:903:5
  1048c6:    61 08             	r1 = r6			  ## uECC_new.c:903:5
  1048c8:    42 08             	r2 = r4			  ## uECC_new.c:903:5
  1048ca:    83 08             	r3 = r8			  ## uECC_new.c:903:5
  1048cc:    d5 15             	call -0x456 <apply_z : 104478 >			  ## uECC_new.c:903:5
  1048ce:    34 02             	r4 = [sp+12]			  ## uECC_new.c:903:5
  1048d0:    40 08             	r0 = r4			  ## uECC_new.c:905:5
  1048d2:    51 08             	r1 = r5			  ## uECC_new.c:905:5
  1048d4:    72 08             	r2 = r7			  ## uECC_new.c:905:5
  1048d6:    31 14             	call -0x79e <uECC_vli_set : 10413a >			  ## uECC_new.c:905:5
  1048d8:    20 02             	r0 = [sp+8]			  ## uECC_new.c:906:25
  1048da:    40 09             	r0 += r4			  ## uECC_new.c:906:25
  1048dc:    61 08             	r1 = r6			  ## uECC_new.c:906:5
  1048de:    2d 14             	call -0x7a6 <uECC_vli_set : 10413a >			  ## uECC_new.c:906:5
  1048e0:    a8 0a             	sp += 0x150			  ## uECC_new.c:906:5
  1048e2:    5f 01             	{pc, r15-r4} = [sp++]			  ## uECC_new.c:907:1


EccPoint_compute_public_key:
  1048e4:    76 01             	[--sp] = {rets, r6-r4}			  ## uECC_new.c:924:0
  1048e6:    d8 0b             	sp += -0x50			  ## uECC_new.c:924:0
  1048e8:    25 08             	r5 = r2			  ## uECC_new.c:924:0
  1048ea:    04 08             	r4 = r0			  ## uECC_new.c:924:0
  1048ec:    03 a3             	r3 = sp + 48			  ## uECC_new.c:924:0
  1048ee:    2b 02             	[sp+8] = r3			  ## uECC_new.c:927:26
  1048f0:    02 a1             	r2 = sp + 16			  ## uECC_new.c:927:26
  1048f2:    3a 02             	[sp+12] = r2			  ## uECC_new.c:927:26
  1048f4:    10 08             	r0 = r1			  ## uECC_new.c:932:13
  1048f6:    31 08             	r1 = r3			  ## uECC_new.c:932:13
  1048f8:    53 08             	r3 = r5			  ## uECC_new.c:932:13
  1048fa:    91 15             	call -0x4de <regularize_k : 10441e >			  ## uECC_new.c:932:13
  1048fc:    16 70             	r6 = 0x1
  1048fe:    11 70             	r1 = 0x1			  ## uECC_new.c:934:40
  104900:    01 20             	if (r0 == 0x0) goto 0x2 <EccPoint_compute_public_key+0x20 : 104904 >			  ## uECC_new.c:934:40
  104902:    01 70             	r1 = 0x0			  ## uECC_new.c:934:40
  104904:    80 a0             	r0 = sp + 8
  104906:    a2 f6 00 01       	r2 = [r0+r1<<2]			  ## uECC_new.c:934:37
  10490a:    10 5a             	r0 = h[r5 + 0x2] (u)			  ## uECC_new.c:934:59
  10490c:    1d 02             	[sp+4] = r5			  ## uECC_new.c:934:5
  10490e:    10 80             	r0 += 0x1			  ## uECC_new.c:934:70
  104910:    30 04             	r0 = r0.l (s)			  ## uECC_new.c:934:5
  104912:    51 fc 44 00       	r1 = r5 + 0x44			  ## uECC_new.c:934:27
  104916:    03 70             	r3 = 0x0			  ## uECC_new.c:934:5
  104918:    08 02             	[sp] = r0			  ## uECC_new.c:934:5
  10491a:    40 08             	r0 = r4			  ## uECC_new.c:934:5
  10491c:    b6 16             	call -0x294 <EccPoint_mult : 10468a >			  ## uECC_new.c:934:5
  10491e:    00 6a             	r0 = b[r5 + 0x0] (u)			  ## uECC_new.c:936:9
  104920:    40 c0             	r0 = r0 << 0x1			  ## uECC_new.c:936:9
  104922:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:936:9
  104924:    40 08             	r0 = r4			  ## uECC_new.c:936:9
  104926:    bf f3 f0 fb       	call -0x820 <uECC_vli_isZero : 10410a >			  ## uECC_new.c:936:9
  10492a:    01 20             	if (r0 == 0x0) goto 0x2 <EccPoint_compute_public_key+0x4A : 10492e >			  ## uECC_new.c:936:9
  10492c:    06 70             	r6 = 0x0			  ## uECC_new.c:936:9
  10492e:    60 08             	r0 = r6			  ## uECC_new.c:940:1
  104930:    28 0a             	sp += 0x50			  ## uECC_new.c:940:1
  104932:    56 01             	{pc, r6-r4} = [sp++]			  ## uECC_new.c:940:1


uECC_vli_nativeToBytes:
  104934:    77 01             	[--sp] = {rets, r7-r4}			  ## uECC_new.c:963:0
  104936:    13 fc ff ff       	r3 = r1 + -0x1			  ## uECC_new.c:963:0
  10493a:    04 70             	r4 = 0x0			  ## uECC_new.c:963:0
  10493c:    0d 18             	goto 0x1a <uECC_vli_nativeToBytes+0x24 : 104958 >			  ## uECC_new.c:963:0
  10493e:    66 b7             	r6 = r3 - r5			  ## uECC_new.c:966:36
  104940:    37 fd 03 69       	r7 = r6 & 0xfffffffc			  ## uECC_new.c:967:29
  104944:    87 f6 00 27       	r7 = [r2+r7]			  ## uECC_new.c:967:20
  104948:    f6 c0             	r6 = r6 << 0x3			  ## uECC_new.c:967:53
  10494a:    26 fd 18 69       	r6 = r6 & 0x18			  ## uECC_new.c:967:53
  10494e:    fa fd 60 67       	r6 = r7 >> r6			  ## uECC_new.c:967:47
  104952:    16 fa 00 05       	b[r0+r5] = r6			  ## uECC_new.c:967:18
  104956:    14 80             	r4 += 0x1			  ## uECC_new.c:965:32
  104958:    15 05             	r5 = r4.b0 (s)			  ## uECC_new.c:965:17
  10495a:    15 f2 f0 bf       	ifs (r5 < r1) goto -0x20 <uECC_vli_nativeToBytes+0xA : 10493e >			  ## uECC_new.c:965:17
  10495e:    57 01             	{pc, r7-r4} = [sp++]			  ## uECC_new.c:969:1


uECC_make_key:
  104960:    7a 01             	[--sp] = {rets, r10-r4}			  ## uECC_new.c:1013:0
  104962:    d0 0b             	sp += -0x60			  ## uECC_new.c:1013:0
  104964:    24 08             	r4 = r2			  ## uECC_new.c:1013:0
  104966:    18 08             	r8 = r1			  ## uECC_new.c:1013:0
  104968:    09 08             	r9 = r0			  ## uECC_new.c:1013:0
  10496a:    47 fc 24 00       	r7 = r4 + 0x24			  ## uECC_new.c:1013:0
  10496e:    f5 07             	r5 = -0x1			  ## uECC_new.c:1013:0
  104970:    0a 72             	r10 = 0x20			  ## uECC_new.c:1013:0
  104972:    06 70             	r6 = 0x0			  ## uECC_new.c:1013:0
  104974:    15 80             	r5 += 0x1			  ## uECC_new.c:1023:27
  104976:    f5 e3 26 80       	if (r5 > 0x3f) goto 0x4c <uECC_make_key+0x66 : 1049c6 >			  ## uECC_new.c:1023:27
  10497a:    20 f7 02 40       	r0 = h[r4 + 0x2] (s)			  ## uECC_new.c:1024:59
  10497e:    f0 81             	r0 += 0x1f			  ## uECC_new.c:1024:59
  104980:    e0 fe a0 00       	r0 = r0 / r10 (s)			  ## uECC_new.c:1024:59
  104984:    12 04             	r2 = r0.b0 (s)			  ## uECC_new.c:1024:14
  104986:    00 a4             	r0 = sp + 64			  ## uECC_new.c:1024:14
  104988:    71 08             	r1 = r7			  ## uECC_new.c:1024:14
  10498a:    f8 14             	call -0x610 <uECC_generate_random_int : 10437c >			  ## uECC_new.c:1024:14
  10498c:    1c 20             	if (r0 == 0x0) goto 0x38 <uECC_make_key+0x66 : 1049c6 >			  ## uECC_new.c:1024:14
  10498e:    00 a0             	r0 = sp + 0
  104990:    01 a4             	r1 = sp + 64
  104992:    42 08             	r2 = r4			  ## uECC_new.c:1028:13
  104994:    a7 17             	call -0xb2 <EccPoint_compute_public_key : 1048e4 >			  ## uECC_new.c:1028:13
  104996:    ee 21             	if (r0 == 0x0) goto -0x24 <uECC_make_key+0x14 : 104974 >			  ## uECC_new.c:1028:13
  104998:    20 f7 02 40       	r0 = h[r4 + 0x2] (s)			  ## uECC_new.c:1030:49
  10499c:    70 80             	r0 += 0x7			  ## uECC_new.c:1030:49
  10499e:    81 70             	r1 = 0x8			  ## uECC_new.c:1030:49
  1049a0:    e0 fe 10 10       	r1 = r0 / r1 (s)			  ## uECC_new.c:1030:49
  1049a4:    02 a4             	r2 = sp + 64			  ## uECC_new.c:1030:49
  1049a6:    80 08             	r0 = r8			  ## uECC_new.c:1030:13
  1049a8:    c5 17             	call -0x76 <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1030:13
  1049aa:    21 f9 01 40       	r1 = b[r4 + 0x1] (s)			  ## uECC_new.c:1031:48
  1049ae:    02 a0             	r2 = sp + 0			  ## uECC_new.c:1031:48
  1049b0:    90 08             	r0 = r9			  ## uECC_new.c:1031:13
  1049b2:    c0 17             	call -0x80 <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1031:13
  1049b4:    21 f9 01 40       	r1 = b[r4 + 0x1] (s)			  ## uECC_new.c:1033:30
  1049b8:    23 f9 00 40       	r3 = b[r4 + 0x0] (s)			  ## uECC_new.c:1033:76
  1049bc:    10 09             	r0 += r1			  ## uECC_new.c:1033:28
  1049be:    9b c0             	r3 = r3 << 0x2			  ## uECC_new.c:1033:74
  1049c0:    32 09             	r2 += r3			  ## uECC_new.c:1033:74
  1049c2:    b8 17             	call -0x90 <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1032:13
  1049c4:    16 70             	r6 = 0x1			  ## uECC_new.c:1032:13
  1049c6:    60 08             	r0 = r6			  ## uECC_new.c:1039:1
  1049c8:    30 0a             	sp += 0x60			  ## uECC_new.c:1039:1
  1049ca:    5a 01             	{pc, r10-r4} = [sp++]			  ## uECC_new.c:1039:1


uECC_vli_bytesToNative:
  1049cc:    78 01             	[--sp] = {rets, r8-r4}			  ## uECC_new.c:973:0
  1049ce:    24 08             	r4 = r2			  ## uECC_new.c:973:0
  1049d0:    18 08             	r8 = r1			  ## uECC_new.c:973:0
  1049d2:    06 08             	r6 = r0			  ## uECC_new.c:973:0
  1049d4:    30 98             	r0 = r4 + 0x3			  ## uECC_new.c:975:39
  1049d6:    41 70             	r1 = 0x4			  ## uECC_new.c:975:63
  1049d8:    e0 fe 10 00       	r0 = r0 / r1 (s)			  ## uECC_new.c:975:63
  1049dc:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:975:5
  1049de:    60 08             	r0 = r6			  ## uECC_new.c:975:5
  1049e0:    42 15             	call -0x57c <uECC_vli_clear : 104466 >			  ## uECC_new.c:975:5
  1049e2:    40 fc ff ff       	r0 = r4 + -0x1
  1049e6:    01 70             	r1 = 0x0
  1049e8:    10 18             	goto 0x20 <uECC_vli_bytesToNative+0x3E : 104a0a >
  1049ea:    03 fa 00 82       	r3 = b[r8+r2] (u)			  ## uECC_new.c:979:13
  1049ee:    a2 b0             	r2 = r0 - r2			  ## uECC_new.c:977:36
  1049f0:    37 fd 03 29       	r7 = r2 & 0xfffffffc			  ## uECC_new.c:978:18
  1049f4:    85 f6 00 67       	r5 = [r6+r7]			  ## uECC_new.c:978:36
  1049f8:    d2 c0             	r2 = r2 << 0x3			  ## uECC_new.c:979:41
  1049fa:    22 fd 18 29       	r2 = r2 & 0x18			  ## uECC_new.c:979:41
  1049fe:    f8 fd 20 23       	r2 = r3 << r2			  ## uECC_new.c:979:35
  104a02:    52 ba             	r2 |= r5			  ## uECC_new.c:978:36
  104a04:    92 f6 00 67       	[r6+r7] = r2			  ## uECC_new.c:978:36
  104a08:    11 80             	r1 += 0x1			  ## uECC_new.c:976:32
  104a0a:    52 04             	r2 = r1.b0 (s)			  ## uECC_new.c:976:17
  104a0c:    42 f2 ed bf       	ifs (r2 < r4) goto -0x26 <uECC_vli_bytesToNative+0x1E : 1049ea >			  ## uECC_new.c:976:17
  104a10:    58 01             	{pc, r8-r4} = [sp++]			  ## uECC_new.c:981:1


uECC_shared_secret:
  104a12:    7b 01             	[--sp] = {rets, r11-r4}			  ## uECC_new.c:1044:0
  104a14:    b8 0b             	sp += -0x90			  ## uECC_new.c:1044:0
  104a16:    34 08             	r4 = r3			  ## uECC_new.c:1044:0
  104a18:    05 a3             	r5 = sp + 48			  ## uECC_new.c:1044:0
  104a1a:    2d 02             	[sp+8] = r5			  ## uECC_new.c:1049:26
  104a1c:    0b a1             	r11 = sp + 16			  ## uECC_new.c:1049:26
  104a1e:    1b f5 0c 00       	[sp+12] = r11			  ## uECC_new.c:1049:26
  104a22:    23 f7 02 40       	r3 = h[r4 + 0x2] (s)			  ## uECC_new.c:1059:51
  104a26:    28 08             	r8 = r2			  ## uECC_new.c:1059:51
  104a28:    06 08             	r6 = r0
  104a2a:    29 f9 00 40       	r9 = b[r4 + 0x0] (s)			  ## uECC_new.c:1061:38
  104a2e:    2a f9 01 40       	r10 = b[r4 + 0x1] (s)			  ## uECC_new.c:1060:49
  104a32:    70 96             	r0 = r3 + 0x7			  ## uECC_new.c:1059:51
  104a34:    82 70             	r2 = 0x8			  ## uECC_new.c:1059:51
  104a36:    e0 fe 20 20       	r2 = r0 / r2 (s)			  ## uECC_new.c:1059:51
  104a3a:    50 08             	r0 = r5			  ## uECC_new.c:1059:5
  104a3c:    c7 17             	call -0x72 <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1059:5
  104a3e:    07 a5             	r7 = sp + 80
  104a40:    70 08             	r0 = r7			  ## uECC_new.c:1060:5
  104a42:    61 08             	r1 = r6			  ## uECC_new.c:1060:5
  104a44:    a2 08             	r2 = r10			  ## uECC_new.c:1060:5
  104a46:    c2 17             	call -0x7c <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1060:5
  104a48:    80 fb a0 16       	r1 = r6 + r10			  ## uECC_new.c:1061:60
  104a4c:    f0 fd 10 09       	r0 = r9 << 0x2			  ## uECC_new.c:1061:36
  104a50:    70 09             	r0 += r7			  ## uECC_new.c:1061:36
  104a52:    a2 08             	r2 = r10			  ## uECC_new.c:1061:5
  104a54:    bb 17             	call -0x8a <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1061:5
  104a56:    50 08             	r0 = r5			  ## uECC_new.c:1066:13
  104a58:    51 08             	r1 = r5			  ## uECC_new.c:1066:13
  104a5a:    b2 08             	r2 = r11			  ## uECC_new.c:1066:13
  104a5c:    43 08             	r3 = r4			  ## uECC_new.c:1066:13
  104a5e:    df 14             	call -0x642 <regularize_k : 10441e >			  ## uECC_new.c:1066:13
  104a60:    07 08             	r7 = r0			  ## uECC_new.c:1066:13
  104a62:    80 a0             	r0 = sp + 8
  104a64:    a5 f6 00 07       	r5 = [r0+r7<<2]			  ## uECC_new.c:1071:39
  104a68:    41 98             	r1 = r4 + 0x4			  ## uECC_new.c:1071:50
  104a6a:    50 08             	r0 = r5			  ## uECC_new.c:1071:14
  104a6c:    92 08             	r2 = r9			  ## uECC_new.c:1071:14
  104a6e:    86 14             	call -0x6f4 <uECC_generate_random_int : 10437c >			  ## uECC_new.c:1071:14
  104a70:    1c 20             	if (r0 == 0x0) goto 0x38 <uECC_shared_secret+0x98 : 104aaa >			  ## uECC_new.c:1071:14
  104a72:    19 70             	r9 = 0x1
  104a74:    10 70             	r0 = 0x1			  ## uECC_new.c:1077:40
  104a76:    01 2e             	if (r7 == 0x0) goto 0x2 <uECC_shared_secret+0x68 : 104a7a >			  ## uECC_new.c:1077:40
  104a78:    00 70             	r0 = 0x0			  ## uECC_new.c:1077:40
  104a7a:    81 a0             	r1 = sp + 8
  104a7c:    a2 f6 00 10       	r2 = [r1+r0<<2]			  ## uECC_new.c:1077:37
  104a80:    10 58             	r0 = h[r4 + 0x2] (u)			  ## uECC_new.c:1077:67
  104a82:    1c 02             	[sp+4] = r4			  ## uECC_new.c:1077:5
  104a84:    10 80             	r0 += 0x1			  ## uECC_new.c:1077:78
  104a86:    30 04             	r0 = r0.l (s)			  ## uECC_new.c:1077:5
  104a88:    06 a5             	r6 = sp + 80			  ## uECC_new.c:1077:5
  104a8a:    08 02             	[sp] = r0			  ## uECC_new.c:1077:5
  104a8c:    60 08             	r0 = r6			  ## uECC_new.c:1077:5
  104a8e:    61 08             	r1 = r6			  ## uECC_new.c:1077:5
  104a90:    53 08             	r3 = r5			  ## uECC_new.c:1077:5
  104a92:    fb 15             	call -0x40a <EccPoint_mult : 10468a >			  ## uECC_new.c:1077:5
  104a94:    80 08             	r0 = r8			  ## uECC_new.c:1081:5
  104a96:    a1 08             	r1 = r10			  ## uECC_new.c:1081:5
  104a98:    62 08             	r2 = r6			  ## uECC_new.c:1081:5
  104a9a:    4c 17             	call -0x168 <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1081:5
  104a9c:    00 68             	r0 = b[r4 + 0x0] (u)			  ## uECC_new.c:1083:13
  104a9e:    40 c0             	r0 = r0 << 0x1			  ## uECC_new.c:1083:13
  104aa0:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:1083:13
  104aa2:    60 08             	r0 = r6			  ## uECC_new.c:1083:13
  104aa4:    bf f3 31 fb       	call -0x99e <uECC_vli_isZero : 10410a >			  ## uECC_new.c:1083:13
  104aa8:    01 20             	if (r0 == 0x0) goto 0x2 <uECC_shared_secret+0x9A : 104aac >			  ## uECC_new.c:1083:13
  104aaa:    09 70             	r9 = 0x0
  104aac:    90 08             	r0 = r9			  ## uECC_new.c:1084:1
  104aae:    48 0a             	sp += 0x90			  ## uECC_new.c:1084:1
  104ab0:    5b 01             	{pc, r11-r4} = [sp++]			  ## uECC_new.c:1084:1


uECC_valid_public_key:
  104ab2:    79 01             	[--sp] = {rets, r9-r4}			  ## uECC_new.c:1148:0
  104ab4:    c0 0b             	sp += -0x80			  ## uECC_new.c:1148:0
  104ab6:    14 08             	r4 = r1			  ## uECC_new.c:1148:0
  104ab8:    22 f9 01 40       	r2 = b[r4 + 0x1] (s)			  ## uECC_new.c:1156:49
  104abc:    05 08             	r5 = r0			  ## uECC_new.c:1156:49
  104abe:    06 a0             	r6 = sp + 0
  104ac0:    60 08             	r0 = r6			  ## uECC_new.c:1156:5
  104ac2:    51 08             	r1 = r5			  ## uECC_new.c:1156:5
  104ac4:    83 17             	call -0xfa <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1156:5
  104ac6:    22 f9 01 40       	r2 = b[r4 + 0x1] (s)			  ## uECC_new.c:1158:50
  104aca:    20 f9 00 40       	r0 = b[r4 + 0x0] (s)			  ## uECC_new.c:1158:19
  104ace:    81 ba             	r1 = r5 + r2			  ## uECC_new.c:1158:48
  104ad0:    80 c0             	r0 = r0 << 0x2			  ## uECC_new.c:1158:17
  104ad2:    60 09             	r0 += r6			  ## uECC_new.c:1158:17
  104ad4:    7b 17             	call -0x10a <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1157:5
  104ad6:    27 f9 00 40       	r7 = b[r4 + 0x0] (s)			  ## uECC_new.c:1131:9
  104ada:    78 c0             	r0 = r7 << 0x1			  ## uECC_new.c:1131:9
  104adc:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:1131:9
  104ade:    60 08             	r0 = r6			  ## uECC_new.c:1131:9
  104ae0:    bf f3 13 fb       	call -0x9da <uECC_vli_isZero : 10410a >			  ## uECC_new.c:1131:9
  104ae4:    05 70             	r5 = 0x0			  ## uECC_new.c:1131:9
  104ae6:    34 30             	if (r0 != 0x0) goto 0x68 <uECC_valid_public_key+0x9E : 104b50 >
  104ae8:    c8 05             	r8 = r7.b0 (u)			  ## uECC_new.c:1128:36
  104aea:    46 98             	r6 = r4 + 0x4			  ## uECC_new.c:1136:29
  104aec:    e5 fd 00 98       	r9 = r8.b0 (s)			  ## uECC_new.c:1136:9
  104af0:    01 a0             	r1 = sp + 0			  ## uECC_new.c:1136:9
  104af2:    60 08             	r0 = r6			  ## uECC_new.c:1136:9
  104af4:    92 08             	r2 = r9			  ## uECC_new.c:1136:9
  104af6:    bf f3 2b fb       	call -0x9aa <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:1136:9
  104afa:    10 e0 29 10       	if (r0 != 0x1) goto 0x52 <uECC_valid_public_key+0x9E : 104b50 >			  ## uECC_new.c:1136:9
  104afe:    b8 c0             	r0 = r7 << 0x2			  ## uECC_new.c:1137:49
  104b00:    01 a0             	r1 = sp + 0			  ## uECC_new.c:1137:49
  104b02:    01 09             	r1 += r0			  ## uECC_new.c:1137:49
  104b04:    60 08             	r0 = r6			  ## uECC_new.c:1137:13
  104b06:    92 08             	r2 = r9			  ## uECC_new.c:1137:13
  104b08:    bf f3 22 fb       	call -0x9bc <uECC_vli_cmp_unsafe : 104150 >			  ## uECC_new.c:1137:13
  104b0c:    10 e0 20 10       	if (r0 != 0x1) goto 0x40 <uECC_valid_public_key+0x9E : 104b50 >			  ## uECC_new.c:1137:13
  104b10:    05 a6             	r5 = sp + 96
  104b12:    50 08             	r0 = r5			  ## uECC_new.c:1141:5
  104b14:    42 08             	r2 = r4			  ## uECC_new.c:1141:5
  104b16:    1a 14             	call -0x7cc <uECC_vli_modSquare_fast : 10434c >			  ## uECC_new.c:1141:5
  104b18:    03 f6 a8 40       	r3 = [r4 + 0xa8]			  ## uECC_new.c:1142:12
  104b1c:    06 a4             	r6 = sp + 64			  ## uECC_new.c:1142:12
  104b1e:    01 a0             	r1 = sp + 0
  104b20:    60 08             	r0 = r6			  ## uECC_new.c:1142:5
  104b22:    42 08             	r2 = r4			  ## uECC_new.c:1142:5
  104b24:    83 00             	call r3			  ## uECC_new.c:1142:5
  104b26:    80 fc ff ff       	r0 = r8 + -0x1			  ## uECC_new.c:299:10
  104b2a:    11 04             	r1 = r0.b0 (s)			  ## uECC_new.c:299:10
  104b2c:    89 c0             	r1 = r1 << 0x2			  ## uECC_new.c:299:10
  104b2e:    42 ba             	r2 = r5 + r1			  ## uECC_new.c:299:10
  104b30:    43 bc             	r3 = r6 + r1			  ## uECC_new.c:299:10
  104b32:    01 70             	r1 = 0x0			  ## uECC_new.c:299:10
  104b34:    07 18             	goto 0xe <uECC_valid_public_key+0x92 : 104b44 >			  ## uECC_new.c:299:10
  104b36:    44 f6 fc 2f       	r4 = [r2 ++= -0x4]			  ## uECC_new.c:300:18
  104b3a:    45 f6 fc 3f       	r5 = [r3 ++= -0x4]			  ## uECC_new.c:300:28
  104b3e:    d4 ba             	r4 ^= r5			  ## uECC_new.c:300:26
  104b40:    51 b8             	r1 |= r4			  ## uECC_new.c:300:14
  104b42:    f0 8f             	r0 += -0x1			  ## uECC_new.c:299:5
  104b44:    14 04             	r4 = r0.b0 (s)			  ## uECC_new.c:299:31
  104b46:    04 e0 f6 af       	ifs (r4 >= 0x0) goto -0x14 <uECC_valid_public_key+0x84 : 104b36 >
  104b4a:    15 70             	r5 = 0x1			  ## uECC_new.c:302:18
  104b4c:    01 22             	if (r1 == 0x0) goto 0x2 <uECC_valid_public_key+0x9E : 104b50 >
  104b4e:    05 70             	r5 = 0x0			  ## uECC_new.c:302:18
  104b50:    50 08             	r0 = r5			  ## uECC_new.c:1160:5
  104b52:    40 0a             	sp += 0x80			  ## uECC_new.c:1160:5
  104b54:    59 01             	{pc, r9-r4} = [sp++]			  ## uECC_new.c:1160:5


uECC_compute_public_key:
  104b56:    77 01             	[--sp] = {rets, r7-r4}			  ## uECC_new.c:1163:0
  104b58:    d0 0b             	sp += -0x60			  ## uECC_new.c:1163:0
  104b5a:    24 08             	r4 = r2			  ## uECC_new.c:1163:0
  104b5c:    22 f7 02 40       	r2 = h[r4 + 0x2] (s)			  ## uECC_new.c:1173:51
  104b60:    15 08             	r5 = r1			  ## uECC_new.c:1173:51
  104b62:    01 08             	r1 = r0
  104b64:    70 94             	r0 = r2 + 0x7			  ## uECC_new.c:1173:51
  104b66:    82 70             	r2 = 0x8			  ## uECC_new.c:1173:51
  104b68:    e0 fe 20 20       	r2 = r0 / r2 (s)			  ## uECC_new.c:1173:51
  104b6c:    06 a4             	r6 = sp + 64			  ## uECC_new.c:1173:51
  104b6e:    60 08             	r0 = r6			  ## uECC_new.c:1173:5
  104b70:    2d 17             	call -0x1a6 <uECC_vli_bytesToNative : 1049cc >			  ## uECC_new.c:1173:5
  104b72:    20 f7 02 40       	r0 = h[r4 + 0x2] (s)			  ## uECC_new.c:1177:35
  104b76:    f0 81             	r0 += 0x1f			  ## uECC_new.c:1177:35
  104b78:    01 72             	r1 = 0x20			  ## uECC_new.c:1177:35
  104b7a:    e0 fe 10 00       	r0 = r0 / r1 (s)			  ## uECC_new.c:1177:35
  104b7e:    17 04             	r7 = r0.b0 (s)			  ## uECC_new.c:1177:9
  104b80:    60 08             	r0 = r6			  ## uECC_new.c:1177:9
  104b82:    71 08             	r1 = r7			  ## uECC_new.c:1177:9
  104b84:    bf f3 c1 fa       	call -0xa7e <uECC_vli_isZero : 10410a >			  ## uECC_new.c:1177:9
  104b88:    06 70             	r6 = 0x0			  ## uECC_new.c:1177:9
  104b8a:    1b 30             	if (r0 != 0x0) goto 0x36 <uECC_compute_public_key+0x6C : 104bc2 >
  104b8c:    40 fc 24 00       	r0 = r4 + 0x24			  ## uECC_new.c:1181:22
  104b90:    01 a4             	r1 = sp + 64			  ## uECC_new.c:1181:22
  104b92:    72 08             	r2 = r7			  ## uECC_new.c:1181:9
  104b94:    bf f3 dd fb       	call -0x846 <uECC_vli_cmp : 104352 >			  ## uECC_new.c:1181:9
  104b98:    10 e0 13 10       	if (r0 != 0x1) goto 0x26 <uECC_compute_public_key+0x6C : 104bc2 >			  ## uECC_new.c:1181:9
  104b9c:    00 a0             	r0 = sp + 0
  104b9e:    01 a4             	r1 = sp + 64
  104ba0:    42 08             	r2 = r4			  ## uECC_new.c:1186:10
  104ba2:    a0 16             	call -0x2c0 <EccPoint_compute_public_key : 1048e4 >			  ## uECC_new.c:1186:10
  104ba4:    0e 20             	if (r0 == 0x0) goto 0x1c <uECC_compute_public_key+0x6C : 104bc2 >			  ## uECC_new.c:1186:10
  104ba6:    21 f9 01 40       	r1 = b[r4 + 0x1] (s)			  ## uECC_new.c:1191:40
  104baa:    02 a0             	r2 = sp + 0			  ## uECC_new.c:1191:40
  104bac:    50 08             	r0 = r5			  ## uECC_new.c:1191:5
  104bae:    c2 16             	call -0x27c <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1191:5
  104bb0:    21 f9 01 40       	r1 = b[r4 + 0x1] (s)			  ## uECC_new.c:1193:22
  104bb4:    23 f9 00 40       	r3 = b[r4 + 0x0] (s)			  ## uECC_new.c:1193:68
  104bb8:    40 ba             	r0 = r5 + r1			  ## uECC_new.c:1193:20
  104bba:    9b c0             	r3 = r3 << 0x2			  ## uECC_new.c:1193:66
  104bbc:    32 09             	r2 += r3			  ## uECC_new.c:1193:66
  104bbe:    ba 16             	call -0x28c <uECC_vli_nativeToBytes : 104934 >			  ## uECC_new.c:1192:5
  104bc0:    16 70             	r6 = 0x1			  ## uECC_new.c:1192:5
  104bc2:    60 08             	r0 = r6			  ## uECC_new.c:1196:1
  104bc4:    30 0a             	sp += 0x60			  ## uECC_new.c:1196:1
  104bc6:    57 01             	{pc, r7-r4} = [sp++]			  ## uECC_new.c:1196:1


find_max_exp_index:
  104bc8:    30 04             	r0 = r0.l (s)			  ## bigint.c:1397:0
  104bca:    82 c0             	r2 = r0 << 0x2			  ## bigint.c:1400:42
  104bcc:    21 09             	r1 += r2			  ## bigint.c:1400:42
  104bce:    02 f6 fc 1f       	r2 = [r1 + -0x4]			  ## bigint.c:1400:17
  104bd2:    20 fb 80 3c       	r3 = 0x80000000
  104bd6:    01 70             	r1 = 0x0
  104bd8:    23 f1 06 00       	if ((r3 & r2) != 0) goto 0xc <find_max_exp_index+0x20 : 104be8 >
  104bdc:    11 80             	r1 += 0x1			  ## bigint.c:1410:18
  104bde:    5b d0             	r3 = r3 >> 0x1			  ## bigint.c:1409:15
  104be0:    01 e2 fa 1f       	if (r1 != 0x20) goto -0xc <find_max_exp_index+0x10 : 104bd8 >
  104be4:    f0 07             	r0 = -0x1
  104be6:    20 00             	rts			  ## bigint.c:1413:1
  104be8:    40 c1             	r0 = r0 << 0x5			  ## bigint.c:1406:42
  104bea:    f0 8f             	r0 += -0x1			  ## bigint.c:1406:13
  104bec:    60 b0             	r0 = r0 - r1			  ## bigint.c:1406:13
  104bee:    20 00             	rts			  ## bigint.c:1413:1


trim:
  104bf0:    21 50             	r1 = h[r0 + 0x4] (u)			  ## bigint.c:1458:0
  104bf2:    32 40             	r2 = [r0 + 0xc]			  ## bigint.c:1458:0
  104bf4:    07 18             	goto 0xe <trim+0x14 : 104c04 >			  ## bigint.c:1458:0
  104bf6:    9b c0             	r3 = r3 << 0x2			  ## bigint.c:1461:32
  104bf8:    23 09             	r3 += r2			  ## bigint.c:1461:13
  104bfa:    03 f6 fc 3f       	r3 = [r3 + -0x4]			  ## bigint.c:1461:13
  104bfe:    05 36             	if (r3 != 0x0) goto 0xa <trim+0x1A : 104c0a >			  ## bigint.c:1461:13
  104c00:    f1 8f             	r1 += -0x1			  ## bigint.c:1462:17
  104c02:    29 50             	h[r0 + 0x4] = r1			  ## bigint.c:1462:17
  104c04:    73 04             	r3 = r1.l (s)			  ## bigint.c:1461:23
  104c06:    23 e0 f6 af       	ifs (r3 >= 0x2) goto -0x14 <trim+0x6 : 104bf6 >			  ## bigint.c:1461:23
  104c0a:    20 00             	rts			  ## bigint.c:1465:5


more_comps:
  104c0c:    75 01             	[--sp] = {rets, r5, r4}			  ## bigint.c:1336:0
  104c0e:    04 08             	r4 = r0			  ## bigint.c:1336:0
  104c10:    22 f7 04 40       	r2 = h[r4 + 0x4] (s)			  ## bigint.c:1342:13
  104c14:    15 08             	r5 = r1			  ## bigint.c:1342:13
  104c16:    52 f2 08 a0       	ifs (r2 >= r5) goto 0x10 <more_comps+0x1E : 104c2a >
  104c1a:    30 48             	r0 = [r4 + 0xc]			  ## bigint.c:1343:21
  104c1c:    91 c0             	r1 = r2 << 0x2			  ## bigint.c:1343:17
  104c1e:    10 09             	r0 += r1			  ## bigint.c:1343:17
  104c20:    a1 ba             	r1 = r5 - r2			  ## bigint.c:1343:44
  104c22:    8a c0             	r2 = r1 << 0x2			  ## bigint.c:1343:55
  104c24:    01 70             	r1 = 0x0			  ## bigint.c:1343:9
  104c26:    bf f3 a2 da       	call -0x4abc <memset : 10016e >			  ## bigint.c:1343:9
  104c2a:    2d 58             	h[r4 + 0x4] = r5			  ## bigint.c:1346:14
  104c2c:    55 01             	{pc, r5, r4} = [sp++]			  ## bigint.c:1347:1


bi_lshift:
  104c2e:    7a 01             	[--sp] = {rets, r10-r4}			  ## bigint.c:205:0
  104c30:    09 08             	r9 = r0			  ## bigint.c:205:0
  104c32:    11 e0 55 b0       	ifs (r1 < 0x1) goto 0xaa <bi_lshift+0xB2 : 104ce0 >			  ## bigint.c:205:0
  104c36:    22 f7 04 00       	r2 = h[r0 + 0x4] (s)			  ## bigint.c:207:25
  104c3a:    30 40             	r0 = [r0 + 0xc]			  ## bigint.c:207:19
  104c3c:    93 c0             	r3 = r2 << 0x2			  ## bigint.c:207:33
  104c3e:    30 09             	r0 += r3			  ## bigint.c:207:19
  104c40:    03 f6 fc 0f       	r3 = [r0 + -0x4]			  ## bigint.c:207:16
  104c44:    a0 04             	r0 = r2.l (u)			  ## bigint.c:207:28
  104c46:    d5 b3             	r5 = ~r1			  ## bigint.c:209:9
  104c48:    f5 ed 02 c0       	ifs (r5 > -0x21) goto 0x4 <bi_lshift+0x22 : 104c50 >			  ## bigint.c:209:9
  104c4c:    05 fb df ff       	r5 = -0x21 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF8FE2 : ffffffffffffffde >			  ## bigint.c:209:9
  104c50:    15 09             	r5 += r1			  ## bigint.c:209:9
  104c52:    05 82             	r5 += 0x20			  ## bigint.c:209:9
  104c54:    f2 fd 28 85       	r8 = r5 >> 0x5			  ## bigint.c:209:9
  104c58:    f0 fd 28 68       	r6 = r8 << 0x5			  ## bigint.c:209:9
  104c5c:    aa b3             	r10 = r1 - r6			  ## bigint.c:209:9
  104c5e:    01 70             	r1 = 0x0			  ## bigint.c:209:9
  104c60:    20 fb 80 6c       	r6 = 0x80000000			  ## bigint.c:209:9
  104c64:    04 18             	goto 0x8 <bi_lshift+0x40 : 104c6e >			  ## bigint.c:209:9
  104c66:    36 f1 05 00       	if ((r6 & r3) != 0) goto 0xa <bi_lshift+0x46 : 104c74 >
  104c6a:    11 80             	r1 += 0x1			  ## bigint.c:220:29
  104c6c:    76 d0             	r6 = r6 >> 0x1			  ## bigint.c:226:14
  104c6e:    a1 f2 fa bf       	ifs (r1 < r10) goto -0xc <bi_lshift+0x38 : 104c66 >
  104c72:    05 18             	goto 0xa <bi_lshift+0x50 : 104c7e >
  104c74:    11 94             	r1 = r2 + 0x1			  ## bigint.c:223:35
  104c76:    90 08             	r0 = r9			  ## bigint.c:223:13
  104c78:    c9 17             	call -0x6e <more_comps : 104c0c >			  ## bigint.c:223:13
  104c7a:    00 f7 04 90       	r0 = h[r9 + 0x4] (u)
  104c7e:    36 04             	r6 = r0.l (s)
  104c80:    60 fb 20 a9       	r0 = 0x20 - r10			  ## bigint.c:228:26
  104c84:    01 70             	r1 = 0x0
  104c86:    03 70             	r3 = 0x0
  104c88:    02 70             	r2 = 0x0
  104c8a:    0d 18             	goto 0x1a <bi_lshift+0x78 : 104ca6 >
  104c8c:    05 f6 0c 90       	r5 = [r9 + 0xc]			  ## bigint.c:231:18
  104c90:    84 f6 00 51       	r4 = [r5+r1]			  ## bigint.c:231:15
  104c94:    f8 fd a0 74       	r7 = r4 << r10			  ## bigint.c:232:21
  104c98:    53 be             	r3 |= r7			  ## bigint.c:233:21
  104c9a:    93 f6 00 51       	[r5+r1] = r3			  ## bigint.c:233:21
  104c9e:    fa fd 00 34       	r3 = r4 >> r0			  ## bigint.c:231:27
  104ca2:    41 80             	r1 += 0x4			  ## bigint.c:230:5
  104ca4:    12 80             	r2 += 0x1			  ## bigint.c:230:31
  104ca6:    62 f2 f1 bf       	ifs (r2 < r6) goto -0x1e <bi_lshift+0x5E : 104c8c >
  104caa:    08 e0 19 00       	if (r8 == 0x0) goto 0x32 <bi_lshift+0xB2 : 104ce0 >
  104cae:    64 fc ff ff       	r4 = r6 + -0x1			  ## bigint.c:840:23
  104cb2:    80 fb 80 16       	r1 = r6 + r8			  ## bigint.c:849:31
  104cb6:    90 08             	r0 = r9			  ## bigint.c:849:5
  104cb8:    a9 17             	call -0xae <more_comps : 104c0c >			  ## bigint.c:849:5
  104cba:    00 f6 0c 90       	r0 = [r9 + 0xc]			  ## bigint.c:851:15
  104cbe:    a1 c0             	r1 = r4 << 0x2			  ## bigint.c:852:10
  104cc0:    01 09             	r1 += r0			  ## bigint.c:852:10
  104cc2:    80 fb 80 24       	r2 = r4 + r8			  ## bigint.c:851:23
  104cc6:    92 c0             	r2 = r2 << 0x2			  ## bigint.c:851:10
  104cc8:    02 09             	r2 += r0			  ## bigint.c:851:10
  104cca:    43 f6 fc 1f       	r3 = [r1 ++= -0x4]			  ## bigint.c:855:16
  104cce:    0b 44             	[r2 + 0x0] = r3			  ## bigint.c:855:14
  104cd0:    c2 8f             	r2 += -0x4			  ## bigint.c:855:11
  104cd2:    56 f3 fa ff       	if (--r6 != 0) goto -0xc <bi_lshift+0x9C : 104cca >			  ## bigint.c:856:5
  104cd6:    f0 fd 10 28       	r2 = r8 << 0x2			  ## bigint.c:858:38
  104cda:    01 70             	r1 = 0x0			  ## bigint.c:858:5
  104cdc:    bf f3 47 da       	call -0x4b72 <memset : 10016e >			  ## bigint.c:858:5
  104ce0:    5a 01             	{pc, r10-r4} = [sp++]			  ## bigint.c:237:1


bi_rshift:
  104ce2:    79 01             	[--sp] = {rets, r9-r4}			  ## bigint.c:175:0
  104ce4:    11 e0 1d b0       	ifs (r1 < 0x1) goto 0x3a <bi_rshift+0x40 : 104d22 >			  ## bigint.c:175:0
  104ce8:    d2 b3             	r2 = ~r1			  ## bigint.c:180:9
  104cea:    f2 ed 02 c0       	ifs (r2 > -0x21) goto 0x4 <bi_rshift+0x10 : 104cf2 >			  ## bigint.c:180:9
  104cee:    02 fb df ff       	r2 = -0x21 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF8FE2 : ffffffffffffffde >			  ## bigint.c:180:9
  104cf2:    43 b4             	r3 = r2 + r1			  ## bigint.c:180:9
  104cf4:    22 f7 04 00       	r2 = h[r0 + 0x4] (s)			  ## bigint.c:815:13
  104cf8:    03 82             	r3 += 0x20			  ## bigint.c:180:9
  104cfa:    36 40             	r6 = [r0 + 0xc]			  ## bigint.c:816:20
  104cfc:    5c d1             	r4 = r3 >> 0x5			  ## bigint.c:180:9
  104cfe:    25 b5             	r5 = r2 - r4			  ## bigint.c:815:23
  104d00:    f0 fd 28 94       	r9 = r4 << 0x5			  ## bigint.c:180:9
  104d04:    15 e0 0f b0       	ifs (r5 < 0x1) goto 0x1e <bi_rshift+0x44 : 104d26 >			  ## bigint.c:821:9
  104d08:    a8 04             	r8 = r2.l (u)			  ## bigint.c:815:18
  104d0a:    a7 c0             	r7 = r4 << 0x2			  ## bigint.c:817:11
  104d0c:    62 08             	r2 = r6			  ## bigint.c:817:11
  104d0e:    83 f6 00 72       	r3 = [r7+r2]			  ## bigint.c:828:16
  104d12:    f5 8f             	r5 += -0x1			  ## bigint.c:829:14
  104d14:    53 f6 04 20       	[r2 ++= 0x4] = r3			  ## bigint.c:828:14
  104d18:    05 e0 f9 cf       	ifs (r5 > 0x0) goto -0xe <bi_rshift+0x2C : 104d0e >			  ## bigint.c:829:5
  104d1c:    90 fb 40 48       	r4 = r8 - r4			  ## bigint.c:831:15
  104d20:    05 18             	goto 0xa <bi_rshift+0x4A : 104d2c >
  104d22:    00 70             	r0 = 0x0
  104d24:    59 01             	{pc, r9-r4} = [sp++]			  ## bigint.c:203:1
  104d26:    c0 f4 00 69       	[r6 + 0x0] = 0x0			  ## bigint.c:822:23
  104d2a:    14 70             	r4 = 0x1			  ## bigint.c:822:23
  104d2c:    90 fb 90 11       	r1 = r1 - r9			  ## bigint.c:180:9
  104d30:    2c 50             	h[r0 + 0x4] = r4			  ## bigint.c:823:19
  104d32:    03 70             	r3 = 0x0
  104d34:    02 70             	r2 = 0x0
  104d36:    05 18             	goto 0xa <bi_rshift+0x60 : 104d42 >
  104d38:    15 70             	r5 = 0x1			  ## bigint.c:194:14
  104d3a:    df fd 08 53       	r5 <= insert(r3, p:0x1, l:0x1f)			  ## bigint.c:194:14
  104d3e:    12 80             	r2 += 0x1			  ## bigint.c:192:29
  104d40:    53 08             	r3 = r5
  104d42:    12 f2 f9 bf       	ifs (r2 < r1) goto -0xe <bi_rshift+0x56 : 104d38 >			  ## bigint.c:192:5
  104d46:    38 05             	r8 = r4.l (s)			  ## bigint.c:191:25
  104d48:    f0 fd 10 28       	r2 = r8 << 0x2			  ## bigint.c:191:25
  104d4c:    62 09             	r2 += r6
  104d4e:    c2 8f             	r2 += -0x4
  104d50:    69 fb 20 19       	r9 = 0x20 - r1
  104d54:    07 70             	r7 = 0x0
  104d56:    06 70             	r6 = 0x0
  104d58:    0b 18             	goto 0x16 <bi_rshift+0x8E : 104d70 >
  104d5a:    04 44             	r4 = [r2 + 0x0]			  ## bigint.c:197:15
  104d5c:    f8 fd 90 77       	r7 = r7 << r9			  ## bigint.c:199:28
  104d60:    fa fd 10 54       	r5 = r4 >> r1			  ## bigint.c:198:17
  104d64:    55 be             	r5 |= r7			  ## bigint.c:199:19
  104d66:    55 f6 fc 2f       	[r2 ++= -0x4] = r5			  ## bigint.c:199:19
  104d6a:    e2 fd 30 74       	r7 = r4 & r3			  ## bigint.c:197:23
  104d6e:    16 80             	r6 += 0x1			  ## bigint.c:196:31
  104d70:    86 f2 f3 bf       	ifs (r6 < r8) goto -0x1a <bi_rshift+0x78 : 104d5a >
  104d74:    19 01             	{rets, r9-r4} = [sp++]			  ## bigint.c:202:12
  104d76:    3c 1f             	goto -0x188 <trim : 104bf0 >			  ## bigint.c:202:12


bi_xor:
  104d78:    76 01             	[--sp] = {rets, r6-r4}			  ## bigint.c:114:0
  104d7a:    15 08             	r5 = r1			  ## bigint.c:114:0
  104d7c:    04 08             	r4 = r0			  ## bigint.c:114:0
  104d7e:    20 f7 04 50       	r0 = h[r5 + 0x4] (s)			  ## bigint.c:115:30
  104d82:    21 f7 04 40       	r1 = h[r4 + 0x4] (s)			  ## bigint.c:115:18
  104d86:    42 08             	r2 = r4			  ## bigint.c:115:13
  104d88:    01 f2 01 c0       	ifs (r1 > r0) goto 0x2 <bi_xor+0x16 : 104d8e >			  ## bigint.c:115:13
  104d8c:    52 08             	r2 = r5			  ## bigint.c:115:13
  104d8e:    26 f7 04 20       	r6 = h[r2 + 0x4] (s)
  104d92:    01 f2 02 d0       	ifs (r1 <= r0) goto 0x4 <bi_xor+0x22 : 104d9a >			  ## bigint.c:116:9
  104d96:    50 08             	r0 = r5			  ## bigint.c:117:9
  104d98:    01 18             	goto 0x2 <bi_xor+0x24 : 104d9c >			  ## bigint.c:117:9
  104d9a:    40 08             	r0 = r4			  ## bigint.c:119:9
  104d9c:    61 08             	r1 = r6
  104d9e:    36 17             	call -0x194 <more_comps : 104c0c >
  104da0:    b0 c0             	r0 = r6 << 0x2			  ## bigint.c:115:9
  104da2:    c0 8f             	r0 += -0x4			  ## bigint.c:115:9
  104da4:    0b 18             	goto 0x16 <bi_xor+0x44 : 104dbc >			  ## bigint.c:115:9
  104da6:    31 4a             	r1 = [r5 + 0xc]			  ## bigint.c:122:35
  104da8:    32 48             	r2 = [r4 + 0xc]			  ## bigint.c:122:14
  104daa:    81 f6 00 10       	r1 = [r1+r0]			  ## bigint.c:122:30
  104dae:    83 f6 00 20       	r3 = [r2+r0]			  ## bigint.c:122:27
  104db2:    d1 b6             	r1 ^= r3			  ## bigint.c:122:27
  104db4:    91 f6 00 20       	[r2+r0] = r1			  ## bigint.c:122:27
  104db8:    c0 8f             	r0 += -0x4			  ## bigint.c:121:5
  104dba:    f6 8f             	r6 += -0x1			  ## bigint.c:122:43
  104dbc:    f4 3d             	if (r6 != 0x0) goto -0x18 <bi_xor+0x2E : 104da6 >
  104dbe:    40 08             	r0 = r4			  ## bigint.c:125:5
  104dc0:    56 01             	{pc, r6-r4} = [sp++]			  ## bigint.c:125:5


bi_free:
  104dc2:    15 22             	if (r1 == 0x0) goto 0x2a <bi_free+0x2C : 104dee >			  ## bigint.c:489:0
  104dc4:    32 42             	r2 = [r1 + 0xc]			  ## bigint.c:492:27
  104dc6:    13 24             	if (r2 == 0x0) goto 0x26 <bi_free+0x2C : 104dee >			  ## bigint.c:492:27
  104dc8:    22 42             	r2 = [r1 + 0x8]			  ## bigint.c:495:13
  104dca:    c3 ff aa 55 ff 7f 	r3 = 0x7fff55aa <__stub_uECC_vli_cmp_unsafe+0x7FEEE5AE : 7fff55aa >			  ## bigint.c:495:18
  104dd0:    32 f2 0d 00       	if (r2 == r3) goto 0x1a <bi_free+0x2C : 104dee >			  ## bigint.c:495:18
  104dd4:    f2 8f             	r2 += -0x1			  ## bigint.c:499:9
  104dd6:    2a 42             	[r1 + 0x8] = r2			  ## bigint.c:499:9
  104dd8:    02 e0 09 c0       	ifs (r2 > 0x0) goto 0x12 <bi_free+0x2C : 104dee >			  ## bigint.c:499:9
  104ddc:    12 40             	r2 = [r0 + 0x4]			  ## bigint.c:505:21
  104dde:    0a 42             	[r1 + 0x0] = r2			  ## bigint.c:505:14
  104de0:    19 40             	[r0 + 0x4] = r1			  ## bigint.c:506:20
  104de2:    c1 40             	r1 = [r0 + 0x30]			  ## bigint.c:507:20
  104de4:    11 80             	r1 += 0x1			  ## bigint.c:507:20
  104de6:    c9 40             	[r0 + 0x30] = r1			  ## bigint.c:507:20
  104de8:    b1 40             	r1 = [r0 + 0x2c]			  ## bigint.c:509:9
  104dea:    f1 8f             	r1 += -0x1			  ## bigint.c:509:9
  104dec:    b9 40             	[r0 + 0x2c] = r1			  ## bigint.c:509:9
  104dee:    20 00             	rts			  ## bigint.c:518:1


bi_poly_mod2:
  104df0:    78 01             	[--sp] = {rets, r8-r4}			  ## bigint.c:55:0
  104df2:    24 08             	r4 = r2			  ## bigint.c:55:0
  104df4:    32 48             	r2 = [r4 + 0xc]			  ## bigint.c:55:0
  104df6:    23 58             	r3 = h[r4 + 0x4] (u)			  ## bigint.c:56:18
  104df8:    15 08             	r5 = r1			  ## bigint.c:56:18
  104dfa:    08 08             	r8 = r0
  104dfc:    30 08             	r0 = r3			  ## bigint.c:56:18
  104dfe:    21 08             	r1 = r2			  ## bigint.c:56:18
  104e00:    e3 16             	call -0x23a <find_max_exp_index : 104bc8 >			  ## bigint.c:56:18
  104e02:    07 08             	r7 = r0			  ## bigint.c:56:18
  104e04:    1b 18             	goto 0x36 <bi_poly_mod2+0x4C : 104e3c >
  104e06:    50 08             	r0 = r5			  ## bigint.c:101:5
  104e08:    f3 16             	call -0x21a <trim : 104bf0 >			  ## bigint.c:101:5
  104e0a:    40 08             	r0 = r4			  ## bigint.c:102:5
  104e0c:    f1 16             	call -0x21e <trim : 104bf0 >			  ## bigint.c:102:5
  104e0e:    31 4a             	r1 = [r5 + 0xc]			  ## bigint.c:102:5
  104e10:    20 5a             	r0 = h[r5 + 0x4] (u)			  ## bigint.c:103:10
  104e12:    da 16             	call -0x24c <find_max_exp_index : 104bc8 >			  ## bigint.c:103:10
  104e14:    31 48             	r1 = [r4 + 0xc]			  ## bigint.c:103:10
  104e16:    22 58             	r2 = h[r4 + 0x4] (u)			  ## bigint.c:104:10
  104e18:    06 08             	r6 = r0			  ## bigint.c:103:10
  104e1a:    20 08             	r0 = r2			  ## bigint.c:104:10
  104e1c:    d5 16             	call -0x256 <find_max_exp_index : 104bc8 >			  ## bigint.c:104:10
  104e1e:    21 bc             	r1 = r6 - r0			  ## bigint.c:105:13
  104e20:    11 e0 03 b0       	ifs (r1 < 0x1) goto 0x6 <bi_poly_mod2+0x3A : 104e2a >			  ## bigint.c:106:9
  104e24:    40 08             	r0 = r4			  ## bigint.c:107:9
  104e26:    03 17             	call -0x1fa <bi_lshift : 104c2e >			  ## bigint.c:107:9
  104e28:    04 18             	goto 0x8 <bi_poly_mod2+0x42 : 104e32 >
  104e2a:    61 fb 00 19       	r1 = 0x0 - r1			  ## bigint.c:109:30
  104e2e:    40 08             	r0 = r4			  ## bigint.c:109:15
  104e30:    58 17             	call -0x150 <bi_rshift : 104ce2 >			  ## bigint.c:109:15
  104e32:    50 08             	r0 = r5			  ## bigint.c:59:15
  104e34:    41 08             	r1 = r4			  ## bigint.c:59:15
  104e36:    a0 17             	call -0xc0 <bi_xor : 104d78 >			  ## bigint.c:59:15
  104e38:    50 08             	r0 = r5			  ## bigint.c:60:9
  104e3a:    da 16             	call -0x24c <trim : 104bf0 >			  ## bigint.c:60:9
  104e3c:    31 4a             	r1 = [r5 + 0xc]
  104e3e:    20 5a             	r0 = h[r5 + 0x4] (u)			  ## bigint.c:57:12
  104e40:    c3 16             	call -0x27a <find_max_exp_index : 104bc8 >			  ## bigint.c:57:12
  104e42:    70 f2 e0 af       	ifs (r0 >= r7) goto -0x40 <bi_poly_mod2+0x16 : 104e06 >			  ## bigint.c:57:12
  104e46:    80 08             	r0 = r8			  ## bigint.c:62:5
  104e48:    41 08             	r1 = r4			  ## bigint.c:62:5
  104e4a:    bb 17             	call -0x8a <bi_free : 104dc2 >			  ## bigint.c:62:5
  104e4c:    50 08             	r0 = r5			  ## bigint.c:63:5
  104e4e:    58 01             	{pc, r8-r4} = [sp++]			  ## bigint.c:63:5


alloc:
  104e50:    76 01             	[--sp] = {rets, r6-r4}			  ## bigint.c:1354:0
  104e52:    04 08             	r4 = r0			  ## bigint.c:1354:0
  104e54:    15 48             	r5 = [r4 + 0x4]			  ## bigint.c:1358:14
  104e56:    16 08             	r6 = r1
  104e58:    08 2a             	if (r5 == 0x0) goto 0x10 <alloc+0x1A : 104e6a >			  ## bigint.c:1358:9
  104e5a:    00 4a             	r0 = [r5 + 0x0]			  ## bigint.c:1360:31
  104e5c:    18 48             	[r4 + 0x4] = r0			  ## bigint.c:1360:24
  104e5e:    c0 48             	r0 = [r4 + 0x30]			  ## bigint.c:1361:24
  104e60:    f0 8f             	r0 += -0x1			  ## bigint.c:1361:24
  104e62:    c8 48             	[r4 + 0x30] = r0			  ## bigint.c:1361:24
  104e64:    50 08             	r0 = r5			  ## bigint.c:1370:9
  104e66:    d2 16             	call -0x25c <more_comps : 104c0c >			  ## bigint.c:1370:9
  104e68:    0b 18             	goto 0x16 <alloc+0x30 : 104e80 >			  ## bigint.c:1370:9
  104e6a:    f5 48             	r5 = [r4 + 0x3c]			  ## bigint.c:1373:30
  104e6c:    00 9b             	r0 = r5 + 0x10			  ## bigint.c:1374:23
  104e6e:    38 4a             	[r5 + 0xc] = r0			  ## bigint.c:1375:20
  104e70:    50 fc 48 00       	r0 = r5 + 0x48			  ## bigint.c:1376:23
  104e74:    f8 48             	[r4 + 0x3c] = r0			  ## bigint.c:1376:23
  104e76:    e0 70             	r0 = 0xe			  ## bigint.c:1377:24
  104e78:    38 5a             	h[r5 + 0x6] = r0			  ## bigint.c:1377:24
  104e7a:    00 49             	r0 = [r4 + 0x40]			  ## bigint.c:1378:23
  104e7c:    80 84             	r0 += 0x48			  ## bigint.c:1378:23
  104e7e:    08 49             	[r4 + 0x40] = r0			  ## bigint.c:1378:23
  104e80:    2e 5a             	h[r5 + 0x4] = r6			  ## bigint.c:1382:15
  104e82:    c2 f4 01 59       	[r5 + 0x8] = 0x1			  ## bigint.c:1383:15
  104e86:    c0 f4 00 59       	[r5 + 0x0] = 0x0			  ## bigint.c:1384:15
  104e8a:    b0 48             	r0 = [r4 + 0x2c]			  ## bigint.c:1385:22
  104e8c:    10 80             	r0 += 0x1			  ## bigint.c:1385:22
  104e8e:    b8 48             	[r4 + 0x2c] = r0			  ## bigint.c:1385:22
  104e90:    50 08             	r0 = r5			  ## bigint.c:1389:5
  104e92:    56 01             	{pc, r6-r4} = [sp++]			  ## bigint.c:1389:5


bi_poly_mul:
  104e94:    7b 01             	[--sp] = {rets, r11-r4}			  ## bigint.c:66:0
  104e96:    25 08             	r5 = r2			  ## bigint.c:66:0
  104e98:    32 4a             	r2 = [r5 + 0xc]			  ## bigint.c:66:0
  104e9a:    23 5a             	r3 = h[r5 + 0x4] (u)			  ## bigint.c:67:18
  104e9c:    19 08             	r9 = r1			  ## bigint.c:67:18
  104e9e:    08 08             	r8 = r0
  104ea0:    30 08             	r0 = r3			  ## bigint.c:67:18
  104ea2:    21 08             	r1 = r2			  ## bigint.c:67:18
  104ea4:    91 16             	call -0x2de <find_max_exp_index : 104bc8 >			  ## bigint.c:67:18
  104ea6:    0a 08             	r10 = r0			  ## bigint.c:67:18
  104ea8:    07 70             	r7 = 0x0			  ## bigint.c:67:18
  104eaa:    06 70             	r6 = 0x0
  104eac:    04 70             	r4 = 0x0
  104eae:    0b 70             	r11 = 0x0
  104eb0:    23 18             	goto 0x46 <bi_poly_mul+0x64 : 104ef8 >
  104eb2:    30 4a             	r0 = [r5 + 0xc]			  ## bigint.c:75:18
  104eb4:    00 60             	r0 = b[r0 + 0x0] (u)			  ## bigint.c:75:13
  104eb6:    00 f3 1a 00       	if ((r0 & 0x1) == 0) goto 0x34 <bi_poly_mul+0x5A : 104eee >			  ## bigint.c:75:13
  104eba:    07 2e             	if (r7 == 0x0) goto 0xe <bi_poly_mul+0x36 : 104eca >
  104ebc:    21 bd             	r1 = r6 - r4			  ## bigint.c:84:17
  104ebe:    b0 08             	r0 = r11			  ## bigint.c:84:17
  104ec0:    b6 16             	call -0x294 <bi_lshift : 104c2e >			  ## bigint.c:84:17
  104ec2:    90 08             	r0 = r9			  ## bigint.c:86:23
  104ec4:    b1 08             	r1 = r11			  ## bigint.c:86:23
  104ec6:    58 17             	call -0x150 <bi_xor : 104d78 >			  ## bigint.c:86:23
  104ec8:    10 18             	goto 0x20 <bi_poly_mul+0x56 : 104eea >			  ## bigint.c:86:23
  104eca:    90 08             	r0 = r9			  ## bigint.c:77:17
  104ecc:    61 08             	r1 = r6			  ## bigint.c:77:17
  104ece:    af 16             	call -0x2a2 <bi_lshift : 104c2e >			  ## bigint.c:77:17
  104ed0:    21 f7 04 90       	r1 = h[r9 + 0x4] (s)			  ## bigint.c:540:30
  104ed4:    80 08             	r0 = r8			  ## bigint.c:540:19
  104ed6:    bc 17             	call -0x88 <alloc : 104e50 >			  ## bigint.c:540:19
  104ed8:    0b 08             	r11 = r0			  ## bigint.c:540:19
  104eda:    30 40             	r0 = [r0 + 0xc]			  ## bigint.c:543:17
  104edc:    01 f6 0c 90       	r1 = [r9 + 0xc]			  ## bigint.c:543:28
  104ee0:    22 f7 04 90       	r2 = h[r9 + 0x4] (s)			  ## bigint.c:543:35
  104ee4:    92 c0             	r2 = r2 << 0x2			  ## bigint.c:543:44
  104ee6:    bf f3 ab d8       	call -0x4eaa <memmove : 100040 >			  ## bigint.c:543:5
  104eea:    17 70             	r7 = 0x1
  104eec:    64 08             	r4 = r6
  104eee:    11 70             	r1 = 0x1			  ## bigint.c:90:15
  104ef0:    50 08             	r0 = r5			  ## bigint.c:90:15
  104ef2:    f7 16             	call -0x212 <bi_rshift : 104ce2 >			  ## bigint.c:90:15
  104ef4:    05 08             	r5 = r0			  ## bigint.c:90:15
  104ef6:    16 80             	r6 += 0x1			  ## bigint.c:74:54
  104ef8:    a6 f2 db df       	ifs (r6 <= r10) goto -0x4a <bi_poly_mul+0x1E : 104eb2 >
  104efc:    80 08             	r0 = r8			  ## bigint.c:92:5
  104efe:    b1 08             	r1 = r11			  ## bigint.c:92:5
  104f00:    60 17             	call -0x140 <bi_free : 104dc2 >			  ## bigint.c:92:5
  104f02:    51 08             	r1 = r5			  ## bigint.c:93:5
  104f04:    5e 17             	call -0x144 <bi_free : 104dc2 >			  ## bigint.c:93:5
  104f06:    90 08             	r0 = r9			  ## bigint.c:94:5
  104f08:    5b 01             	{pc, r11-r4} = [sp++]			  ## bigint.c:94:5


bi_wirte_to_byte:
  104f0a:    74 01             	[--sp] = {rets, r4}			  ## bigint.c:128:0
  104f0c:    22 f7 04 00       	r2 = h[r0 + 0x4] (s)			  ## bigint.c:129:29
  104f10:    30 40             	r0 = [r0 + 0xc]			  ## bigint.c:129:21
  104f12:    93 c0             	r3 = r2 << 0x2			  ## bigint.c:129:27
  104f14:    30 09             	r0 += r3			  ## bigint.c:129:27
  104f16:    0d 18             	goto 0x1a <bi_wirte_to_byte+0x28 : 104f32 >			  ## bigint.c:129:27
  104f18:    03 70             	r3 = 0x0
  104f1a:    07 18             	goto 0xe <bi_wirte_to_byte+0x20 : 104f2a >
  104f1c:    34 60             	r4 = b[r0 + 0x3] (u)			  ## bigint.c:135:39
  104f1e:    14 fa 00 13       	b[r1+r3] = r4			  ## bigint.c:135:20
  104f22:    04 40             	r4 = [r0 + 0x0]			  ## bigint.c:136:18
  104f24:    24 c2             	r4 = r4 << 0x8			  ## bigint.c:136:18
  104f26:    0c 40             	[r0 + 0x0] = r4			  ## bigint.c:136:18
  104f28:    13 80             	r3 += 0x1			  ## bigint.c:134:42
  104f2a:    43 e0 f7 1f       	if (r3 != 0x4) goto -0x12 <bi_wirte_to_byte+0x12 : 104f1c >
  104f2e:    f2 8f             	r2 += -0x1			  ## bigint.c:139:13
  104f30:    41 80             	r1 += 0x4			  ## bigint.c:127:50
  104f32:    c0 8f             	r0 += -0x4
  104f34:    12 e0 f0 af       	ifs (r2 >= 0x1) goto -0x20 <bi_wirte_to_byte+0xE : 104f18 >
  104f38:    54 01             	{pc, r4} = [sp++]			  ## bigint.c:141:1


bi_read_from_byte:
  104f3a:    76 01             	[--sp] = {rets, r6-r4}			  ## bigint.c:143:0
  104f3c:    24 08             	r4 = r2			  ## bigint.c:143:0
  104f3e:    15 08             	r5 = r1			  ## bigint.c:143:0
  104f40:    41 70             	r1 = 0x4			  ## bigint.c:143:0
  104f42:    e0 fe 10 14       	r1 = r4 / r1 (s)			  ## bigint.c:144:34
  104f46:    84 17             	call -0xf8 <alloc : 104e50 >			  ## bigint.c:144:19
  104f48:    06 08             	r6 = r0			  ## bigint.c:144:19
  104f4a:    20 f7 04 60       	r0 = h[r6 + 0x4] (s)			  ## bigint.c:145:28
  104f4e:    31 4c             	r1 = [r6 + 0xc]			  ## bigint.c:145:20
  104f50:    80 c0             	r0 = r0 << 0x2			  ## bigint.c:145:26
  104f52:    10 09             	r0 += r1			  ## bigint.c:145:26
  104f54:    0f 18             	goto 0x1e <bi_read_from_byte+0x3A : 104f74 >			  ## bigint.c:145:26
  104f56:    c0 8f             	r0 += -0x4
  104f58:    01 70             	r1 = 0x0
  104f5a:    02 70             	r2 = 0x0
  104f5c:    06 18             	goto 0xc <bi_read_from_byte+0x30 : 104f6a >
  104f5e:    03 fa 00 52       	r3 = b[r5+r2] (u)			  ## bigint.c:152:20
  104f62:    d8 fd 40 31       	r3 <= insert(r1, p:0x8, l:0x18)			  ## bigint.c:152:17
  104f66:    12 80             	r2 += 0x1			  ## bigint.c:150:42
  104f68:    31 08             	r1 = r3
  104f6a:    42 e0 f8 1f       	if (r2 != 0x4) goto -0x10 <bi_read_from_byte+0x24 : 104f5e >
  104f6e:    09 40             	[r0 + 0x0] = r1			  ## bigint.c:154:14
  104f70:    c4 8f             	r4 += -0x4			  ## bigint.c:155:13
  104f72:    45 80             	r5 += 0x4			  ## bigint.c:147:9
  104f74:    14 e0 ef af       	ifs (r4 >= 0x1) goto -0x22 <bi_read_from_byte+0x1C : 104f56 >
  104f78:    60 08             	r0 = r6			  ## bigint.c:157:5
  104f7a:    3a 16             	call -0x38c <trim : 104bf0 >			  ## bigint.c:157:5
  104f7c:    60 08             	r0 = r6			  ## bigint.c:158:5
  104f7e:    56 01             	{pc, r6-r4} = [sp++]			  ## bigint.c:158:5


bi_initialize:
  104f80:    76 01             	[--sp] = {rets, r6-r4}			  ## bigint.c:381:0
  104f82:    14 08             	r4 = r1			  ## bigint.c:381:0
  104f84:    05 08             	r5 = r0			  ## bigint.c:381:0
  104f86:    01 70             	r1 = 0x0			  ## bigint.c:383:5
  104f88:    42 74             	r2 = 0x44			  ## bigint.c:383:5
  104f8a:    06 70             	r6 = 0x0			  ## bigint.c:383:5
  104f8c:    bf f3 ef d8       	call -0x4e22 <memset : 10016e >			  ## bigint.c:383:5
  104f90:    fc 4a             	[r5 + 0x3c] = r4			  ## bigint.c:384:19
  104f92:    21 70             	r1 = 0x2			  ## bigint.c:386:21
  104f94:    50 08             	r0 = r5			  ## bigint.c:386:21
  104f96:    5c 17             	call -0x148 <alloc : 104e50 >			  ## bigint.c:386:21
  104f98:    28 4a             	[r5 + 0x8] = r0			  ## bigint.c:386:19
  104f9a:    31 40             	r1 = [r0 + 0xc]			  ## bigint.c:387:20
  104f9c:    0e 42             	[r1 + 0x0] = r6			  ## bigint.c:387:29
  104f9e:    c1 f4 01 19       	[r1 + 0x4] = 0x1			  ## bigint.c:388:29
  104fa2:    c1 ff aa 55 ff 7f 	r1 = 0x7fff55aa <__stub_uECC_vli_cmp_unsafe+0x7FEEE5AE : 7fff55aa >			  ## bigint.c:462:14
  104fa8:    29 40             	[r0 + 0x8] = r1			  ## bigint.c:462:14
  104faa:    56 01             	{pc, r6-r4} = [sp++]			  ## bigint.c:391:1


bi_terminate:
  104fac:    21 40             	r1 = [r0 + 0x8]			  ## bigint.c:401:0
  104fae:    c2 f4 01 19       	[r1 + 0x8] = 0x1			  ## bigint.c:479:14
  104fb2:    07 1f             	goto -0x1f2 <bi_free : 104dc2 >			  ## bigint.c:403:5


exception_irq_handler:
  104fb4:    7e f3 2f 38       	[--sp] = {ssp, usp, icfg, psr, rets, retx, rete, reti}			  ## startup.S:98:0
  104fb8:    78 f3 ff ff       	[--sp] = {r15-r0}			  ## startup.S:99:0
  104fbc:    28 fb 00 0e       	r0 = sp			  ## startup.S:100:0
  104fc0:    80 f3 d3 00       	call 0x1a6 <exception_analyze : 10516a >			  ## startup.S:101:0
  104fc4:    ff 1f             	goto -0x2 <exception_irq_handler+0x10 : 104fc4 >			  ## startup.S:103:0


the_debug_isr:
  104fc6:    78 f3 01 00       	[--sp] = {r0}			  ## debug_stub.S:16:0
  104fca:    28 fb 00 0e       	r0 = sp			  ## debug_stub.S:17:0
  104fce:    ee ff 8c fc 00 00 	sp = 0xfc8c			  ## debug_stub.S:18:0
  104fd4:    7e f3 ff 7f       	[--sp] = {sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti}			  ## debug_stub.S:20:0
  104fd8:    78 f3 ff ff       	[--sp] = {r15-r0}			  ## debug_stub.S:21:0
  104fdc:    01 40             	r1 = [r0 + 0x0]			  ## debug_stub.S:41:0
  104fde:    09 02             	[sp] = r1			  ## debug_stub.S:42:0
  104fe0:    40 80             	r0 += 0x4			  ## debug_stub.S:44:0
  104fe2:    e8 03             	[sp+120] = r0			  ## debug_stub.S:45:0
  104fe4:    28 fb 00 0e       	r0 = sp			  ## debug_stub.S:46:0
  104fe8:    c1 ff 80 e0 1b 00 	r1 = 0x1be080 <__stub_uECC_vli_cmp_unsafe+0xB7084 : 1be080 >			  ## debug_stub.S:47:0
  104fee:    18 42             	[r1 + 0x4] = r0			  ## debug_stub.S:48:0
  104ff0:    02 42             	r2 = [r1 + 0x0]			  ## debug_stub.S:50:0
  104ff2:    f2 bf             	r2 &= 0x7fffffff			  ## debug_stub.S:51:0
  104ff4:    0a 42             	[r1 + 0x0] = r2			  ## debug_stub.S:52:0
  104ff6:    02 72             	r2 = 0x20			  ## debug_stub.S:55:0
  104ff8:    00 00             	nop			  ## debug_stub.S:57:0
  104ffa:    52 f3 fd ff       	if (--r2 != 0) goto -0x6 <the_debug_isr+0x32 : 104ff8 >			  ## debug_stub.S:58:0
  104ffe:    00 42             	r0 = [r1 + 0x0]			  ## debug_stub.S:59:0
  105000:    1f f3 f9 0f       	if ((r0 & 0x80000000) == 0) goto -0xe <the_debug_isr+0x30 : 104ff6 >			  ## debug_stub.S:61:0
  105004:    70 f3 ff ff       	{r15-r0} = [sp++]			  ## debug_stub.S:64:0
  105008:    7c f3 ff 7f       	{sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti} = [sp++]			  ## debug_stub.S:65:0
  10500c:    26 00             	rte			  ## debug_stub.S:67:0


_startup:
  10500e:    ed ff 20 0c 00 00 	ssp = 0xc20			  ## startup.S:33:0
  105014:    3d 00             	sp = ssp			  ## startup.S:34:0
  105016:    ec ff 20 10 00 00 	usp = 0x1020			  ## startup.S:35:0
  10501c:    00 70             	r0 = 0x0			  ## startup.S:37:0
  10501e:    01 70             	r1 = 0x0			  ## startup.S:38:0
  105020:    02 70             	r2 = 0x0			  ## startup.S:39:0
  105022:    03 70             	r3 = 0x0			  ## startup.S:40:0
  105024:    04 70             	r4 = 0x0			  ## startup.S:41:0
  105026:    05 70             	r5 = 0x0			  ## startup.S:42:0
  105028:    06 70             	r6 = 0x0			  ## startup.S:43:0
  10502a:    07 70             	r7 = 0x0			  ## startup.S:44:0
  10502c:    08 70             	r8 = 0x0			  ## startup.S:45:0
  10502e:    09 70             	r9 = 0x0			  ## startup.S:46:0
  105030:    0a 70             	r10 = 0x0			  ## startup.S:47:0
  105032:    0b 70             	r11 = 0x0			  ## startup.S:48:0
  105034:    0c 70             	r12 = 0x0			  ## startup.S:49:0
  105036:    0d 70             	r13 = 0x0			  ## startup.S:50:0
  105038:    0e 70             	r14 = 0x0			  ## startup.S:51:0
  10503a:    0f 70             	r15 = 0x0			  ## startup.S:52:0
  10503c:    29 fb 00 05       	psr = r0			  ## startup.S:54:0
  105040:    29 fb 00 01       	rete = r0			  ## startup.S:55:0
  105044:    29 fb 00 02       	retx = r0			  ## startup.S:56:0
  105048:    29 fb 00 03       	rets = r0			  ## startup.S:57:0
  10504c:    29 fb 00 00       	reti = r0			  ## startup.S:58:0
  105050:    80 f3 b8 09       	call 0x1370 <switch_to_hrc_asm : 1063c4 >			  ## startup.S:60:0
  105054:    e0 ff 5c 50 10 00 	reti = 0x10505c			  ## startup.S:62:0
  10505a:    22 00             	rti			  ## startup.S:63:0


_user_mode:
  10505c:    80 f3 e9 0d       	call 0x1bd2 <p11_boot : 106c32 >			  ## startup.S:67:0
  105060:    80 f3 51 00       	call 0xa2 <boot_poweroff : 105106 >			  ## startup.S:68:0
  105064:    00 70             	r0 = 0x0			  ## startup.S:70:0
  105066:    c1 ff 20 08 00 00 	r1 = 0x820 <stack_bss_begin : 820 >			  ## startup.S:71:0
  10506c:    c2 ff 00 08 00 00 	r2 = 0x800 <stack_bss_size : 800 >			  ## startup.S:72:0
  105072:    04 18             	goto 0x8 <_user_mode+0x20 : 10507c >			  ## startup.S:74:0
  105074:    50 f6 04 10       	[r1 ++= 0x4] = r0			  ## startup.S:76:0
  105078:    52 fb 01 29       	r2 = r2 - 0x1			  ## startup.S:77:0
  10507c:    02 e0 fa 8f       	if (r2 > 0x0) goto -0xc <_user_mode+0x18 : 105074 >			  ## startup.S:79:0
  105080:    00 70             	r0 = 0x0			  ## startup.S:81:0
  105082:    c1 ff c0 13 00 00 	r1 = 0x13c0 <var_bss_begin : 13c0 >			  ## startup.S:82:0
  105088:    c2 ff 08 01 00 00 	r2 = 0x108 <var_bss_size : 108 >			  ## startup.S:83:0
  10508e:    04 18             	goto 0x8 <_user_mode+0x3C : 105098 >			  ## startup.S:84:0
  105090:    50 f6 04 10       	[r1 ++= 0x4] = r0			  ## startup.S:86:0
  105094:    52 fb 01 29       	r2 = r2 - 0x1			  ## startup.S:87:0
  105098:    02 e0 fa 8f       	if (r2 > 0x0) goto -0xc <_user_mode+0x34 : 105090 >			  ## startup.S:89:0
  10509c:    80 f3 db 00       	call 0x1b6 <p33_softflag_boot : 105256 >			  ## startup.S:91:0
  1050a0:    c0 f3 dc 07       	goto 0xfb8 <main : 10605c >			  ## startup.S:92:0


write_32:
  1050a4:    02 70             	r2 = 0x0			  ## boot_poweroff.c:39:0
  1050a6:    04 18             	goto 0x8 <write_32+0xC : 1050b0 >			  ## boot_poweroff.c:39:0
  1050a8:    11 fa 00 02       	b[r0+r2] = r1			  ## boot_poweroff.c:41:14
  1050ac:    12 80             	r2 += 0x1			  ## boot_poweroff.c:40:29
  1050ae:    09 d2             	r1 = r1 >> 0x8			  ## boot_poweroff.c:42:11
  1050b0:    42 e0 fa 1f       	if (r2 != 0x4) goto -0xc <write_32+0x4 : 1050a8 >			  ## boot_poweroff.c:40:5
  1050b4:    20 00             	rts			  ## boot_poweroff.c:44:1


lp_signature_set:
  1050b6:    76 01             	[--sp] = {rets, r6-r4}			  ## boot_poweroff.c:57:0
  1050b8:    25 08             	r5 = r2			  ## boot_poweroff.c:57:0
  1050ba:    16 08             	r6 = r1			  ## boot_poweroff.c:57:0
  1050bc:    04 08             	r4 = r0			  ## boot_poweroff.c:57:0
  1050be:    c0 ff fc 0f 1a 00 	r0 = 0x1a0ffc <__stub_uECC_vli_cmp_unsafe+0x9A000 : 1a0ffc >			  ## boot_poweroff.c:65:5
  1050c4:    41 08             	r1 = r4			  ## boot_poweroff.c:65:5
  1050c6:    ee 17             	call -0x24 <write_32 : 1050a4 >			  ## boot_poweroff.c:65:5
  1050c8:    c0 8f             	r0 += -0x4			  ## boot_poweroff.c:66:5
  1050ca:    61 08             	r1 = r6			  ## boot_poweroff.c:66:5
  1050cc:    eb 17             	call -0x2a <write_32 : 1050a4 >			  ## boot_poweroff.c:66:5
  1050ce:    c0 8f             	r0 += -0x4			  ## boot_poweroff.c:67:5
  1050d0:    51 08             	r1 = r5			  ## boot_poweroff.c:67:5
  1050d2:    e8 17             	call -0x30 <write_32 : 1050a4 >			  ## boot_poweroff.c:67:5
  1050d4:    c0 8f             	r0 += -0x4			  ## boot_poweroff.c:68:5
  1050d6:    31 08             	r1 = r3			  ## boot_poweroff.c:68:5
  1050d8:    e5 17             	call -0x36 <write_32 : 1050a4 >			  ## boot_poweroff.c:68:5
  1050da:    c0 8f             	r0 += -0x4			  ## boot_poweroff.c:69:5
  1050dc:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <__stub_uECC_vli_cmp_unsafe+0xAB01B7F2 : ab1227ee >			  ## boot_poweroff.c:69:5
  1050e2:    e0 17             	call -0x40 <write_32 : 1050a4 >			  ## boot_poweroff.c:69:5
  1050e4:    f0 7a             	r0 = 0xaf			  ## boot_poweroff.c:71:5
  1050e6:    78 68             	b[r4 + 0x7] = r0			  ## boot_poweroff.c:71:5
  1050e8:    60 7b             	r0 = 0xb6			  ## boot_poweroff.c:71:5
  1050ea:    68 68             	b[r4 + 0x6] = r0			  ## boot_poweroff.c:71:5
  1050ec:    40 7f             	r0 = 0xf4			  ## boot_poweroff.c:71:5
  1050ee:    58 68             	b[r4 + 0x5] = r0			  ## boot_poweroff.c:71:5
  1050f0:    60 7c             	r0 = 0xc6			  ## boot_poweroff.c:71:5
  1050f2:    48 68             	b[r4 + 0x4] = r0			  ## boot_poweroff.c:71:5
  1050f4:    90 7d             	r0 = 0xd9			  ## boot_poweroff.c:71:5
  1050f6:    38 68             	b[r4 + 0x3] = r0			  ## boot_poweroff.c:71:5
  1050f8:    b0 7c             	r0 = 0xcb			  ## boot_poweroff.c:71:5
  1050fa:    28 68             	b[r4 + 0x2] = r0			  ## boot_poweroff.c:71:5
  1050fc:    c0 7e             	r0 = 0xec			  ## boot_poweroff.c:71:5
  1050fe:    18 68             	b[r4 + 0x1] = r0			  ## boot_poweroff.c:71:5
  105100:    f0 7b             	r0 = 0xbf			  ## boot_poweroff.c:71:5
  105102:    08 68             	b[r4 + 0x0] = r0			  ## boot_poweroff.c:71:5
  105104:    56 01             	{pc, r6-r4} = [sp++]			  ## boot_poweroff.c:72:1


boot_poweroff:
  105106:    74 01             	[--sp] = {rets, r4}			  ## boot_poweroff.c:74:0
  105108:    c4 ff 30 18 1a 00 	r4 = 0x1a1830 <__stub_uECC_vli_cmp_unsafe+0x9A834 : 1a1830 >			  ## boot_poweroff.c:74:0
  10510e:    00 68             	r0 = b[r4 + 0x0] (u)			  ## boot_poweroff.c:75:14
  105110:    05 f3 fd 0f       	if ((r0 & 0x20) == 0) goto -0x6 <boot_poweroff+0x8 : 10510e >			  ## boot_poweroff.c:75:5
  105114:    20 f9 5a 47       	r0 = b[r4 + 0x75a] (s)			  ## boot_poweroff.c:77:9
  105118:    00 e0 26 b0       	ifs (r0 < 0x0) goto 0x4c <boot_poweroff+0x62 : 105168 >			  ## boot_poweroff.c:77:9
  10511c:    40 fc bc f7       	r0 = r4 + -0x844			  ## boot_poweroff.c:81:9
  105120:    80 f3 c3 0d       	call 0x1b86 <read_32 : 106caa >			  ## boot_poweroff.c:81:9
  105124:    c1 ff ef 27 12 ab 	r1 = 0xab1227ef <__stub_uECC_vli_cmp_unsafe+0xAB01B7F2 : ab1227ee >			  ## boot_poweroff.c:81:33
  10512a:    10 f2 1d 10       	if (r0 != r1) goto 0x3a <boot_poweroff+0x62 : 105168 >			  ## boot_poweroff.c:81:33
  10512e:    c0 ff c0 00 1e 00 	r0 = 0x1e00c0 <__stub_uECC_vli_cmp_unsafe+0xD90C4 : 1e00c0 >			  ## boot_poweroff.c:85:17
  105134:    00 40             	r0 = [r0 + 0x0]			  ## boot_poweroff.c:85:17
  105136:    00 e4 17 10       	if (r0 != 0x40) goto 0x2e <boot_poweroff+0x62 : 105168 >			  ## boot_poweroff.c:85:17
  10513a:    80 68             	r0 = b[r4 + 0x8] (u)			  ## boot_poweroff.c:89:11
  10513c:    01 f3 14 00       	if ((r0 & 0x2) == 0) goto 0x28 <boot_poweroff+0x62 : 105168 >			  ## boot_poweroff.c:89:11
  105140:    40 fc cc f7       	r0 = r4 + -0x834			  ## boot_poweroff.c:93:32
  105144:    80 f3 b1 0d       	call 0x1b62 <read_32 : 106caa >			  ## boot_poweroff.c:93:32
  105148:    04 08             	r4 = r0			  ## boot_poweroff.c:93:32
  10514a:    c1 ff 04 6d 10 00 	r1 = 0x106d04 <nvram_boot_tag : 106d04 >			  ## boot_poweroff.c:95:9
  105150:    82 70             	r2 = 0x8			  ## boot_poweroff.c:95:9
  105152:    bf f3 57 d7       	call -0x5152 <memcmp : 100004 >			  ## boot_poweroff.c:95:9
  105156:    08 30             	if (r0 != 0x0) goto 0x10 <boot_poweroff+0x62 : 105168 >			  ## boot_poweroff.c:95:9
  105158:    50 75             	r0 = 0x55			  ## boot_poweroff.c:99:23
  10515a:    08 68             	b[r4 + 0x0] = r0			  ## boot_poweroff.c:99:23
  10515c:    c0 ff f8 0f 1a 00 	r0 = 0x1a0ff8 <__stub_uECC_vli_cmp_unsafe+0x99FFC : 1a0ff8 >			  ## boot_poweroff.c:100:21
  105162:    80 f3 a2 0d       	call 0x1b44 <read_32 : 106caa >			  ## boot_poweroff.c:100:21
  105166:    80 00             	call r0			  ## boot_poweroff.c:101:5
  105168:    54 01             	{pc, r4} = [sp++]			  ## boot_poweroff.c:102:1


exception_analyze:
  10516a:    c1 ff ec fc 00 00 	r1 = 0xfcec <exception_irq_hook : fcec >			  ## boot_init.c:41:0
  105170:    01 42             	r1 = [r1 + 0x0]			  ## boot_init.c:42:9
  105172:    01 22             	if (r1 == 0x0) goto 0x2 <exception_analyze+0xC : 105176 >			  ## boot_init.c:42:9
  105174:    81 00             	call r1			  ## boot_init.c:43:9
  105176:    bf f3 46 d9       	call -0x4d74 <chip_reset : 100406 >			  ## boot_init.c:47:5


HWI_Install:
  10517a:    75 01             	[--sp] = {rets, r5, r4}			  ## irq.c:15:0
  10517c:    c3 ff 00 ff 00 00 	r3 = 0xff00 <_IRQ_MEM_ADDR : ff00 >			  ## irq.c:19:5
  105182:    b1 f6 00 30       	[r3+r0<<2] = r1			  ## irq.c:19:20
  105186:    81 c0             	r1 = r0 << 0x2			  ## irq.c:17:41
  105188:    23 fd 1c 19       	r3 = r1 & 0x1c			  ## irq.c:17:41
  10518c:    f1 70             	r1 = 0xf			  ## irq.c:17:41
  10518e:    f8 fd 30 41       	r4 = r1 << r3			  ## irq.c:24:35
  105192:    c0 d0             	r0 = r0 >> 0x3			  ## irq.c:16:36
  105194:    c5 ff 00 e1 1b 00 	r5 = 0x1be100 <__stub_uECC_vli_cmp_unsafe+0xB7104 : 1be100 >			  ## irq.c:28:27
  10519a:    c5 fd 10 50       	r5 <= insert(r0, p:0x2, l:0x5)			  ## irq.c:28:27
  10519e:    bf f3 3f d9       	call -0x4d82 <local_irq_disable : 100420 >			  ## irq.c:22:5
  1051a2:    00 4a             	r0 = [r5 + 0x0]			  ## irq.c:28:27
  1051a4:    e3 fd 40 00       	r0 = r0 & ~r4			  ## irq.c:28:46
  1051a8:    51 c0             	r1 = r2 << 0x1			  ## irq.c:23:49
  1051aa:    21 fd 0e 19       	r1 = r1 & 0xe			  ## irq.c:23:49
  1051ae:    11 b0             	r1 |= 0x1			  ## irq.c:23:55
  1051b0:    c1 0c             	r1 <<= r3			  ## irq.c:25:39
  1051b2:    50 b2             	r0 |= r1			  ## irq.c:28:58
  1051b4:    08 4a             	[r5 + 0x0] = r0			  ## irq.c:28:24
  1051b6:    bf f3 3b d9       	call -0x4d8a <local_irq_enable : 100430 >			  ## irq.c:30:5
  1051ba:    55 01             	{pc, r5, r4} = [sp++]			  ## irq.c:31:1


udelay:
  1051bc:    c1 ff 00 04 1e 00 	r1 = 0x1e0400 <__stub_uECC_vli_cmp_unsafe+0xD9404 : 1e0400 >			  ## timer.c:10:0
  1051c2:    c0 f4 40 1a       	[r1 + 0x0] = 0x4000			  ## timer.c:17:20
  1051c6:    c1 f4 00 19       	[r1 + 0x4] = 0x0			  ## timer.c:18:20
  1051ca:    00 fe 05 09       	r0 = r0 * 0x5			  ## timer.c:19:44
  1051ce:    28 42             	[r1 + 0x8] = r0			  ## timer.c:19:20
  1051d0:    00 fb 11 10       	r0 = 0x1011 <_stack+0x3F0 : 1010 >			  ## timer.c:20:20
  1051d4:    08 42             	[r1 + 0x0] = r0			  ## timer.c:20:20
  1051d6:    00 42             	r0 = [r1 + 0x0]			  ## timer.c:21:24
  1051d8:    30 04             	r0 = r0.l (s)			  ## timer.c:21:39
  1051da:    f0 ef fc cf       	ifs (r0 > -0x1) goto -0x8 <udelay+0x1A : 1051d6 >			  ## timer.c:21:5
  1051de:    c0 f4 40 1a       	[r1 + 0x0] = 0x4000			  ## timer.c:22:20
  1051e2:    20 00             	rts			  ## timer.c:24:1


spi_cs_pu:
  1051e4:    c1 ff 10 53 1e 00 	r1 = 0x1e5310 <__stub_uECC_vli_cmp_unsafe+0xDE314 : 1e5310 >			  ## spi0.c:81:0
  1051ea:    02 42             	r2 = [r1 + 0x0]			  ## spi0.c:81:0
  1051ec:    33 fd 08 29       	r3 = r2 & 0xfffffff7			  ## spi0.c:85:37
  1051f0:    92 b1             	r2 |= 0x8			  ## spi0.c:83:37
  1051f2:    01 30             	if (r0 != 0x0) goto 0x2 <spi_cs_pu+0x12 : 1051f6 >			  ## spi0.c:83:37
  1051f4:    32 08             	r2 = r3			  ## spi0.c:82:9
  1051f6:    0a 42             	[r1 + 0x0] = r2
  1051f8:    20 00             	rts			  ## spi0.c:87:1


mdelay:
  1051fa:    34 00             	[--sp] = rets			  ## timer.c:27:0
  1051fc:    02 08             	r2 = r0			  ## timer.c:27:0
  1051fe:    04 18             	goto 0x8 <mdelay+0xE : 105208 >			  ## timer.c:27:0
  105200:    00 fb e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## timer.c:29:9
  105204:    db 17             	call -0x4a <udelay : 1051bc >			  ## timer.c:29:9
  105206:    f2 8f             	r2 += -0x1			  ## timer.c:28:5
  105208:    fb 35             	if (r2 != 0x0) goto -0xa <mdelay+0x6 : 105200 >			  ## timer.c:28:5
  10520a:    30 00             	pc = [sp++]			  ## timer.c:31:1


flash_poweron:
  10520c:    75 01             	[--sp] = {rets, r5, r4}			  ## norflash.c:388:0
  10520e:    c5 ff 00 53 1e 00 	r5 = 0x1e5300 <__stub_uECC_vli_cmp_unsafe+0xDE304 : 1e5300 >			  ## norflash.c:388:0
  105214:    01 4a             	r1 = [r5 + 0x0]			  ## norflash.c:391:19
  105216:    04 08             	r4 = r0			  ## norflash.c:391:19
  105218:    24 f3 1c 10       	if ((r1 & 0x10) != 0) goto 0x38 <flash_poweron+0x48 : 105254 >
  10521c:    10 70             	r0 = 0x1			  ## norflash.c:394:5
  10521e:    e2 17             	call -0x3c <spi_cs_pu : 1051e4 >			  ## norflash.c:394:5
  105220:    50 4a             	r0 = [r5 + 0x14]			  ## norflash.c:396:19
  105222:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:396:19
  105224:    58 4a             	[r5 + 0x14] = r0			  ## norflash.c:396:19
  105226:    04 f4 10 59       	[r5 + 0x10] |= 0x10			  ## norflash.c:397:19
  10522a:    02 f4 10 59       	[r5 + 0x8] |= 0x10			  ## norflash.c:398:19
  10522e:    70 4a             	r0 = [r5 + 0x1c]			  ## norflash.c:400:19
  105230:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:400:19
  105232:    78 4a             	[r5 + 0x1c] = r0			  ## norflash.c:400:19
  105234:    60 4a             	r0 = [r5 + 0x18]			  ## norflash.c:401:19
  105236:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:401:19
  105238:    68 4a             	[r5 + 0x18] = r0			  ## norflash.c:401:19
  10523a:    00 f4 10 59       	[r5 + 0x0] |= 0x10			  ## norflash.c:402:19
  10523e:    20 4a             	r0 = [r5 + 0x8]			  ## norflash.c:403:19
  105240:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:403:19
  105242:    28 4a             	[r5 + 0x8] = r0			  ## norflash.c:403:19
  105244:    10 70             	r0 = 0x1			  ## norflash.c:405:5
  105246:    d9 17             	call -0x4e <mdelay : 1051fa >			  ## norflash.c:405:5
  105248:    07 f4 10 59       	[r5 + 0x1c] |= 0x10			  ## norflash.c:407:19
  10524c:    06 f4 10 59       	[r5 + 0x18] |= 0x10			  ## norflash.c:408:19
  105250:    40 08             	r0 = r4			  ## norflash.c:409:5
  105252:    d3 17             	call -0x5a <mdelay : 1051fa >			  ## norflash.c:409:5
  105254:    55 01             	{pc, r5, r4} = [sp++]			  ## norflash.c:410:1


p33_softflag_boot:
  105256:    75 01             	[--sp] = {rets, r5, r4}			  ## boot_init.c:177:0
  105258:    28 fb 00 0b       	r0 = icfg			  ## boot_init.c:179:5
  10525c:    90 b4             	r0 |= 0x200			  ## boot_init.c:180:9
  10525e:    29 fb 00 0b       	icfg = r0			  ## boot_init.c:181:5
  105262:    bf f3 d7 d8       	call -0x4e52 <os_code_begin : 100414 >			  ## boot_init.c:183:5
  105266:    bf f3 db d8       	call -0x4e4a <local_irq_disable : 100420 >			  ## boot_init.c:184:5
  10526a:    bf f3 e1 d8       	call -0x4e3e <local_irq_enable : 100430 >			  ## boot_init.c:185:5
  10526e:    c0 ff 00 fc 00 00 	r0 = 0xfc00 <boot_arg_list : fc00 >			  ## clock.c:240:27
  105274:    31 70             	r1 = 0x3			  ## clock.c:234:28
  105276:    19 60             	b[r0 + 0x1] = r1			  ## clock.c:234:28
  105278:    c1 ff 00 2d 31 01 	r1 = 0x1312d00 <__stub_uECC_vli_cmp_unsafe+0x120BD04 : 1312d00 >			  ## clock.c:238:28
  10527e:    19 40             	[r0 + 0x4] = r1			  ## clock.c:238:28
  105280:    29 40             	[r0 + 0x8] = r1			  ## clock.c:240:27
  105282:    c0 ff ec fc 00 00 	r0 = 0xfcec <exception_irq_hook : fcec >			  ## boot_init.c:53:24
  105288:    04 70             	r4 = 0x0			  ## boot_init.c:53:24
  10528a:    0c 40             	[r0 + 0x0] = r4			  ## boot_init.c:53:24
  10528c:    c1 ff b4 4f 10 00 	r1 = 0x104fb4 <exception_irq_handler : 104fb4 >			  ## boot_init.c:54:5
  105292:    10 70             	r0 = 0x1			  ## boot_init.c:54:5
  105294:    72 70             	r2 = 0x7			  ## boot_init.c:54:5
  105296:    15 70             	r5 = 0x1			  ## boot_init.c:54:5
  105298:    70 17             	call -0x120 <HWI_Install : 10517a >			  ## boot_init.c:54:5
  10529a:    c0 ff 00 e2 1b 00 	r0 = 0x1be200 <__stub_uECC_vli_cmp_unsafe+0xB7204 : 1be200 >			  ## boot_init.c:55:26
  1052a0:    0c 40             	[r0 + 0x0] = r4			  ## boot_init.c:55:26
  1052a2:    c1 ff 11 18 1a 00 	r1 = 0x1a1811 <__stub_uECC_vli_cmp_unsafe+0x9A814 : 1a1810 >			  ## boot_init.c:55:26
  1052a8:    22 f9 1f 10       	r2 = b[r1 + 0x1f] (s)			  ## boot_init.c:193:9
  1052ac:    c0 ff f8 fb 00 00 	r0 = 0xfbf8 <g_boot_soft_flag : fbf8 >			  ## boot_init.c:193:9
  1052b2:    f2 ef 1d d0       	ifs (r2 <= -0x1) goto 0x3a <p33_softflag_boot+0x9A : 1052f0 >			  ## boot_init.c:193:9
  1052b6:    1c 40             	[r0 + 0x4] = r4			  ## boot_init.c:200:34
  1052b8:    13 fc 27 00       	r3 = r1 + 0x27			  ## boot_init.c:200:34
  1052bc:    02 66             	r2 = b[r3 + 0x0] (u)			  ## boot_init.c:201:40
  1052be:    0a 60             	b[r0 + 0x0] = r2			  ## boot_init.c:201:38
  1052c0:    14 66             	r4 = b[r3 + 0x1] (u)			  ## boot_init.c:202:40
  1052c2:    1c 60             	b[r0 + 0x1] = r4			  ## boot_init.c:202:38
  1052c4:    24 67             	r4 = b[r3 + 0x12] (u)			  ## boot_init.c:203:40
  1052c6:    2c 60             	b[r0 + 0x2] = r4			  ## boot_init.c:203:38
  1052c8:    33 67             	r3 = b[r3 + 0x13] (u)			  ## boot_init.c:204:40
  1052ca:    3b 60             	b[r0 + 0x3] = r3			  ## boot_init.c:204:40
  1052cc:    04 f3 0d 20       	if ((r2 & 0x10) == 0) goto 0x1a <p33_softflag_boot+0x94 : 1052ea >			  ## boot_init.c:204:40
  1052d0:    12 fc 84 00       	r2 = r1 + 0x84
  1052d4:    83 64             	r3 = b[r2 + 0x8] (u)			  ## boot_init.c:211:22
  1052d6:    93 b3             	r3 |= 0x80			  ## boot_init.c:211:22
  1052d8:    8b 64             	b[r2 + 0x8] = r3			  ## boot_init.c:211:22
  1052da:    83 64             	r3 = b[r2 + 0x8] (u)			  ## boot_init.c:212:22
  1052dc:    73 b3             	r3 &= 0xffffffbf			  ## boot_init.c:212:22
  1052de:    8b 64             	b[r2 + 0x8] = r3			  ## boot_init.c:212:22
  1052e0:    03 64             	r3 = b[r2 + 0x0] (u)			  ## boot_init.c:213:21
  1052e2:    23 fd c7 39       	r3 = r3 & 0xc7			  ## boot_init.c:213:21
  1052e6:    0b 64             	b[r2 + 0x0] = r3			  ## boot_init.c:213:21
  1052e8:    02 60             	r2 = b[r0 + 0x0] (u)			  ## boot_init.c:213:21
  1052ea:    00 f3 03 20       	if ((r2 & 0x1) == 0) goto 0x6 <p33_softflag_boot+0x9E : 1052f4 >
  1052ee:    09 18             	goto 0x12 <p33_softflag_boot+0xAC : 105302 >
  1052f0:    1d 40             	[r0 + 0x4] = r5			  ## boot_init.c:194:34
  1052f2:    0c 40             	[r0 + 0x0] = r4			  ## boot_init.c:196:38
  1052f4:    c2 71             	r2 = 0x1c			  ## wdt.c:5:18
  1052f6:    13 fc 77 07       	r3 = r1 + 0x777			  ## wdt.c:5:18
  1052fa:    0a 66             	b[r3 + 0x0] = r2			  ## wdt.c:5:18
  1052fc:    02 70             	r2 = 0x0			  ## wdt.c:6:18
  1052fe:    1a 66             	b[r3 + 0x1] = r2			  ## wdt.c:6:18
  105300:    02 60             	r2 = b[r0 + 0x0] (u)			  ## wdt.c:6:18
  105302:    03 f3 0a 20       	if ((r2 & 0x8) == 0) goto 0x14 <p33_softflag_boot+0xC4 : 10531a >
  105306:    02 62             	r2 = b[r1 + 0x0] (u)			  ## boot_init.c:223:21
  105308:    22 fd fa 29       	r2 = r2 & 0xfa			  ## boot_init.c:223:21
  10530c:    0a 62             	b[r1 + 0x0] = r2			  ## boot_init.c:223:21
  10530e:    02 62             	r2 = b[r1 + 0x0] (u)			  ## boot_init.c:224:21
  105310:    12 b0             	r2 |= 0x1			  ## boot_init.c:224:21
  105312:    0a 62             	b[r1 + 0x0] = r2			  ## boot_init.c:224:21
  105314:    02 62             	r2 = b[r1 + 0x0] (u)			  ## boot_init.c:225:21
  105316:    12 b1             	r2 |= 0x4			  ## boot_init.c:225:21
  105318:    0a 62             	b[r1 + 0x0] = r2			  ## boot_init.c:225:21
  10531a:    11 40             	r1 = [r0 + 0x4]			  ## boot_init.c:229:26
  10531c:    7f 32             	if (r1 != 0x0) goto 0xfe <.GJTIE15_0_0_+0xE2 : 10541c >			  ## boot_init.c:229:26
  10531e:    11 60             	r1 = b[r0 + 0x1] (u)			  ## boot_init.c:137:53
  105320:    49 d1             	r1 = r1 >> 0x5			  ## boot_init.c:137:53
  105322:    12 fc ff ff       	r2 = r1 + -0x1			  ## boot_init.c:64:5
  105326:    c1 ff 00 59 1e 00 	r1 = 0x1e5900 <__stub_uECC_vli_cmp_unsafe+0xDE904 : 1e5900 >			  ## boot_init.c:64:5
  10532c:    62 e0 0d 80       	if (r2 > 0x6) goto 0x1a <.GJTIE15_0_0_+0x10 : 10534a >			  ## boot_init.c:64:5
  105330:    a2 00             	tbb [r2]


.GJTIS15_0_0_:
  105332:    04     < 4 : 0x4 >
  105333:    15     < 21 : 0x15 >
  105334:    1d     < 29 : 0x1D >
  105335:    21     < 33 : 0x21 >
  105336:    27     < 39 : 0x27 >
  105337:    2e     < 46 : 0x2E >
  105338:    36     < 54 : 0x36 >
  105339:    00     < 0 : 0x0 >
  10533a:    04 f4 01 19       	[r1 + 0x10] |= 0x1			  ## boot_init.c:71:19
  10533e:    52 42             	r2 = [r1 + 0x14]			  ## boot_init.c:72:19
  105340:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:72:19
  105342:    5a 42             	[r1 + 0x14] = r2			  ## boot_init.c:72:19
  105344:    02 f4 01 19       	[r1 + 0x8] |= 0x1			  ## boot_init.c:73:19
  105348:    35 18             	goto 0x6a <.GJTIE15_0_0_+0x7A : 1053b4 >			  ## boot_init.c:73:19
  10534a:    02 f4 01 19       	[r1 + 0x8] |= 0x1			  ## boot_init.c:66:19
  10534e:    42 42             	r2 = [r1 + 0x10]			  ## boot_init.c:67:19
  105350:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:67:19
  105352:    4a 42             	[r1 + 0x10] = r2			  ## boot_init.c:67:19
  105354:    52 42             	r2 = [r1 + 0x14]			  ## boot_init.c:68:19
  105356:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:68:19
  105358:    5a 42             	[r1 + 0x14] = r2			  ## boot_init.c:68:19
  10535a:    2c 18             	goto 0x58 <.GJTIE15_0_0_+0x7A : 1053b4 >			  ## boot_init.c:68:19
  10535c:    05 f4 01 19       	[r1 + 0x14] |= 0x1			  ## boot_init.c:76:19
  105360:    42 42             	r2 = [r1 + 0x10]			  ## boot_init.c:77:19
  105362:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:77:19
  105364:    4a 42             	[r1 + 0x10] = r2			  ## boot_init.c:77:19
  105366:    02 f4 01 19       	[r1 + 0x8] |= 0x1			  ## boot_init.c:78:19
  10536a:    24 18             	goto 0x48 <.GJTIE15_0_0_+0x7A : 1053b4 >			  ## boot_init.c:78:19
  10536c:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:81:19
  10536e:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:81:19
  105370:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:81:19
  105372:    17 18             	goto 0x2e <.GJTIE15_0_0_+0x68 : 1053a2 >			  ## boot_init.c:81:19
  105374:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:87:19
  105376:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:87:19
  105378:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:87:19
  10537a:    06 f4 01 19       	[r1 + 0x18] |= 0x1			  ## boot_init.c:88:19
  10537e:    14 18             	goto 0x28 <.GJTIE15_0_0_+0x6E : 1053a8 >			  ## boot_init.c:88:19
  105380:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:93:19
  105382:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:93:19
  105384:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:93:19
  105386:    62 42             	r2 = [r1 + 0x18]			  ## boot_init.c:94:19
  105388:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:94:19
  10538a:    6a 42             	[r1 + 0x18] = r2			  ## boot_init.c:94:19
  10538c:    05 18             	goto 0xa <.GJTIE15_0_0_+0x5E : 105398 >			  ## boot_init.c:94:19
  10538e:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:99:19
  105390:    72 b0             	r2 &= 0xfffffffe			  ## boot_init.c:99:19
  105392:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:99:19
  105394:    06 f4 01 19       	[r1 + 0x18] |= 0x1			  ## boot_init.c:100:19
  105398:    07 f4 01 19       	[r1 + 0x1c] |= 0x1
  10539c:    08 18             	goto 0x10 <.GJTIE15_0_0_+0x74 : 1053ae >
  10539e:    00 f4 01 19       	[r1 + 0x0] |= 0x1			  ## boot_init.c:105:19
  1053a2:    62 42             	r2 = [r1 + 0x18]
  1053a4:    72 b0             	r2 &= 0xfffffffe
  1053a6:    6a 42             	[r1 + 0x18] = r2
  1053a8:    72 42             	r2 = [r1 + 0x1c]
  1053aa:    72 b0             	r2 &= 0xfffffffe
  1053ac:    7a 42             	[r1 + 0x1c] = r2
  1053ae:    22 42             	r2 = [r1 + 0x8]
  1053b0:    72 b0             	r2 &= 0xfffffffe
  1053b2:    2a 42             	[r1 + 0x8] = r2
  1053b4:    12 60             	r2 = b[r0 + 0x1] (u)			  ## boot_init.c:139:41
  1053b6:    23 fd 03 29       	r3 = r2 & 0x3			  ## boot_init.c:139:5
  1053ba:    11 fc 00 fb       	r1 = r1 + -0x500			  ## boot_init.c:139:5
  1053be:    23 e0 07 00       	if (r3 == 0x2) goto 0xe <.GJTIE15_0_0_+0x96 : 1053d0 >			  ## boot_init.c:139:5
  1053c2:    13 e0 0b 00       	if (r3 == 0x1) goto 0x16 <.GJTIE15_0_0_+0xA2 : 1053dc >
  1053c6:    12 36             	if (r3 != 0x0) goto 0x24 <.GJTIE15_0_0_+0xB2 : 1053ec >
  1053c8:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:141:9
  1053ca:    72 b2             	r2 &= 0xffffffef			  ## boot_init.c:141:9
  1053cc:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:141:9
  1053ce:    08 18             	goto 0x10 <.GJTIE15_0_0_+0xA6 : 1053e0 >			  ## boot_init.c:141:9
  1053d0:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:151:9
  1053d2:    72 b2             	r2 &= 0xffffffef			  ## boot_init.c:151:9
  1053d4:    0a 42             	[r1 + 0x0] = r2			  ## boot_init.c:151:9
  1053d6:    02 42             	r2 = [r1 + 0x0]			  ## boot_init.c:152:9
  1053d8:    12 b3             	r2 |= 0x40			  ## boot_init.c:152:9
  1053da:    04 18             	goto 0x8 <.GJTIE15_0_0_+0xAA : 1053e4 >			  ## boot_init.c:152:9
  1053dc:    00 f4 10 19       	[r1 + 0x0] |= 0x10			  ## boot_init.c:146:9
  1053e0:    02 42             	r2 = [r1 + 0x0]
  1053e2:    72 b3             	r2 &= 0xffffffbf
  1053e4:    0a 42             	[r1 + 0x0] = r2
  1053e6:    00 f4 04 19       	[r1 + 0x0] |= 0x4
  1053ea:    12 60             	r2 = b[r0 + 0x1] (u)
  1053ec:    82 fd 10 02       	r0 = uextra(r2, p:0x2, l:0x2)			  ## boot_init.c:157:5
  1053f0:    20 e0 07 00       	if (r0 == 0x2) goto 0xe <.GJTIE15_0_0_+0xC8 : 105402 >			  ## boot_init.c:157:5
  1053f4:    10 e0 0b 00       	if (r0 == 0x1) goto 0x16 <.GJTIE15_0_0_+0xD4 : 10540e >
  1053f8:    11 30             	if (r0 != 0x0) goto 0x22 <.GJTIE15_0_0_+0xE2 : 10541c >
  1053fa:    00 42             	r0 = [r1 + 0x0]			  ## boot_init.c:159:9
  1053fc:    f0 b2             	r0 &= 0xffffffdf			  ## boot_init.c:159:9
  1053fe:    08 42             	[r1 + 0x0] = r0			  ## boot_init.c:159:9
  105400:    08 18             	goto 0x10 <.GJTIE15_0_0_+0xD8 : 105412 >			  ## boot_init.c:159:9
  105402:    00 42             	r0 = [r1 + 0x0]			  ## boot_init.c:169:9
  105404:    f0 b2             	r0 &= 0xffffffdf			  ## boot_init.c:169:9
  105406:    08 42             	[r1 + 0x0] = r0			  ## boot_init.c:169:9
  105408:    00 42             	r0 = [r1 + 0x0]			  ## boot_init.c:170:9
  10540a:    90 b3             	r0 |= 0x80			  ## boot_init.c:170:9
  10540c:    04 18             	goto 0x8 <.GJTIE15_0_0_+0xDC : 105416 >			  ## boot_init.c:170:9
  10540e:    00 f4 20 19       	[r1 + 0x0] |= 0x20			  ## boot_init.c:164:9
  105412:    00 42             	r0 = [r1 + 0x0]
  105414:    f0 b3             	r0 &= 0xffffff7f
  105416:    08 42             	[r1 + 0x0] = r0
  105418:    00 f4 08 19       	[r1 + 0x0] |= 0x8
  10541c:    04 70             	r4 = 0x0
  10541e:    c0 ff d1 18 1a 00 	r0 = 0x1a18d1 <__stub_uECC_vli_cmp_unsafe+0x9A8D4 : 1a18d0 >
  105424:    0c 60             	b[r0 + 0x0] = r4			  ## boot_init.c:248:18
  105426:    3c 60             	b[r0 + 0x3] = r4			  ## boot_init.c:249:15
  105428:    2c 60             	b[r0 + 0x2] = r4			  ## boot_init.c:250:14
  10542a:    10 70             	r0 = 0x1			  ## boot_init.c:252:5
  10542c:    c7 16             	call -0x272 <udelay : 1051bc >			  ## boot_init.c:252:5
  10542e:    00 70             	r0 = 0x0			  ## boot_init.c:254:5
  105430:    ed 16             	call -0x226 <flash_poweron : 10520c >			  ## boot_init.c:254:5
  105432:    c0 ff 00 41 1e 00 	r0 = 0x1e4100 <__stub_uECC_vli_cmp_unsafe+0xDD104 : 1e4100 >
  105438:    2c 40             	[r0 + 0x8] = r4			  ## boot_flash.c:61:24
  10543a:    c1 ff ff ff 00 00 	r1 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >			  ## boot_flash.c:62:24
  105440:    19 40             	[r0 + 0x4] = r1			  ## boot_flash.c:62:24
  105442:    c0 f4 80 09       	[r0 + 0x0] = 0x80			  ## boot_flash.c:63:24
  105446:    55 01             	{pc, r5, r4} = [sp++]			  ## boot_init.c:258:1


change_capture_mode:
  105448:    c1 ff 00 05 1e 00 	r1 = 0x1e0500 <__stub_uECC_vli_cmp_unsafe+0xD9504 : 1e0500 >			  ## uart_key.c:67:0
  10544e:    40 f4 01 19       	[r1 + 0x0] ^= 0x1			  ## uart_key.c:68:18
  105452:    11 70             	r1 = 0x1			  ## uart_key.c:68:18
  105454:    20 e0 01 00       	if (r0 == 0x2) goto 0x2 <change_capture_mode+0x12 : 10545a >			  ## uart_key.c:68:18
  105458:    21 70             	r1 = 0x2			  ## uart_key.c:70:14
  10545a:    c0 ff c0 13 00 00 	r0 = 0x13c0 <var_bss_begin : 13c0 >
  105460:    39 40             	[r0 + 0xc] = r1
  105462:    20 00             	rts			  ## uart_key.c:75:1


reset_status:
  105464:    c0 ff c0 13 00 00 	r0 = 0x13c0 <var_bss_begin : 13c0 >			  ## uart_key.c:90:0
  10546a:    01 70             	r1 = 0x0			  ## uart_key.c:94:17
  10546c:    09 50             	h[r0 + 0x0] = r1			  ## uart_key.c:91:13
  10546e:    49 40             	[r0 + 0x10] = r1			  ## uart_key.c:92:14
  105470:    59 40             	[r0 + 0x14] = r1			  ## uart_key.c:93:16
  105472:    69 40             	[r0 + 0x18] = r1			  ## uart_key.c:94:17
  105474:    20 00             	rts			  ## uart_key.c:95:1


clk_get:
  105476:    76 01             	[--sp] = {rets, r6-r4}			  ## clock.c:245:0
  105478:    04 08             	r4 = r0			  ## clock.c:245:0
  10547a:    c5 ff 10 6d 10 00 	r5 = 0x106d10 <nvram_boot_tag+0xC : 106d10 >			  ## clock.c:245:0
  105480:    51 08             	r1 = r5			  ## clock.c:246:9
  105482:    bf f3 aa d6       	call -0x52ac <strcmp : 1001da >			  ## clock.c:246:9
  105486:    c6 ff 00 fc 00 00 	r6 = 0xfc00 <boot_arg_list : fc00 >			  ## clock.c:246:9
  10548c:    0c 20             	if (r0 == 0x0) goto 0x18 <clk_get+0x30 : 1054a6 >			  ## clock.c:246:9
  10548e:    41 9a             	r1 = r5 + 0x4			  ## clock.c:248:16
  105490:    40 08             	r0 = r4			  ## clock.c:248:16
  105492:    bf f3 a2 d6       	call -0x52bc <strcmp : 1001da >			  ## clock.c:248:16
  105496:    09 20             	if (r0 == 0x0) goto 0x12 <clk_get+0x34 : 1054aa >			  ## clock.c:248:16
  105498:    d1 9a             	r1 = r5 + 0xd			  ## clock.c:250:16
  10549a:    40 08             	r0 = r4			  ## clock.c:250:16
  10549c:    bf f3 9d d6       	call -0x52c6 <strcmp : 1001da >			  ## clock.c:250:16
  1054a0:    07 20             	if (r0 == 0x0) goto 0xe <clk_get+0x3A : 1054b0 >			  ## clock.c:250:16
  1054a2:    20 4c             	r0 = [r6 + 0x8]			  ## clock.c:253:26
  1054a4:    56 01             	{pc, r6-r4} = [sp++]			  ## clock.c:250:16
  1054a6:    80 9c             	r0 = r6 + 0x8
  1054a8:    01 18             	goto 0x2 <clk_get+0x36 : 1054ac >
  1054aa:    40 9c             	r0 = r6 + 0x4
  1054ac:    00 40             	r0 = [r0 + 0x0]
  1054ae:    56 01             	{pc, r6-r4} = [sp++]			  ## clock.c:254:1
  1054b0:    c0 ff 00 36 6e 01 	r0 = 0x16e3600 <__stub_uECC_vli_cmp_unsafe+0x15DC604 : 16e3600 >			  ## clock.c:250:16
  1054b6:    56 01             	{pc, r6-r4} = [sp++]			  ## clock.c:250:16


set_cap_timeout:
  1054b8:    74 01             	[--sp] = {rets, r4}			  ## boot_mode.c:32:0
  1054ba:    c4 ff 00 06 1e 00 	r4 = 0x1e0600 <__stub_uECC_vli_cmp_unsafe+0xD9604 : 1e0600 >			  ## boot_mode.c:32:0
  1054c0:    c0 f4 40 4a       	[r4 + 0x0] = 0x4000			  ## boot_mode.c:33:17
  1054c4:    c1 f4 00 49       	[r4 + 0x4] = 0x0			  ## boot_mode.c:34:17
  1054c8:    c0 ff 10 6d 10 00 	r0 = 0x106d10 <nvram_boot_tag+0xC : 106d10 >			  ## boot_mode.c:35:26
  1054ce:    d3 17             	call -0x5a <clk_get : 105476 >			  ## boot_mode.c:35:26
  1054d0:    20 fb fa 1a       	r1 = 0xfa00			  ## boot_mode.c:35:46
  1054d4:    c0 fe 10 00       	r0 = r0 / r1 (u)			  ## boot_mode.c:35:46
  1054d8:    00 fe 0a 09       	r0 = r0 * 0xa			  ## boot_mode.c:35:22
  1054dc:    28 48             	[r4 + 0x8] = r0			  ## boot_mode.c:35:17
  1054de:    00 f4 31 49       	[r4 + 0x0] |= 0x31			  ## boot_mode.c:36:17
  1054e2:    54 01             	{pc, r4} = [sp++]			  ## boot_mode.c:37:1


capture_isr:
  1054e4:    e9 01             	[--sp] = {psr, rets, reti}			  ## uart_key.c:105:0
  1054e6:    78 f3 ff 03       	[--sp] = {r9-r0}			  ## uart_key.c:105:0
  1054ea:    c3 ff 00 05 1e 00 	r3 = 0x1e0500 <__stub_uECC_vli_cmp_unsafe+0xD9504 : 1e0500 >			  ## uart_key.c:105:0
  1054f0:    00 f4 40 3a       	[r3 + 0x0] |= 0x4000			  ## uart_key.c:106:5
  1054f4:    21 46             	r1 = [r3 + 0x8]			  ## uart_key.c:109:15
  1054f6:    c4 ff c0 13 00 00 	r4 = 0x13c0 <var_bss_begin : 13c0 >
  1054fc:    22 48             	r2 = [r4 + 0x8]			  ## uart_key.c:112:21
  1054fe:    29 48             	[r4 + 0x8] = r1			  ## uart_key.c:113:13
  105500:    30 48             	r0 = [r4 + 0xc]			  ## uart_key.c:120:27
  105502:    a5 b2             	r5 = r1 - r2			  ## uart_key.c:112:19
  105504:    20 e0 26 00       	if (r0 == 0x2) goto 0x4c <capture_isr+0x70 : 105554 >			  ## uart_key.c:120:9
  105508:    10 e0 26 10       	if (r0 != 0x1) goto 0x4c <capture_isr+0x74 : 105558 >
  10550c:    30 70             	r0 = 0x3			  ## uart_key.c:121:9
  10550e:    9c 17             	call -0xc8 <change_capture_mode : 105448 >			  ## uart_key.c:121:9
  105510:    40 48             	r0 = [r4 + 0x10]			  ## uart_key.c:122:13
  105512:    22 20             	if (r0 == 0x0) goto 0x44 <capture_isr+0x74 : 105558 >			  ## uart_key.c:122:13
  105514:    41 b1             	r1 = r0 + r5			  ## uart_key.c:127:25
  105516:    12 fc 18 fc       	r2 = r1 + -0x3e8			  ## uart_key.c:130:39
  10551a:    06 fb 99 3a       	r6 = 0x3a99 <os_code_size+0x1A03 : 3a98 >			  ## uart_key.c:130:39
  10551e:    62 f2 17 20       	if (r2 >= r6) goto 0x2e <capture_isr+0x6C : 105550 >			  ## uart_key.c:130:39
  105522:    52 48             	r2 = [r4 + 0x14]			  ## uart_key.c:138:13
  105524:    1e 24             	if (r2 == 0x0) goto 0x3c <capture_isr+0x7E : 105562 >
  105526:    66 48             	r6 = [r4 + 0x18]			  ## uart_key.c:143:21
  105528:    16 09             	r6 += r1			  ## uart_key.c:143:21
  10552a:    6e 48             	[r4 + 0x18] = r6			  ## uart_key.c:143:21
  10552c:    07 58             	r7 = h[r4 + 0x0] (u)			  ## uart_key.c:144:17
  10552e:    17 80             	r7 += 0x1			  ## uart_key.c:144:17
  105530:    a9 b2             	r9 = r1 - r2			  ## uart_key.c:30:18
  105532:    68 b4             	r8 = r2 - r1			  ## uart_key.c:28:18
  105534:    0f 58             	h[r4 + 0x0] = r7			  ## uart_key.c:144:17
  105536:    12 f2 01 80       	if (r2 > r1) goto 0x2 <capture_isr+0x58 : 10553c >			  ## uart_key.c:144:17
  10553a:    98 08             	r8 = r9			  ## uart_key.c:27:9
  10553c:    e1 05             	r1 = r7.l (u)			  ## uart_key.c:147:58
  10553e:    c0 fe 10 16       	r1 = r6 / r1 (u)			  ## uart_key.c:147:56
  105542:    01 fe 0a 19       	r1 = r1 * 0xa			  ## uart_key.c:147:67
  105546:    42 76             	r2 = 0x64			  ## uart_key.c:147:72
  105548:    c0 fe 20 11       	r1 = r1 / r2 (u)			  ## uart_key.c:147:72
  10554c:    18 f2 0b 90       	if (r8 <= r1) goto 0x16 <capture_isr+0x82 : 105566 >			  ## uart_key.c:147:72
  105550:    89 17             	call -0xee <reset_status : 105464 >
  105552:    03 18             	goto 0x6 <capture_isr+0x76 : 10555a >
  105554:    20 70             	r0 = 0x2			  ## uart_key.c:183:9
  105556:    78 17             	call -0x110 <change_capture_mode : 105448 >			  ## uart_key.c:183:9
  105558:    4d 48             	[r4 + 0x10] = r5
  10555a:    70 f3 ff 03       	{r9-r0} = [sp++]			  ## uart_key.c:188:1
  10555e:    a9 01             	{psr, rets, reti} = [sp++]			  ## uart_key.c:188:1
  105560:    22 00             	rti			  ## uart_key.c:188:1
  105562:    59 48             	[r4 + 0x14] = r1			  ## uart_key.c:139:24
  105564:    fa 1f             	goto -0xc <capture_isr+0x76 : 10555a >			  ## uart_key.c:139:24
  105566:    01 fe 03 59       	r1 = r5 * 0x3			  ## uart_key.c:154:28
  10556a:    10 f2 09 90       	if (r0 <= r1) goto 0x12 <capture_isr+0x9C : 105580 >			  ## uart_key.c:154:28
  10556e:    01 fe 05 59       	r1 = r5 * 0x5			  ## uart_key.c:155:28
  105572:    10 f2 05 20       	if (r0 >= r1) goto 0xa <capture_isr+0x9C : 105580 >			  ## uart_key.c:155:28
  105576:    11 58             	r1 = h[r4 + 0x2] (u)			  ## uart_key.c:157:28
  105578:    10 70             	r0 = 0x1			  ## uart_key.c:157:28
  10557a:    df fd 08 01       	r0 <= insert(r1, p:0x1, l:0x1f)			  ## uart_key.c:157:46
  10557e:    0a 18             	goto 0x14 <capture_isr+0xB0 : 105594 >			  ## uart_key.c:157:46
  105580:    01 fe 03 09       	r1 = r0 * 0x3			  ## uart_key.c:158:31
  105584:    51 f2 e4 2f       	if (r1 >= r5) goto -0x38 <capture_isr+0x6C : 105550 >			  ## uart_key.c:158:31
  105588:    00 fe 05 09       	r0 = r0 * 0x5			  ## uart_key.c:159:30
  10558c:    50 f2 e0 9f       	if (r0 <= r5) goto -0x40 <capture_isr+0x6C : 105550 >			  ## uart_key.c:159:30
  105590:    10 58             	r0 = h[r4 + 0x2] (u)			  ## uart_key.c:161:28
  105592:    40 c0             	r0 = r0 << 0x1			  ## uart_key.c:161:40
  105594:    18 58             	h[r4 + 0x2] = r0
  105596:    10 58             	r0 = h[r4 + 0x2] (u)			  ## uart_key.c:167:23
  105598:    01 fb af 68       	r1 = 0x68af <os_code_size+0x4819 : 68ae >			  ## uart_key.c:167:20
  10559c:    10 f2 13 10       	if (r0 != r1) goto 0x26 <capture_isr+0xE2 : 1055c6 >			  ## uart_key.c:167:13
  1055a0:    30 fc 74 51       	r0 = r3 + 0x5174			  ## uart_key.c:169:58
  1055a4:    04 70             	r4 = 0x0			  ## uart_key.c:169:58
  1055a6:    0c 40             	[r0 + 0x0] = r4			  ## uart_key.c:169:58
  1055a8:    00 fc 8c 02       	r0 = r0 + 0x28c			  ## uart_key.c:169:58
  1055ac:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## uart_key.c:170:51
  1055b0:    21 40             	r1 = [r0 + 0x8]			  ## uart_key.c:171:51
  1055b2:    71 b0             	r1 &= 0xfffffffe			  ## uart_key.c:171:51
  1055b4:    29 40             	[r0 + 0x8] = r1			  ## uart_key.c:171:51
  1055b6:    20 70             	r0 = 0x2			  ## uart_key.c:172:13
  1055b8:    20 16             	call -0x3c0 <mdelay : 1051fa >			  ## uart_key.c:172:13
  1055ba:    c0 f4 40 3a       	[r3 + 0x0] = 0x4000			  ## uart_key.c:79:18
  1055be:    30 fc 2c 52       	r0 = r3 + 0x522c			  ## uart_key.c:80:26
  1055c2:    0c 40             	[r0 + 0x0] = r4			  ## uart_key.c:80:26
  1055c4:    ca 1f             	goto -0x6c <capture_isr+0x76 : 10555a >			  ## uart_key.c:80:26
  1055c6:    70 48             	r0 = [r4 + 0x1c]			  ## uart_key.c:177:19
  1055c8:    11 90             	r1 = r0 + 0x1			  ## uart_key.c:177:19
  1055ca:    79 48             	[r4 + 0x1c] = r1			  ## uart_key.c:177:19
  1055cc:    30 e6 c4 8f       	if (r0 > 0x63) goto -0x78 <capture_isr+0x74 : 105558 >			  ## uart_key.c:177:19
  1055d0:    73 17             	call -0x11a <set_cap_timeout : 1054b8 >			  ## uart_key.c:178:13
  1055d2:    c2 1f             	goto -0x7c <capture_isr+0x74 : 105558 >			  ## uart_key.c:178:13


osc_clk_init:
  1055d4:    c0 ff f3 f2 2f 00 	r0 = 0x2ff2f3 <__stub_uECC_vli_cmp_unsafe+0x1F82F6 : 2ff2f2 >			  ## clock.c:135:0
  1055da:    c1 ff 20 19 1e 00 	r1 = 0x1e1920 <__stub_uECC_vli_cmp_unsafe+0xDA924 : 1e1920 >			  ## clock.c:65:23
  1055e0:    18 42             	[r1 + 0x4] = r0			  ## clock.c:65:23
  1055e2:    c0 ff d2 9c 19 1b 	r0 = 0x1b199cd2 <__stub_uECC_vli_cmp_unsafe+0x1B092CD6 : 1b199cd2 >			  ## clock.c:66:23
  1055e8:    08 42             	[r1 + 0x0] = r0			  ## clock.c:66:23
  1055ea:    00 f4 01 19       	[r1 + 0x0] |= 0x1			  ## clock.c:67:22
  1055ee:    20 00             	rts			  ## clock.c:137:1


set_timer3_captrue_dp:
  1055f0:    c1 ff 00 54 1e 00 	r1 = 0x1e5400 <__stub_uECC_vli_cmp_unsafe+0xDE404 : 1e5400 >			  ## clock.c:301:0
  1055f6:    00 f4 10 1a       	[r1 + 0x0] |= 0x1000			  ## clock.c:302:5
  1055fa:    12 fc 00 c4       	r2 = r1 + -0x3c00			  ## clock.c:303:5
  1055fe:    00 f4 01 29       	[r2 + 0x0] |= 0x1			  ## clock.c:303:5
  105602:    13 20             	if (r0 == 0x0) goto 0x26 <set_timer3_captrue_dp+0x3A : 10562a >			  ## clock.c:303:5
  105604:    00 f4 01 1a       	[r1 + 0x0] |= 0x100			  ## clock.c:305:9
  105608:    00 f4 02 1a       	[r1 + 0x0] |= 0x200			  ## clock.c:306:9
  10560c:    00 f4 04 19       	[r1 + 0x0] |= 0x4			  ## clock.c:307:9
  105610:    00 f4 08 19       	[r1 + 0x0] |= 0x8			  ## clock.c:308:9
  105614:    00 42             	r0 = [r1 + 0x0]			  ## clock.c:309:9
  105616:    70 b3             	r0 &= 0xffffffbf			  ## clock.c:309:9
  105618:    08 42             	[r1 + 0x0] = r0			  ## clock.c:309:9
  10561a:    00 42             	r0 = [r1 + 0x0]			  ## clock.c:310:9
  10561c:    f0 b3             	r0 &= 0xffffff7f			  ## clock.c:310:9
  10561e:    08 42             	[r1 + 0x0] = r0			  ## clock.c:310:9
  105620:    00 f4 10 19       	[r1 + 0x0] |= 0x10			  ## clock.c:311:9
  105624:    00 42             	r0 = [r1 + 0x0]			  ## clock.c:312:9
  105626:    f0 b2             	r0 &= 0xffffffdf			  ## clock.c:312:9
  105628:    08 42             	[r1 + 0x0] = r0			  ## clock.c:312:9
  10562a:    a0 71             	r0 = 0x1a			  ## clock.c:315:26
  10562c:    10 f6 3c 13       	[r1 + 0x33c] = r0			  ## clock.c:315:26
  105630:    10 fc 00 b3       	r0 = r1 + -0x4d00			  ## clock.c:317:20
  105634:    c0 f4 40 0a       	[r0 + 0x0] = 0x4000			  ## clock.c:317:20
  105638:    20 00             	rts			  ## clock.c:318:1


check_key_type:
  10563a:    01 fb ef 16       	r1 = 0x16ef <_system_bss_end+0x226 : 16ee >			  ## boot_mode.c:49:0
  10563e:    10 f2 0a 00       	if (r0 == r1) goto 0x14 <check_key_type+0x1C : 105656 >			  ## boot_mode.c:50:9
  105642:    01 fb af 68       	r1 = 0x68af <os_code_size+0x4819 : 68ae >
  105646:    10 f2 08 00       	if (r0 == r1) goto 0x10 <check_key_type+0x20 : 10565a >
  10564a:    01 fb 7c 6b       	r1 = 0x6b7c <os_code_size+0x4AE7 : 6b7c >
  10564e:    10 f2 06 10       	if (r0 != r1) goto 0xc <check_key_type+0x24 : 10565e >
  105652:    50 70             	r0 = 0x5
  105654:    20 00             	rts			  ## boot_mode.c:58:1
  105656:    10 70             	r0 = 0x1
  105658:    20 00             	rts			  ## boot_mode.c:58:1
  10565a:    40 70             	r0 = 0x4
  10565c:    20 00             	rts			  ## boot_mode.c:58:1
  10565e:    00 70             	r0 = 0x0
  105660:    20 00             	rts			  ## boot_mode.c:58:1


wdt_clr:
  105662:    c0 ff 88 1f 1a 00 	r0 = 0x1a1f88 <__stub_uECC_vli_cmp_unsafe+0x9AF8C : 1a1f88 >			  ## wdt.c:10:0
  105668:    01 60             	r1 = b[r0 + 0x0] (u)			  ## wdt.c:11:18
  10566a:    11 b3             	r1 |= 0x40			  ## wdt.c:11:18
  10566c:    09 60             	b[r0 + 0x0] = r1			  ## wdt.c:11:18
  10566e:    20 00             	rts			  ## wdt.c:12:1


uart_set_dma_dir:
  105670:    76 01             	[--sp] = {rets, r6-r4}			  ## uart_upgrade.c:23:0
  105672:    0a 20             	if (r0 == 0x0) goto 0x14 <uart_set_dma_dir+0x18 : 105688 >			  ## uart_upgrade.c:23:0
  105674:    f0 06             	r0 = -0x11			  ## uart_upgrade.c:23:0
  105676:    c1 ff 04 20 1e 00 	r1 = 0x1e2004 <__stub_uECC_vli_cmp_unsafe+0xDB008 : 1e2004 >			  ## uart_upgrade.c:23:0
  10567c:    02 70             	r2 = 0x0			  ## uart_upgrade.c:23:0
  10567e:    e3 71             	r3 = 0x1e			  ## uart_upgrade.c:23:0
  105680:    14 70             	r4 = 0x1			  ## uart_upgrade.c:23:0
  105682:    15 fc 04 39       	r5 = r1 + 0x3904			  ## uart_upgrade.c:23:0
  105686:    09 18             	goto 0x12 <uart_set_dma_dir+0x2A : 10569a >			  ## uart_upgrade.c:23:0
  105688:    e0 07             	r0 = -0x2			  ## uart_upgrade.c:23:0
  10568a:    c1 ff 08 59 1e 00 	r1 = 0x1e5908 <__stub_uECC_vli_cmp_unsafe+0xDE90C : 1e5908 >			  ## uart_upgrade.c:23:0
  105690:    f2 7a             	r2 = 0xaf			  ## uart_upgrade.c:23:0
  105692:    03 70             	r3 = 0x0			  ## uart_upgrade.c:23:0
  105694:    04 71             	r4 = 0x10			  ## uart_upgrade.c:23:0
  105696:    15 fc fc c6       	r5 = r1 + -0x3904			  ## uart_upgrade.c:23:0
  10569a:    06 4a             	r6 = [r5 + 0x0]			  ## uart_upgrade.c:23:0
  10569c:    54 bc             	r4 |= r6			  ## uart_upgrade.c:23:0
  10569e:    0c 4a             	[r5 + 0x0] = r4			  ## uart_upgrade.c:23:0
  1056a0:    c4 ff 74 56 1e 00 	r4 = 0x1e5674 <__stub_uECC_vli_cmp_unsafe+0xDE678 : 1e5674 >			  ## uart_upgrade.c:23:0
  1056a6:    13 f6 30 41       	[r4 + 0x130] = r3			  ## uart_upgrade.c:23:0
  1056aa:    0a 48             	[r4 + 0x0] = r2			  ## uart_upgrade.c:23:0
  1056ac:    02 42             	r2 = [r1 + 0x0]			  ## uart_upgrade.c:23:0
  1056ae:    50 b5             	r0 &= r2			  ## uart_upgrade.c:23:0
  1056b0:    08 42             	[r1 + 0x0] = r0			  ## uart_upgrade.c:23:0
  1056b2:    56 01             	{pc, r6-r4} = [sp++]			  ## uart_upgrade.c:41:1


uart_rx_data:
  1056b4:    75 01             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:61:0
  1056b6:    14 08             	r4 = r1			  ## uart_upgrade.c:61:0
  1056b8:    05 08             	r5 = r0			  ## uart_upgrade.c:61:0
  1056ba:    d3 17             	call -0x5a <wdt_clr : 105662 >			  ## uart_upgrade.c:62:5
  1056bc:    10 70             	r0 = 0x1			  ## uart_upgrade.c:63:5
  1056be:    d8 17             	call -0x50 <uart_set_dma_dir : 105670 >			  ## uart_upgrade.c:63:5
  1056c0:    20 fb 71 04       	r0 = 0x1e2000			  ## uart_upgrade.c:63:5
  1056c4:    7d 40             	[r0 + 0x1c] = r5			  ## uart_upgrade.c:65:18
  1056c6:    01 bb             	r1 = r5 + r4			  ## uart_upgrade.c:66:33
  1056c8:    31 80             	r1 += 0x3			  ## uart_upgrade.c:66:40
  1056ca:    31 fd 03 19       	r1 = r1 & 0xfffffffc			  ## uart_upgrade.c:66:49
  1056ce:    89 40             	[r0 + 0x20] = r1			  ## uart_upgrade.c:66:18
  1056d0:    9c 40             	[r0 + 0x24] = r4			  ## uart_upgrade.c:68:17
  1056d2:    08 00             	csync			  ## uart_upgrade.c:69:5
  1056d4:    01 40             	r1 = [r0 + 0x0]			  ## uart_upgrade.c:73:19
  1056d6:    0e f3 fd 1f       	if ((r1 & 0x4000) == 0) goto -0x6 <uart_rx_data+0x20 : 1056d4 >			  ## uart_upgrade.c:73:13
  1056da:    00 f4 14 0a       	[r0 + 0x0] |= 0x1400			  ## uart_upgrade.c:77:16
  1056de:    55 01             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:79:1


chip_crc16:
  1056e0:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_uECC_vli_cmp_unsafe+0xDC504 : 1e3500 >			  ## crc.c:3:0
  1056e6:    c1 f4 00 29       	[r2 + 0x4] = 0x0			  ## crc.c:5:17
  1056ea:    04 18             	goto 0x8 <chip_crc16+0x14 : 1056f4 >			  ## crc.c:5:17
  1056ec:    03 60             	r3 = b[r0 + 0x0] (u)			  ## crc.c:8:24
  1056ee:    0b 44             	[r2 + 0x0] = r3			  ## crc.c:8:22
  1056f0:    10 80             	r0 += 0x1			  ## crc.c:8:26
  1056f2:    f1 8f             	r1 += -0x1			  ## crc.c:7:15
  1056f4:    fb 33             	if (r1 != 0x0) goto -0xa <chip_crc16+0xC : 1056ec >
  1056f6:    08 00             	csync			  ## crc.c:10:5
  1056f8:    10 44             	r0 = [r2 + 0x4]			  ## crc.c:12:20
  1056fa:    20 04             	r0 = r0.l (u)			  ## crc.c:12:5
  1056fc:    20 00             	rts			  ## crc.c:12:5


uart_cmd_verify:
  1056fe:    74 01             	[--sp] = {rets, r4}			  ## uart_upgrade.c:114:0
  105700:    c0 ff 40 13 00 00 	r0 = 0x1340 <ut_cmd : 1340 >			  ## uart_upgrade.c:114:0
  105706:    01 61             	r1 = b[r0 + 0x10] (u)			  ## uart_upgrade.c:115:18
  105708:    f4 60             	r4 = b[r0 + 0xf] (u)			  ## uart_upgrade.c:115:18
  10570a:    c8 fd 40 41       	r4 <= insert(r1, p:0x8, l:0x8)			  ## uart_upgrade.c:115:18
  10570e:    09 28             	if (r4 == 0x0) goto 0x12 <uart_cmd_verify+0x24 : 105722 >			  ## uart_upgrade.c:115:33
  105710:    50 80             	r0 += 0x5			  ## uart_upgrade.c:116:30
  105712:    a1 70             	r1 = 0xa			  ## uart_upgrade.c:116:30
  105714:    e5 17             	call -0x36 <chip_crc16 : 1056e0 >			  ## uart_upgrade.c:116:30
  105716:    01 08             	r1 = r0			  ## uart_upgrade.c:116:30
  105718:    10 70             	r0 = 0x1			  ## uart_upgrade.c:116:27
  10571a:    14 f2 01 00       	if (r4 == r1) goto 0x2 <uart_cmd_verify+0x22 : 105720 >			  ## uart_upgrade.c:116:27
  10571e:    00 70             	r0 = 0x0			  ## uart_upgrade.c:116:27
  105720:    54 01             	{pc, r4} = [sp++]			  ## uart_upgrade.c:115:9
  105722:    00 70             	r0 = 0x0			  ## uart_upgrade.c:120:1
  105724:    54 01             	{pc, r4} = [sp++]			  ## uart_upgrade.c:120:1


CrcDecode:
  105726:    77 01             	[--sp] = {rets, r7-r4}			  ## crc.c:28:0
  105728:    c3 ff ff ff 00 00 	r3 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >			  ## crc.c:36:17
  10572e:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_uECC_vli_cmp_unsafe+0xDC504 : 1e3500 >
  105734:    1b 44             	[r2 + 0x4] = r3			  ## crc.c:36:17
  105736:    f3 7f             	r3 = 0xff			  ## crc.c:38:18
  105738:    0b 44             	[r2 + 0x0] = r3			  ## crc.c:38:18
  10573a:    0b 44             	[r2 + 0x0] = r3			  ## crc.c:39:18
  10573c:    04 70             	r4 = 0x0			  ## crc.c:39:18
  10573e:    c3 ff 44 6d 10 00 	r3 = 0x106d44 <CrcDecode.keylcode : 106d44 >			  ## crc.c:39:18
  105744:    10 18             	goto 0x20 <CrcDecode+0x40 : 105766 >			  ## crc.c:39:18

  105746:    06 05             	r6 = r4.b0 (u)			  ## crc.c:43:24
  105748:    05 fa 00 63       	r5 = b[r6+r3] (u)			  ## crc.c:43:24
  10574c:    0d 44             	[r2 + 0x0] = r5			  ## crc.c:43:22
  10574e:    08 00             	csync			  ## crc.c:49:9
  105750:    05 60             	r5 = b[r0 + 0x0] (u)			  ## crc.c:50:24
  105752:    17 44             	r7 = [r2 + 0x4]			  ## crc.c:50:51
  105754:    d5 be             	r5 ^= r7			  ## crc.c:50:37
  105756:    0d 60             	b[r0 + 0x0] = r5			  ## crc.c:50:22
  105758:    15 98             	r5 = r4 + 0x1			  ## crc.c:45:14
  10575a:    04 70             	r4 = 0x0			  ## crc.c:45:13
  10575c:    e6 e0 01 80       	if (r6 > 0xe) goto 0x2 <CrcDecode+0x3C : 105762 >			  ## crc.c:45:13
  105760:    54 08             	r4 = r5			  ## crc.c:45:13
  105762:    10 80             	r0 += 0x1			  ## crc.c:52:27
  105764:    f1 8f             	r1 += -0x1			  ## crc.c:42:15
  105766:    65 04             	r5 = r1.l (u)			  ## crc.c:42:5
  105768:    ee 3b             	if (r5 != 0x0) goto -0x24 <CrcDecode+0x20 : 105746 >			  ## crc.c:42:5

  10576a:    57 01             	{pc, r7-r4} = [sp++]			  ## crc.c:56:1


uart_recv_loader:
  10576c:    fc 0b             	sp += -0x8			  ## uart_upgrade.c:143:0
  10576e:    50 70             	r0 = 0x5			  ## uart_upgrade.c:146:5
  105770:    54 70             	r4 = 0x5			  ## uart_upgrade.c:146:5
  105772:    43 15             	call -0x57a <mdelay : 1051fa >			  ## uart_upgrade.c:146:5
  105774:    c6 ff 10 6d 10 00 	r6 = 0x106d10 <nvram_boot_tag+0xC : 106d10 >			  ## uart_upgrade.c:146:5
  10577a:    c0 6c             	r0 = b[r6 + 0xc] (u)			  ## uart_upgrade.c:57:5
  10577c:    21 4c             	r1 = [r6 + 0x8]			  ## uart_upgrade.c:57:5
  10577e:    d0 f5 04 00       	b[sp+4] = r0			  ## uart_upgrade.c:57:5
  105782:    09 02             	[sp] = r1			  ## uart_upgrade.c:57:5
  105784:    00 70             	r0 = 0x0			  ## uart_upgrade.c:45:5
  105786:    74 17             	call -0x118 <uart_set_dma_dir : 105670 >			  ## uart_upgrade.c:45:5
  105788:    00 a0             	r0 = sp + 0			  ## uart_upgrade.c:45:5
  10578a:    20 fb 71 54       	r5 = 0x1e2000			  ## uart_upgrade.c:45:5
  10578e:    58 4a             	[r5 + 0x14] = r0			  ## uart_upgrade.c:47:17
  105790:    6c 4a             	[r5 + 0x18] = r4			  ## uart_upgrade.c:48:17
  105792:    08 00             	csync			  ## uart_upgrade.c:49:5
  105794:    00 4a             	r0 = [r5 + 0x0]			  ## uart_upgrade.c:50:19
  105796:    30 04             	r0 = r0.l (s)			  ## uart_upgrade.c:50:35
  105798:    f0 ef fc cf       	ifs (r0 > -0x1) goto -0x8 <uart_recv_loader+0x28 : 105794 >			  ## uart_upgrade.c:50:5
  10579c:    00 f4 20 5a       	[r5 + 0x0] |= 0x2000			  ## uart_upgrade.c:52:16
  1057a0:    20 70             	r0 = 0x2			  ## uart_upgrade.c:149:5
  1057a2:    2b 15             	call -0x5aa <mdelay : 1051fa >			  ## uart_upgrade.c:149:5
  1057a4:    c4 ff 40 13 00 00 	r4 = 0x1340 <ut_cmd : 1340 >			  ## uart_upgrade.c:149:5
  1057aa:    20 69             	r0 = b[r4 + 0x12] (u)			  ## uart_upgrade.c:151:16
  1057ac:    02 30             	if (r0 != 0x0) goto 0x4 <uart_recv_loader+0x46 : 1057b2 >			  ## uart_upgrade.c:151:16
  1057ae:    a0 70             	r0 = 0xa
  1057b0:    28 69             	b[r4 + 0x12] = r0			  ## uart_upgrade.c:152:21
  1057b2:    01 fb 10 27       	r1 = 0x2710 <os_code_size+0x67B : 2710 >			  ## uart_upgrade.c:155:43
  1057b6:    47 0e             	r7 = r0 * r1			  ## uart_upgrade.c:155:43
  1057b8:    d0 9c             	r0 = r6 + 0xd			  ## uart_upgrade.c:155:19
  1057ba:    5d 16             	call -0x346 <clk_get : 105476 >			  ## uart_upgrade.c:155:19
  1057bc:    c0 fe 70 00       	r0 = r0 / r7 (u)			  ## uart_upgrade.c:155:28
  1057c0:    80 d0             	r0 = r0 >> 0x2			  ## uart_upgrade.c:155:53
  1057c2:    f0 8f             	r0 += -0x1			  ## uart_upgrade.c:155:57
  1057c4:    28 4a             	[r5 + 0x8] = r0			  ## uart_upgrade.c:155:16
  1057c6:    4d 17             	call -0x166 <wdt_clr : 105662 >			  ## uart_upgrade.c:156:5
  1057c8:    80 68             	r0 = b[r4 + 0x8] (u)			  ## uart_upgrade.c:157:25
  1057ca:    72 68             	r2 = b[r4 + 0x7] (u)			  ## uart_upgrade.c:157:25
  1057cc:    c8 fd 40 20       	r2 <= insert(r0, p:0x8, l:0x8)			  ## uart_upgrade.c:157:25
  1057d0:    08 f9 06 40       	r8 = b[r4 + 0x6] (u)			  ## uart_upgrade.c:157:25
  1057d4:    50 68             	r0 = b[r4 + 0x5] (u)			  ## uart_upgrade.c:157:25
  1057d6:    c6 68             	r6 = b[r4 + 0xc] (u)			  ## uart_upgrade.c:157:38
  1057d8:    b7 68             	r7 = b[r4 + 0xb] (u)			  ## uart_upgrade.c:157:38
  1057da:    a3 68             	r3 = b[r4 + 0xa] (u)			  ## uart_upgrade.c:157:38
  1057dc:    91 68             	r1 = b[r4 + 0x9] (u)			  ## uart_upgrade.c:157:38
  1057de:    c8 fd 40 08       	r0 <= insert(r8, p:0x8, l:0x8)			  ## uart_upgrade.c:157:25
  1057e2:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## uart_upgrade.c:157:25
  1057e6:    c8 fd 40 76       	r7 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:157:38
  1057ea:    c8 fd 40 13       	r1 <= insert(r3, p:0x8, l:0x8)			  ## uart_upgrade.c:157:38
  1057ee:    d0 fd 80 17       	r1 <= insert(r7, p:0x10, l:0x10)			  ## uart_upgrade.c:157:38
  1057f2:    60 17             	call -0x140 <uart_rx_data : 1056b4 >			  ## uart_upgrade.c:157:5
  1057f4:    c0 f4 00 59       	[r5 + 0x0] = 0x0			  ## uart_upgrade.c:159:16
  1057f8:    81 68             	r1 = b[r4 + 0x8] (u)			  ## uart_upgrade.c:161:57
  1057fa:    72 68             	r2 = b[r4 + 0x7] (u)			  ## uart_upgrade.c:161:57
  1057fc:    63 68             	r3 = b[r4 + 0x6] (u)			  ## uart_upgrade.c:161:57
  1057fe:    50 68             	r0 = b[r4 + 0x5] (u)			  ## uart_upgrade.c:161:57
  105800:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## uart_upgrade.c:161:57
  105804:    c8 fd 40 03       	r0 <= insert(r3, p:0x8, l:0x8)			  ## uart_upgrade.c:161:57
  105808:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## uart_upgrade.c:161:57
  10580c:    c2 68             	r2 = b[r4 + 0xc] (u)			  ## uart_upgrade.c:161:70
  10580e:    b3 68             	r3 = b[r4 + 0xb] (u)			  ## uart_upgrade.c:161:70
  105810:    a5 68             	r5 = b[r4 + 0xa] (u)			  ## uart_upgrade.c:161:70
  105812:    91 68             	r1 = b[r4 + 0x9] (u)			  ## uart_upgrade.c:161:70
  105814:    e6 68             	r6 = b[r4 + 0xe] (u)			  ## uart_upgrade.c:161:16
  105816:    d7 68             	r7 = b[r4 + 0xd] (u)			  ## uart_upgrade.c:161:16
  105818:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:161:70
  10581c:    c8 fd 40 15       	r1 <= insert(r5, p:0x8, l:0x8)			  ## uart_upgrade.c:161:70
  105820:    d0 fd 80 13       	r1 <= insert(r3, p:0x10, l:0x10)			  ## uart_upgrade.c:161:70
  105824:    5d 17             	call -0x146 <chip_crc16 : 1056e0 >			  ## uart_upgrade.c:161:31
  105826:    c8 fd 40 76       	r7 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:161:16
  10582a:    07 f2 1e 10       	if (r7 != r0) goto 0x3c <uart_recv_loader+0xFE : 10586a >			  ## uart_upgrade.c:161:16
  10582e:    10 69             	r0 = b[r4 + 0x11] (u)			  ## uart_upgrade.c:173:16
  105830:    01 f3 0f 00       	if ((r0 & 0x2) == 0) goto 0x1e <uart_recv_loader+0xE6 : 105852 >			  ## uart_upgrade.c:173:16
  105834:    82 68             	r2 = b[r4 + 0x8] (u)			  ## uart_upgrade.c:174:34
  105836:    73 68             	r3 = b[r4 + 0x7] (u)			  ## uart_upgrade.c:174:34
  105838:    65 68             	r5 = b[r4 + 0x6] (u)			  ## uart_upgrade.c:174:34
  10583a:    50 68             	r0 = b[r4 + 0x5] (u)			  ## uart_upgrade.c:174:34
  10583c:    a6 68             	r6 = b[r4 + 0xa] (u)			  ## uart_upgrade.c:174:9
  10583e:    91 68             	r1 = b[r4 + 0x9] (u)			  ## uart_upgrade.c:174:9
  105840:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:174:34
  105844:    c8 fd 40 05       	r0 <= insert(r5, p:0x8, l:0x8)			  ## uart_upgrade.c:174:34
  105848:    d0 fd 80 03       	r0 <= insert(r3, p:0x10, l:0x10)			  ## uart_upgrade.c:174:34
  10584c:    c8 fd 40 16       	r1 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:174:9
  105850:    6a 17             	call -0x12c <CrcDecode : 105726 >			  ## uart_upgrade.c:174:9
  105852:    80 68             	r0 = b[r4 + 0x8] (u)			  ## uart_upgrade.c:177:30
  105854:    71 68             	r1 = b[r4 + 0x7] (u)			  ## uart_upgrade.c:177:30
  105856:    62 68             	r2 = b[r4 + 0x6] (u)			  ## uart_upgrade.c:177:30
  105858:    53 68             	r3 = b[r4 + 0x5] (u)			  ## uart_upgrade.c:177:30
  10585a:    c8 fd 40 10       	r1 <= insert(r0, p:0x8, l:0x8)			  ## uart_upgrade.c:177:30
  10585e:    c8 fd 40 32       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:177:30
  105862:    d0 fd 80 31       	r3 <= insert(r1, p:0x10, l:0x10)			  ## uart_upgrade.c:177:30
  105866:    40 08             	r0 = r4			  ## uart_upgrade.c:177:5
  105868:    83 00             	call r3			  ## uart_upgrade.c:177:5
  10586a:    bf f3 cc d5       	call -0x5468 <chip_reset : 100406 >			  ## uart_upgrade.c:180:5


uart_upgrade_init:
  10586e:    76 01             	[--sp] = {rets, r6-r4}			  ## uart_upgrade.c:207:0
  105870:    c1 ff 08 59 1e 00 	r1 = 0x1e5908 <__stub_uECC_vli_cmp_unsafe+0xDE90C : 1e5908 >			  ## uart_upgrade.c:207:0
  105876:    05 f4 01 19       	[r1 + 0x14] |= 0x1			  ## uart_upgrade.c:210:43
  10587a:    02 f4 01 19       	[r1 + 0x8] |= 0x1			  ## uart_upgrade.c:211:43
  10587e:    32 42             	r2 = [r1 + 0xc]			  ## uart_upgrade.c:212:43
  105880:    72 b0             	r2 &= 0xfffffffe			  ## uart_upgrade.c:212:43
  105882:    3a 42             	[r1 + 0xc] = r2			  ## uart_upgrade.c:212:43
  105884:    00 f4 01 19       	[r1 + 0x0] |= 0x1			  ## uart_upgrade.c:213:43
  105888:    11 fc 9c fe       	r1 = r1 + -0x164			  ## uart_upgrade.c:214:26
  10588c:    c0 f4 1e 19       	[r1 + 0x0] = 0x1e			  ## uart_upgrade.c:214:26
  105890:    11 fc 70 a8       	r1 = r1 + -0x5790			  ## uart_upgrade.c:214:26
  105894:    02 42             	r2 = [r1 + 0x0]			  ## uart_upgrade.c:217:24
  105896:    32 fd 0c 2a       	r2 = r2 & 0xfffff3ff			  ## uart_upgrade.c:217:24
  10589a:    0a 42             	[r1 + 0x0] = r2			  ## uart_upgrade.c:217:24
  10589c:    00 f4 04 1a       	[r1 + 0x0] |= 0x400			  ## uart_upgrade.c:218:24
  1058a0:    20 fb 71 64       	r6 = 0x1e2000			  ## uart_upgrade.c:218:24
  1058a4:    c0 f4 34 6a       	[r6 + 0x0] = 0x3400			  ## uart_upgrade.c:220:16
  1058a8:    05 08             	r5 = r0			  ## uart_upgrade.c:220:16
  1058aa:    c4 ff 1d 6d 10 00 	r4 = 0x106d1d <ack_cmd+0x4 : 106d1c >
  1058b0:    40 08             	r0 = r4			  ## uart_upgrade.c:222:19
  1058b2:    e1 15             	call -0x43e <clk_get : 105476 >			  ## uart_upgrade.c:222:19
  1058b4:    20 fb 96 1a       	r1 = 0x9600			  ## uart_upgrade.c:222:36
  1058b8:    c0 fe 10 00       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:222:36
  1058bc:    f0 8f             	r0 += -0x1			  ## uart_upgrade.c:222:40
  1058be:    28 4c             	[r6 + 0x8] = r0			  ## uart_upgrade.c:222:16
  1058c0:    c0 f4 43 69       	[r6 + 0x0] = 0x43			  ## uart_upgrade.c:224:16
  1058c4:    00 f4 34 6a       	[r6 + 0x0] |= 0x3400			  ## uart_upgrade.c:225:16
  1058c8:    1e 2a             	if (r5 == 0x0) goto 0x3c <uart_upgrade_init+0x98 : 105906 >			  ## uart_upgrade.c:225:16
  1058ca:    c1 ff ee 65 10 00 	r1 = 0x1065ee <uart_isr : 1065ee >			  ## uart_upgrade.c:234:9
  1058d0:    20 71             	r0 = 0x12			  ## uart_upgrade.c:234:9
  1058d2:    32 70             	r2 = 0x3			  ## uart_upgrade.c:234:9
  1058d4:    52 14             	call -0x75c <HWI_Install : 10517a >			  ## uart_upgrade.c:234:9
  1058d6:    40 08             	r0 = r4			  ## uart_upgrade.c:236:28
  1058d8:    ce 15             	call -0x464 <clk_get : 105476 >			  ## uart_upgrade.c:236:28
  1058da:    01 fb e8 03       	r1 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >			  ## uart_upgrade.c:236:37
  1058de:    c0 fe 10 00       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:236:37
  1058e2:    00 fe 05 09       	r0 = r0 * 0x5			  ## uart_upgrade.c:236:25
  1058e6:    48 4c             	[r6 + 0x10] = r0			  ## uart_upgrade.c:236:21
  1058e8:    10 70             	r0 = 0x1			  ## uart_upgrade.c:238:9
  1058ea:    c2 16             	call -0x27c <uart_set_dma_dir : 105670 >			  ## uart_upgrade.c:238:9
  1058ec:    00 f4 20 69       	[r6 + 0x0] |= 0x20			  ## uart_upgrade.c:240:20
  1058f0:    c0 ff 80 13 00 00 	r0 = 0x1380 <uart_dma_buffer : 1380 >			  ## uart_upgrade.c:110:18
  1058f6:    78 4c             	[r6 + 0x1c] = r0			  ## uart_upgrade.c:109:18
  1058f8:    30 84             	r0 += 0x43			  ## uart_upgrade.c:110:18
  1058fa:    30 fd 03 09       	r0 = r0 & 0xfffffffc			  ## uart_upgrade.c:110:18
  1058fe:    88 4c             	[r6 + 0x20] = r0			  ## uart_upgrade.c:110:18
  105900:    c9 f4 40 69       	[r6 + 0x24] = 0x40			  ## uart_upgrade.c:111:17
  105904:    56 01             	{pc, r6-r4} = [sp++]			  ## uart_upgrade.c:265:1
  105906:    c0 ff 40 13 00 00 	r0 = 0x1340 <ut_cmd : 1340 >			  ## uart_upgrade.c:251:5
  10590c:    51 71             	r1 = 0x15			  ## uart_upgrade.c:251:5
  10590e:    d2 16             	call -0x25c <uart_rx_data : 1056b4 >			  ## uart_upgrade.c:251:5
  105910:    f6 16             	call -0x214 <uart_cmd_verify : 1056fe >			  ## uart_upgrade.c:253:9
  105912:    02 30             	if (r0 != 0x0) goto 0x4 <uart_upgrade_init+0xAA : 105918 >			  ## uart_upgrade.c:253:9
  105914:    bf f3 77 d5       	call -0x5512 <chip_reset : 100406 >			  ## uart_upgrade.c:264:5
  105918:    29 17             	call -0x1ae <uart_recv_loader : 10576c >			  ## uart_upgrade.c:262:5


set_timer3_captrue_dp_disable:
  10591a:    c1 ff 00 07 1e 00 	r1 = 0x1e0700 <__stub_uECC_vli_cmp_unsafe+0xD9704 : 1e0700 >			  ## clock.c:320:0
  105920:    c0 f4 40 1a       	[r1 + 0x0] = 0x4000			  ## clock.c:322:20
  105924:    05 20             	if (r0 == 0x0) goto 0xa <set_timer3_captrue_dp_disable+0x16 : 105930 >			  ## clock.c:322:20
  105926:    10 fc 00 4d       	r0 = r1 + 0x4d00
  10592a:    01 40             	r1 = [r0 + 0x0]			  ## clock.c:324:9
  10592c:    71 b2             	r1 &= 0xffffffef			  ## clock.c:324:9
  10592e:    09 40             	[r0 + 0x0] = r1			  ## clock.c:324:9
  105930:    20 00             	rts			  ## clock.c:326:1


check_usb_sof:
  105932:    7d 01             	[--sp] = {rets, r13-r4}			  ## clock.c:329:0
  105934:    c6 ff c0 13 00 00 	r6 = 0x13c0 <var_bss_begin : 13c0 >			  ## clock.c:329:0
  10593a:    07 70             	r7 = 0x0			  ## clock.c:329:0
  10593c:    c8 ff f6 63 10 00 	r8 = 0x1063f6 <tmr3_isr : 1063f6 >			  ## clock.c:329:0
  105942:    c4 ff 00 07 1e 00 	r4 = 0x1e0700 <__stub_uECC_vli_cmp_unsafe+0xD9704 : 1e0700 >			  ## clock.c:329:0
  105948:    09 fb 12 04       	r9 = 0x412 <TLB_SIZE+0x12 : 412 >			  ## clock.c:329:0
  10594c:    ca ff 10 6d 10 00 	r10 = 0x106d10 <nvram_boot_tag+0xC : 106d10 >			  ## clock.c:329:0
  105952:    0b fb a0 0f       	r11 = 0xfa0 <_stack+0x380 : fa0 >			  ## clock.c:329:0
  105956:    45 fc 00 ff       	r5 = r4 + -0x100			  ## clock.c:329:0
  10595a:    0c fb 11 40       	r12 = 0x4011 <os_code_size+0x1F7B : 4010 >			  ## clock.c:329:0
  10595e:    0d 08             	r13 = r0			  ## clock.c:329:0
  105960:    80 16             	call -0x300 <wdt_clr : 105662 >			  ## clock.c:333:9
  105962:    8f 4c             	[r6 + 0x20] = r7			  ## clock.c:338:25
  105964:    cf 4c             	[r6 + 0x30] = r7			  ## clock.c:339:22
  105966:    9f 4c             	[r6 + 0x24] = r7			  ## clock.c:340:18
  105968:    af 4c             	[r6 + 0x28] = r7			  ## clock.c:341:18
  10596a:    bf 4c             	[r6 + 0x2c] = r7			  ## clock.c:342:19
  10596c:    70 70             	r0 = 0x7			  ## clock.c:350:9
  10596e:    02 70             	r2 = 0x0			  ## clock.c:350:9
  105970:    81 08             	r1 = r8			  ## clock.c:350:9
  105972:    03 14             	call -0x7fa <HWI_Install : 10517a >			  ## clock.c:350:9
  105974:    10 70             	r0 = 0x1			  ## clock.c:351:9
  105976:    3c 16             	call -0x388 <set_timer3_captrue_dp : 1055f0 >			  ## clock.c:351:9
  105978:    2f 48             	[r4 + 0x8] = r7			  ## clock.c:353:24
  10597a:    1f 48             	[r4 + 0x4] = r7			  ## clock.c:354:24
  10597c:    19 f6 00 40       	[r4 + 0x0] = r9			  ## clock.c:355:24
  105980:    a0 08             	r0 = r10			  ## clock.c:357:26
  105982:    79 15             	call -0x50e <clk_get : 105476 >			  ## clock.c:357:26
  105984:    c0 fe b0 00       	r0 = r0 / r11 (u)			  ## clock.c:357:45
  105988:    28 4a             	[r5 + 0x8] = r0			  ## clock.c:357:24
  10598a:    1f 4a             	[r5 + 0x4] = r7			  ## clock.c:358:24
  10598c:    1c f6 00 50       	[r5 + 0x0] = r12			  ## clock.c:359:24
  105990:    00 fb e8 03       	r0 = 0x3e8 <ROM_RAM_SIZE+0xC8 : 3e8 >
  105994:    21 04             	r1 = r0.l (u)			  ## clock.c:368:9
  105996:    0a 22             	if (r1 == 0x0) goto 0x14 <check_usb_sof+0x7A : 1059ac >			  ## clock.c:368:9
  105998:    00 f4 40 5a       	[r5 + 0x0] |= 0x4000			  ## clock.c:369:28
  10599c:    f0 8f             	r0 += -0x1			  ## clock.c:368:23
  10599e:    01 4a             	r1 = [r5 + 0x0]			  ## clock.c:371:32
  1059a0:    71 04             	r1 = r1.l (s)			  ## clock.c:371:47
  1059a2:    01 e0 f7 bf       	ifs (r1 < 0x0) goto -0x12 <check_usb_sof+0x62 : 105994 >			  ## clock.c:371:47
  1059a6:    c1 4c             	r1 = [r6 + 0x30]			  ## clock.c:372:21
  1059a8:    fa 23             	if (r1 == 0x0) goto -0xc <check_usb_sof+0x6C : 10599e >			  ## clock.c:372:21
  1059aa:    0b 18             	goto 0x16 <check_usb_sof+0x90 : 1059c2 >			  ## clock.c:372:21
  1059ac:    10 70             	r0 = 0x1			  ## clock.c:381:9
  1059ae:    b5 17             	call -0x96 <set_timer3_captrue_dp_disable : 10591a >			  ## clock.c:381:9
  1059b0:    80 7c             	r0 = 0xc8			  ## clock.c:383:9
  1059b2:    23 14             	call -0x7ba <mdelay : 1051fa >			  ## clock.c:383:9
  1059b4:    d0 fc ff ff       	r0 = r13 + -0x1			  ## clock.c:393:19
  1059b8:    61 ff ff d9 d0 ff 	if ((r13 & 0xff) != 0) goto -0x60 <check_usb_sof+0x2C : 10595e >			  ## clock.c:393:19
  1059be:    02 70             	r2 = 0x0
  1059c0:    03 18             	goto 0x6 <check_usb_sof+0x96 : 1059c8 >
  1059c2:    c0 f4 40 5a       	[r5 + 0x0] = 0x4000			  ## clock.c:373:36
  1059c6:    12 70             	r2 = 0x1			  ## clock.c:373:36
  1059c8:    10 70             	r0 = 0x1			  ## clock.c:404:5
  1059ca:    a7 17             	call -0xb2 <set_timer3_captrue_dp_disable : 10591a >			  ## clock.c:404:5
  1059cc:    20 08             	r0 = r2			  ## clock.c:406:1
  1059ce:    5d 01             	{pc, r13-r4} = [sp++]			  ## clock.c:406:1


spi_port_io_init:
  1059d0:    c0 ff 00 53 1e 00 	r0 = 0x1e5300 <__stub_uECC_vli_cmp_unsafe+0xDE304 : 1e5300 >			  ## spi0.c:11:0
  1059d6:    00 f4 08 09       	[r0 + 0x0] |= 0x8			  ## spi0.c:13:34
  1059da:    21 40             	r1 = [r0 + 0x8]			  ## spi0.c:14:34
  1059dc:    f1 b1             	r1 &= 0xfffffff7			  ## spi0.c:14:34
  1059de:    29 40             	[r0 + 0x8] = r1			  ## spi0.c:14:34
  1059e0:    41 40             	r1 = [r0 + 0x10]			  ## spi0.c:15:34
  1059e2:    f1 b1             	r1 &= 0xfffffff7			  ## spi0.c:15:34
  1059e4:    49 40             	[r0 + 0x10] = r1			  ## spi0.c:15:34
  1059e6:    51 40             	r1 = [r0 + 0x14]			  ## spi0.c:16:34
  1059e8:    f1 b1             	r1 &= 0xfffffff7			  ## spi0.c:16:34
  1059ea:    59 40             	[r0 + 0x14] = r1			  ## spi0.c:16:34
  1059ec:    41 40             	r1 = [r0 + 0x10]			  ## spi0.c:19:35
  1059ee:    71 b0             	r1 &= 0xfffffffe			  ## spi0.c:19:35
  1059f0:    49 40             	[r0 + 0x10] = r1			  ## spi0.c:19:35
  1059f2:    51 40             	r1 = [r0 + 0x14]			  ## spi0.c:20:35
  1059f4:    71 b0             	r1 &= 0xfffffffe			  ## spi0.c:20:35
  1059f6:    59 40             	[r0 + 0x14] = r1			  ## spi0.c:20:35
  1059f8:    21 40             	r1 = [r0 + 0x8]			  ## spi0.c:21:35
  1059fa:    71 b0             	r1 &= 0xfffffffe			  ## spi0.c:21:35
  1059fc:    29 40             	[r0 + 0x8] = r1			  ## spi0.c:21:35
  1059fe:    01 fc 50 03       	r1 = r0 + 0x350			  ## spi0.c:21:35
  105a02:    c0 f4 43 19       	[r1 + 0x0] = 0x43			  ## spi0.c:22:46
  105a06:    04 f4 02 09       	[r0 + 0x10] |= 0x2			  ## spi0.c:25:34
  105a0a:    52 40             	r2 = [r0 + 0x14]			  ## spi0.c:26:34
  105a0c:    f2 b0             	r2 &= 0xfffffffd			  ## spi0.c:26:34
  105a0e:    5a 40             	[r0 + 0x14] = r2			  ## spi0.c:26:34
  105a10:    02 f4 02 09       	[r0 + 0x8] |= 0x2			  ## spi0.c:27:34
  105a14:    c1 f4 47 19       	[r1 + 0x4] = 0x47			  ## spi0.c:28:44
  105a18:    62 71             	r2 = 0x16			  ## spi0.c:29:26
  105a1a:    12 f6 44 04       	[r0 + 0x444] = r2			  ## spi0.c:29:26
  105a1e:    04 f4 04 09       	[r0 + 0x10] |= 0x4			  ## spi0.c:32:34
  105a22:    52 40             	r2 = [r0 + 0x14]			  ## spi0.c:33:34
  105a24:    72 b1             	r2 &= 0xfffffffb			  ## spi0.c:33:34
  105a26:    5a 40             	[r0 + 0x14] = r2			  ## spi0.c:33:34
  105a28:    02 f4 04 09       	[r0 + 0x8] |= 0x4			  ## spi0.c:34:34
  105a2c:    c2 f4 4b 19       	[r1 + 0x8] = 0x4b			  ## spi0.c:35:44
  105a30:    71 71             	r1 = 0x17			  ## spi0.c:36:26
  105a32:    11 f6 48 04       	[r0 + 0x448] = r1			  ## spi0.c:36:26
  105a36:    20 00             	rts			  ## spi0.c:37:1


SPI0_cs:
  105a38:    c1 ff 00 53 1e 00 	r1 = 0x1e5300 <__stub_uECC_vli_cmp_unsafe+0xDE304 : 1e5300 >			  ## spi0.c:70:0
  105a3e:    02 42             	r2 = [r1 + 0x0]			  ## spi0.c:70:0
  105a40:    33 fd 08 29       	r3 = r2 & 0xfffffff7			  ## spi0.c:74:38
  105a44:    92 b1             	r2 |= 0x8			  ## spi0.c:72:38
  105a46:    01 30             	if (r0 != 0x0) goto 0x2 <SPI0_cs+0x12 : 105a4a >			  ## spi0.c:72:38
  105a48:    32 08             	r2 = r3			  ## spi0.c:71:9
  105a4a:    0a 42             	[r1 + 0x0] = r2
  105a4c:    20 42             	r0 = [r1 + 0x8]			  ## spi0.c:76:34
  105a4e:    f0 b1             	r0 &= 0xfffffff7			  ## spi0.c:76:34
  105a50:    28 42             	[r1 + 0x8] = r0			  ## spi0.c:76:34
  105a52:    20 00             	rts			  ## spi0.c:77:1


spi0_wait_ok:
  105a54:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## spi0.c:110:0
  105a5a:    01 40             	r1 = [r0 + 0x0]			  ## spi0.c:111:23
  105a5c:    71 04             	r1 = r1.l (s)			  ## spi0.c:111:12
  105a5e:    f1 ef fc cf       	ifs (r1 > -0x1) goto -0x8 <spi0_wait_ok+0x6 : 105a5a >			  ## spi0.c:111:5
  105a62:    00 f4 40 0a       	[r0 + 0x0] |= 0x4000			  ## spi0.c:113:18
  105a66:    20 00             	rts			  ## spi0.c:113:18


SPI0_WriteByte:
  105a68:    c1 ff 00 1c 1e 00 	r1 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## spi0.c:133:0
  105a6e:    02 42             	r2 = [r1 + 0x0]			  ## spi0.c:134:18
  105a70:    72 b6             	r2 &= 0xffffefff			  ## spi0.c:134:18
  105a72:    0a 42             	[r1 + 0x0] = r2			  ## spi0.c:134:18
  105a74:    28 42             	[r1 + 0x8] = r0			  ## spi0.c:135:18
  105a76:    ee 1f             	goto -0x24 <spi0_wait_ok : 105a54 >			  ## spi0.c:136:5


SPI0_ReadByte:
  105a78:    34 00             	[--sp] = rets			  ## spi0.c:153:0
  105a7a:    c2 ff 00 1c 1e 00 	r2 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## spi0.c:153:0
  105a80:    00 f4 10 2a       	[r2 + 0x0] |= 0x1000			  ## spi0.c:155:18
  105a84:    a0 70             	r0 = 0xa			  ## spi0.c:156:5
  105a86:    bf f3 99 fb       	call -0x8ce <udelay : 1051bc >			  ## spi0.c:156:5
  105a8a:    c2 f4 ff 29       	[r2 + 0x8] = 0xff			  ## spi0.c:157:18
  105a8e:    e2 17             	call -0x3c <spi0_wait_ok : 105a54 >			  ## spi0.c:158:5
  105a90:    20 44             	r0 = [r2 + 0x8]			  ## spi0.c:159:25
  105a92:    00 04             	r0 = r0.b0 (u)			  ## spi0.c:161:5
  105a94:    30 00             	pc = [sp++]			  ## spi0.c:161:5


LZ4_decompress_safe_continue:
  105a96:    7f 01             	[--sp] = {rets, r15-r4}			  ## lz4.c:677:0
  105a98:    f4 0b             	sp += -0x18			  ## lz4.c:677:0
  105a9a:    09 08             	r9 = r0			  ## lz4.c:677:0
  105a9c:    0c f6 0c 00       	r12 = [r0 + 0xc]			  ## lz4.c:677:0
  105aa0:    24 40             	r4 = [r0 + 0x8]			  ## lz4.c:681:16
  105aa2:    30 03             	r0 = [sp+76]			  ## lz4.c:681:16
  105aa4:    2b 08             	r11 = r2			  ## lz4.c:681:16
  105aa6:    59 02             	[sp+20] = r1			  ## lz4.c:681:9
  105aa8:    24 f2 cf 00       	if (r4 == r2) goto 0x19e <LZ4_decompress_safe_continue+0x1B4 : 105c4a >			  ## lz4.c:681:9
  105aac:    1c f6 04 90       	[r9 + 0x4] = r12			  ## lz4.c:691:28
  105ab0:    90 fb c0 24       	r2 = r4 - r12			  ## lz4.c:692:48
  105ab4:    12 f6 00 90       	[r9 + 0x0] = r2			  ## lz4.c:692:29
  105ab8:    00 e0 af 01       	if (r0 == 0x0) goto 0x35e <LZ4_decompress_safe_continue+0x384 : 105e1a >
  105abc:    4c 02             	[sp+16] = r4
  105abe:    c2 b2             	r2 = r1 + r3			  ## lz4.c:440:33
  105ac0:    b0 09             	r0 += r11			  ## lz4.c:443:27
  105ac2:    0a fc f4 ff       	r10 = r0 + -0xc			  ## lz4.c:456:44
  105ac6:    2f fc f1 ff       	r15 = r2 + -0xf
  105aca:    2e fc fb ff       	r14 = r2 + -0x5
  105ace:    18 02             	[sp+4] = r0
  105ad0:    08 fc fb ff       	r8 = r0 + -0x5
  105ad4:    0a 02             	[sp] = r2
  105ad6:    2d fc f8 ff       	r13 = r2 + -0x8
  105ada:    b4 08             	r4 = r11
  105adc:    15 08             	r5 = r1
  105ade:    1c f5 0c 00       	[sp+12] = r12
  105ae2:    88 18             	goto 0x110 <LZ4_decompress_safe_continue+0x15E : 105bf4 >
  105ae4:    d3 f2 a4 80       	if (r3 > r13) goto 0x148 <LZ4_decompress_safe_continue+0x19A : 105c30 >
  105ae8:    01 70             	r1 = 0x0
  105aea:    05 18             	goto 0xa <LZ4_decompress_safe_continue+0x60 : 105af6 >
  105aec:    06 fa 00 51       	r6 = b[r5+r1] (u)			  ## lz4.c:317:16
  105af0:    16 fa 00 41       	b[r4+r1] = r6			  ## lz4.c:317:14
  105af4:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  105af6:    21 f2 f9 bf       	ifs (r1 < r2) goto -0xe <LZ4_decompress_safe_continue+0x56 : 105aec >
  105afa:    12 66             	r2 = b[r3 + 0x1] (u)			  ## lz4.c:517:18
  105afc:    81 f9 02 30       	r1 = b[r3 ++= 0x2] (u)			  ## lz4.c:517:18
  105b00:    c8 fd 40 12       	r1 <= insert(r2, p:0x8, l:0x8)			  ## lz4.c:517:18
  105b04:    f2 fd 80 4c       	r4 = r12 >> 0x10			  ## lz4.c:520:27
  105b08:    62 be             	r2 = r7 - r1			  ## lz4.c:519:20
  105b0a:    04 38             	if (r4 != 0x0) goto 0x8 <LZ4_decompress_safe_continue+0x7E : 105b14 >
  105b0c:    80 fb c0 42       	r4 = r2 + r12			  ## lz4.c:520:31
  105b10:    b4 f2 66 31       	if (r4 < r11) goto 0x2cc <LZ4_decompress_safe_continue+0x34A : 105de0 >			  ## lz4.c:520:31
  105b14:    04 70             	r4 = 0x0
  105b16:    3c 6e             	b[r7 + 0x3] = r4			  ## lz4.c:234:30
  105b18:    2c 6e             	b[r7 + 0x2] = r4			  ## lz4.c:234:30
  105b1a:    09 6e             	b[r7 + 0x0] = r1			  ## lz4.c:234:30
  105b1c:    0c d2             	r4 = r1 >> 0x8			  ## lz4.c:234:30
  105b1e:    20 fd 0f 09       	r0 = r0 & 0xf			  ## lz4.c:526:24
  105b22:    1c 6e             	b[r7 + 0x1] = r4			  ## lz4.c:234:30
  105b24:    f0 e0 11 10       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_continue+0xB4 : 105b4a >			  ## lz4.c:234:30
  105b28:    f0 70             	r0 = 0xf
  105b2a:    15 96             	r5 = r3 + 0x1			  ## lz4.c:530:24
  105b2c:    e5 f2 59 81       	if (r5 > r14) goto 0x2b2 <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105b30:    04 66             	r4 = b[r3 + 0x0] (u)			  ## lz4.c:530:21
  105b32:    40 09             	r0 += r4			  ## lz4.c:534:24
  105b34:    53 08             	r3 = r5
  105b36:    00 ff ff 40 f7 ff 	if (r4 == 0xff) goto -0x12 <LZ4_decompress_safe_continue+0x94 : 105b2a >
  105b3c:    c4 b1             	r4 = r0 + r7
  105b3e:    13 70             	r3 = 0x1
  105b40:    04 f2 01 30       	if (r4 < r0) goto 0x2 <LZ4_decompress_safe_continue+0xB0 : 105b46 >
  105b44:    03 70             	r3 = 0x0
  105b46:    02 26             	if (r3 == 0x0) goto 0x4 <LZ4_decompress_safe_continue+0xB6 : 105b4c >
  105b48:    4c 19             	goto 0x298 <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105b4a:    35 08             	r5 = r3
  105b4c:    46 90             	r6 = r0 + 0x4			  ## lz4.c:540:16
  105b4e:    84 bf             	r4 = r7 + r6
  105b50:    b2 f2 2c a0       	ifs (r2 >= r11) goto 0x58 <LZ4_decompress_safe_continue+0x116 : 105bac >			  ## lz4.c:543:13
  105b54:    84 f2 45 81       	if (r4 > r8) goto 0x28a <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105b58:    bc 08             	r12 = r11
  105b5a:    9b 08             	r11 = r9
  105b5c:    d9 08             	r9 = r13
  105b5e:    8d 08             	r13 = r8
  105b60:    a8 08             	r8 = r10
  105b62:    90 fb 20 ac       	r10 = r12 - r2			  ## lz4.c:549:46
  105b66:    a6 f2 30 90       	if (r6 <= r10) goto 0x60 <LZ4_decompress_safe_continue+0x134 : 105bca >
  105b6a:    40 02             	r0 = [sp+16]			  ## lz4.c:557:36
  105b6c:    90 fb a0 10       	r1 = r0 - r10			  ## lz4.c:557:36
  105b70:    70 08             	r0 = r7			  ## lz4.c:557:17
  105b72:    a2 08             	r2 = r10			  ## lz4.c:557:17
  105b74:    bf f3 64 d2       	call -0x5b38 <memmove : 100040 >			  ## lz4.c:557:17
  105b78:    90 fb a0 66       	r6 = r6 - r10			  ## lz4.c:556:48
  105b7c:    80 fb a0 47       	r4 = r7 + r10			  ## lz4.c:558:20
  105b80:    90 fb c0 04       	r0 = r4 - r12			  ## lz4.c:559:44
  105b84:    06 f2 29 90       	if (r6 <= r0) goto 0x52 <LZ4_decompress_safe_continue+0x144 : 105bda >			  ## lz4.c:559:21
  105b88:    80 b9             	r0 = r4 + r6			  ## lz4.c:560:49
  105b8a:    c3 08             	r3 = r12
  105b8c:    c1 08             	r1 = r12
  105b8e:    8a 08             	r10 = r8
  105b90:    d8 08             	r8 = r13
  105b92:    9d 08             	r13 = r9
  105b94:    b9 08             	r9 = r11
  105b96:    0c f5 0c 00       	r12 = [sp+12]
  105b9a:    04 18             	goto 0x8 <LZ4_decompress_safe_continue+0x10E : 105ba4 >
  105b9c:    82 f9 01 10       	r2 = b[r1 ++= 0x1] (u)			  ## lz4.c:563:33
  105ba0:    92 f9 01 40       	b[r4 ++= 0x1] = r2			  ## lz4.c:563:31
  105ba4:    04 f2 fa 3f       	if (r4 < r0) goto -0xc <LZ4_decompress_safe_continue+0x106 : 105b9c >
  105ba8:    3b 08             	r11 = r3
  105baa:    24 18             	goto 0x48 <LZ4_decompress_safe_continue+0x15E : 105bf4 >
  105bac:    84 f2 19 81       	if (r4 > r8) goto 0x232 <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105bb0:    60 fb 00 19       	r0 = 0x0 - r1			  ## lz4.c:519:20
  105bb4:    01 70             	r1 = 0x0			  ## lz4.c:519:20
  105bb6:    06 18             	goto 0xc <LZ4_decompress_safe_continue+0x12E : 105bc4 >			  ## lz4.c:519:20
  105bb8:    42 b0             	r2 = r0 + r1			  ## lz4.c:317:16
  105bba:    02 fa 00 72       	r2 = b[r7+r2] (u)			  ## lz4.c:317:16
  105bbe:    12 fa 00 71       	b[r7+r1] = r2			  ## lz4.c:317:14
  105bc2:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  105bc4:    61 f2 f8 bf       	ifs (r1 < r6) goto -0x10 <LZ4_decompress_safe_continue+0x122 : 105bb8 >
  105bc8:    15 18             	goto 0x2a <LZ4_decompress_safe_continue+0x15E : 105bf4 >
  105bca:    40 02             	r0 = [sp+16]			  ## lz4.c:551:37
  105bcc:    90 fb a0 10       	r1 = r0 - r10			  ## lz4.c:551:37
  105bd0:    70 08             	r0 = r7			  ## lz4.c:551:17
  105bd2:    62 08             	r2 = r6			  ## lz4.c:551:17
  105bd4:    bf f3 34 d2       	call -0x5b98 <memmove : 100040 >			  ## lz4.c:551:17
  105bd8:    06 18             	goto 0xc <LZ4_decompress_safe_continue+0x150 : 105be6 >			  ## lz4.c:551:17
  105bda:    40 08             	r0 = r4			  ## lz4.c:566:21
  105bdc:    c1 08             	r1 = r12			  ## lz4.c:566:21
  105bde:    62 08             	r2 = r6			  ## lz4.c:566:21
  105be0:    bf f3 2e d2       	call -0x5ba4 <memmove : 100040 >			  ## lz4.c:566:21
  105be4:    64 09             	r4 += r6			  ## lz4.c:567:24
  105be6:    8a 08             	r10 = r8
  105be8:    d8 08             	r8 = r13
  105bea:    9d 08             	r13 = r9
  105bec:    b9 08             	r9 = r11
  105bee:    cb 08             	r11 = r12
  105bf0:    0c f5 0c 00       	r12 = [sp+12]
  105bf4:    00 6a             	r0 = b[r5 + 0x0] (u)			  ## lz4.c:473:32
  105bf6:    02 d1             	r2 = r0 >> 0x4			  ## lz4.c:474:30
  105bf8:    15 80             	r5 += 0x1			  ## lz4.c:473:35
  105bfa:    f2 e0 15 10       	if (r2 != 0xf) goto 0x2a <LZ4_decompress_safe_continue+0x192 : 105c28 >
  105bfe:    f2 70             	r2 = 0xf
  105c00:    81 f9 01 50       	r1 = b[r5 ++= 0x1] (u)			  ## lz4.c:477:21
  105c04:    12 09             	r2 += r1			  ## lz4.c:478:24
  105c06:    01 ff ff 10 02 00 	if (r1 != 0xff) goto 0x4 <LZ4_decompress_safe_continue+0x17A : 105c10 >
  105c0c:    f5 f2 f8 3f       	if (r5 < r15) goto -0x10 <LZ4_decompress_safe_continue+0x16A : 105c00 >
  105c10:    03 b5             	r3 = r2 + r4
  105c12:    11 70             	r1 = 0x1
  105c14:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_continue+0x184 : 105c1a >
  105c18:    01 70             	r1 = 0x0
  105c1a:    e3 32             	if (r1 != 0x0) goto 0x1c6 <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105c1c:    43 b5             	r3 = r2 + r5
  105c1e:    11 70             	r1 = 0x1
  105c20:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_continue+0x190 : 105c26 >
  105c24:    01 70             	r1 = 0x0
  105c26:    dd 32             	if (r1 != 0x0) goto 0x1ba <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105c28:    87 b8             	r7 = r4 + r2			  ## lz4.c:489:18
  105c2a:    83 ba             	r3 = r5 + r2			  ## lz4.c:490:89
  105c2c:    a7 f2 5a 9f       	if (r7 <= r10) goto -0x14c <LZ4_decompress_safe_continue+0x4E : 105ae4 >
  105c30:    10 02             	r0 = [sp+4]
  105c32:    07 f2 d6 80       	if (r7 > r0) goto 0x1ac <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105c36:    00 02             	r0 = [sp]
  105c38:    03 f2 d3 10       	if (r3 != r0) goto 0x1a6 <LZ4_decompress_safe_continue+0x34C : 105de2 >
  105c3c:    40 08             	r0 = r4			  ## lz4.c:507:13
  105c3e:    51 08             	r1 = r5			  ## lz4.c:507:13
  105c40:    bf f3 fe d1       	call -0x5c04 <memmove : 100040 >			  ## lz4.c:507:13
  105c44:    90 fb b0 07       	r0 = r7 - r11			  ## lz4.c:622:35
  105c48:    cf 18             	goto 0x19e <LZ4_decompress_safe_continue+0x352 : 105de8 >			  ## lz4.c:622:35
  105c4a:    e7 20             	if (r0 == 0x0) goto 0x1ce <LZ4_decompress_safe_continue+0x384 : 105e1a >
  105c4c:    0e f6 04 90       	r14 = [r9 + 0x4]			  ## lz4.c:684:121
  105c50:    02 f6 00 90       	r2 = [r9 + 0x0]			  ## lz4.c:684:100
  105c54:    13 09             	r3 += r1			  ## lz4.c:440:33
  105c56:    90 fb c0 ab       	r10 = r11 - r12			  ## lz4.c:684:72
  105c5a:    e2 09             	r2 += r14			  ## lz4.c:447:57
  105c5c:    3a 02             	[sp+12] = r2			  ## lz4.c:443:27
  105c5e:    b0 09             	r0 += r11			  ## lz4.c:443:27
  105c60:    0c fc f4 ff       	r12 = r0 + -0xc			  ## lz4.c:456:44
  105c64:    38 fc f1 ff       	r8 = r3 + -0xf
  105c68:    3d fc fb ff       	r13 = r3 + -0x5
  105c6c:    18 02             	[sp+4] = r0
  105c6e:    0f fc fb ff       	r15 = r0 + -0x5
  105c72:    0b 02             	[sp] = r3
  105c74:    30 fc f8 ff       	r0 = r3 + -0x8
  105c78:    48 02             	[sp+16] = r0
  105c7a:    b4 08             	r4 = r11
  105c7c:    15 08             	r5 = r1
  105c7e:    19 f5 08 00       	[sp+8] = r9
  105c82:    83 18             	goto 0x106 <LZ4_decompress_safe_continue+0x2F4 : 105d8a >
  105c84:    41 02             	r1 = [sp+16]
  105c86:    13 f2 9e 80       	if (r3 > r1) goto 0x13c <LZ4_decompress_safe_continue+0x330 : 105dc6 >
  105c8a:    01 70             	r1 = 0x0
  105c8c:    05 18             	goto 0xa <LZ4_decompress_safe_continue+0x202 : 105c98 >
  105c8e:    06 fa 00 51       	r6 = b[r5+r1] (u)			  ## lz4.c:317:16
  105c92:    16 fa 00 41       	b[r4+r1] = r6			  ## lz4.c:317:14
  105c96:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  105c98:    21 f2 f9 bf       	ifs (r1 < r2) goto -0xe <LZ4_decompress_safe_continue+0x1F8 : 105c8e >
  105c9c:    12 66             	r2 = b[r3 + 0x1] (u)			  ## lz4.c:517:18
  105c9e:    81 f9 02 30       	r1 = b[r3 ++= 0x2] (u)			  ## lz4.c:517:18
  105ca2:    c8 fd 40 12       	r1 <= insert(r2, p:0x8, l:0x8)			  ## lz4.c:517:18
  105ca6:    f2 fd 80 4e       	r4 = r14 >> 0x10			  ## lz4.c:520:27
  105caa:    62 be             	r2 = r7 - r1			  ## lz4.c:519:20
  105cac:    04 38             	if (r4 != 0x0) goto 0x8 <LZ4_decompress_safe_continue+0x220 : 105cb6 >
  105cae:    80 fb e0 42       	r4 = r2 + r14			  ## lz4.c:520:31
  105cb2:    a4 f2 a0 30       	if (r4 < r10) goto 0x140 <LZ4_decompress_safe_continue+0x360 : 105df6 >			  ## lz4.c:520:31
  105cb6:    04 70             	r4 = 0x0
  105cb8:    3c 6e             	b[r7 + 0x3] = r4			  ## lz4.c:234:30
  105cba:    2c 6e             	b[r7 + 0x2] = r4			  ## lz4.c:234:30
  105cbc:    09 6e             	b[r7 + 0x0] = r1			  ## lz4.c:234:30
  105cbe:    0c d2             	r4 = r1 >> 0x8			  ## lz4.c:234:30
  105cc0:    20 fd 0f 09       	r0 = r0 & 0xf			  ## lz4.c:526:24
  105cc4:    1c 6e             	b[r7 + 0x1] = r4			  ## lz4.c:234:30
  105cc6:    f0 e0 11 10       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_continue+0x256 : 105cec >			  ## lz4.c:234:30
  105cca:    f0 70             	r0 = 0xf
  105ccc:    15 96             	r5 = r3 + 0x1			  ## lz4.c:530:24
  105cce:    d5 f2 93 80       	if (r5 > r13) goto 0x126 <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105cd2:    04 66             	r4 = b[r3 + 0x0] (u)			  ## lz4.c:530:21
  105cd4:    40 09             	r0 += r4			  ## lz4.c:534:24
  105cd6:    53 08             	r3 = r5
  105cd8:    00 ff ff 40 f7 ff 	if (r4 == 0xff) goto -0x12 <LZ4_decompress_safe_continue+0x236 : 105ccc >
  105cde:    c4 b1             	r4 = r0 + r7
  105ce0:    13 70             	r3 = 0x1
  105ce2:    04 f2 01 30       	if (r4 < r0) goto 0x2 <LZ4_decompress_safe_continue+0x252 : 105ce8 >
  105ce6:    03 70             	r3 = 0x0
  105ce8:    02 26             	if (r3 == 0x0) goto 0x4 <LZ4_decompress_safe_continue+0x258 : 105cee >
  105cea:    86 18             	goto 0x10c <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105cec:    35 08             	r5 = r3
  105cee:    46 90             	r6 = r0 + 0x4			  ## lz4.c:540:16
  105cf0:    84 bf             	r4 = r7 + r6
  105cf2:    a2 f2 28 a0       	ifs (r2 >= r10) goto 0x50 <LZ4_decompress_safe_continue+0x2B0 : 105d46 >			  ## lz4.c:543:13
  105cf6:    f4 f2 7f 80       	if (r4 > r15) goto 0xfe <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105cfa:    e9 08             	r9 = r14
  105cfc:    fe 08             	r14 = r15
  105cfe:    cf 08             	r15 = r12
  105d00:    90 fb 20 ca       	r12 = r10 - r2			  ## lz4.c:549:46
  105d04:    c6 f2 2e 90       	if (r6 <= r12) goto 0x5c <LZ4_decompress_safe_continue+0x2CE : 105d64 >
  105d08:    30 02             	r0 = [sp+12]			  ## lz4.c:557:36
  105d0a:    90 fb c0 10       	r1 = r0 - r12			  ## lz4.c:557:36
  105d0e:    70 08             	r0 = r7			  ## lz4.c:557:17
  105d10:    c2 08             	r2 = r12			  ## lz4.c:557:17
  105d12:    bf f3 95 d1       	call -0x5cd6 <memmove : 100040 >			  ## lz4.c:557:17
  105d16:    90 fb c0 66       	r6 = r6 - r12			  ## lz4.c:556:48
  105d1a:    80 fb c0 47       	r4 = r7 + r12			  ## lz4.c:558:20
  105d1e:    90 fb a0 04       	r0 = r4 - r10			  ## lz4.c:559:44
  105d22:    06 f2 27 90       	if (r6 <= r0) goto 0x4e <LZ4_decompress_safe_continue+0x2DE : 105d74 >			  ## lz4.c:559:21
  105d26:    80 b9             	r0 = r4 + r6			  ## lz4.c:560:49
  105d28:    a3 08             	r3 = r10
  105d2a:    fc 08             	r12 = r15
  105d2c:    ef 08             	r15 = r14
  105d2e:    9e 08             	r14 = r9
  105d30:    09 f5 08 00       	r9 = [sp+8]
  105d34:    04 18             	goto 0x8 <LZ4_decompress_safe_continue+0x2A8 : 105d3e >
  105d36:    82 f9 01 a0       	r2 = b[r10 ++= 0x1] (u)			  ## lz4.c:563:33
  105d3a:    92 f9 01 40       	b[r4 ++= 0x1] = r2			  ## lz4.c:563:31
  105d3e:    04 f2 fa 3f       	if (r4 < r0) goto -0xc <LZ4_decompress_safe_continue+0x2A0 : 105d36 >
  105d42:    3a 08             	r10 = r3
  105d44:    22 18             	goto 0x44 <LZ4_decompress_safe_continue+0x2F4 : 105d8a >
  105d46:    f4 f2 57 80       	if (r4 > r15) goto 0xae <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105d4a:    60 fb 00 19       	r0 = 0x0 - r1			  ## lz4.c:519:20
  105d4e:    01 70             	r1 = 0x0			  ## lz4.c:519:20
  105d50:    06 18             	goto 0xc <LZ4_decompress_safe_continue+0x2C8 : 105d5e >			  ## lz4.c:519:20
  105d52:    42 b0             	r2 = r0 + r1			  ## lz4.c:317:16
  105d54:    02 fa 00 72       	r2 = b[r7+r2] (u)			  ## lz4.c:317:16
  105d58:    12 fa 00 71       	b[r7+r1] = r2			  ## lz4.c:317:14
  105d5c:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  105d5e:    61 f2 f8 bf       	ifs (r1 < r6) goto -0x10 <LZ4_decompress_safe_continue+0x2BC : 105d52 >
  105d62:    13 18             	goto 0x26 <LZ4_decompress_safe_continue+0x2F4 : 105d8a >
  105d64:    30 02             	r0 = [sp+12]			  ## lz4.c:551:37
  105d66:    90 fb c0 10       	r1 = r0 - r12			  ## lz4.c:551:37
  105d6a:    70 08             	r0 = r7			  ## lz4.c:551:17
  105d6c:    62 08             	r2 = r6			  ## lz4.c:551:17
  105d6e:    bf f3 67 d1       	call -0x5d32 <memmove : 100040 >			  ## lz4.c:551:17
  105d72:    06 18             	goto 0xc <LZ4_decompress_safe_continue+0x2EA : 105d80 >			  ## lz4.c:551:17
  105d74:    40 08             	r0 = r4			  ## lz4.c:566:21
  105d76:    a1 08             	r1 = r10			  ## lz4.c:566:21
  105d78:    62 08             	r2 = r6			  ## lz4.c:566:21
  105d7a:    bf f3 61 d1       	call -0x5d3e <memmove : 100040 >			  ## lz4.c:566:21
  105d7e:    64 09             	r4 += r6			  ## lz4.c:567:24
  105d80:    fc 08             	r12 = r15
  105d82:    ef 08             	r15 = r14
  105d84:    9e 08             	r14 = r9
  105d86:    09 f5 08 00       	r9 = [sp+8]
  105d8a:    00 6a             	r0 = b[r5 + 0x0] (u)			  ## lz4.c:473:32
  105d8c:    02 d1             	r2 = r0 >> 0x4			  ## lz4.c:474:30
  105d8e:    15 80             	r5 += 0x1			  ## lz4.c:473:35
  105d90:    f2 e0 15 10       	if (r2 != 0xf) goto 0x2a <LZ4_decompress_safe_continue+0x328 : 105dbe >
  105d94:    f2 70             	r2 = 0xf
  105d96:    81 f9 01 50       	r1 = b[r5 ++= 0x1] (u)			  ## lz4.c:477:21
  105d9a:    12 09             	r2 += r1			  ## lz4.c:478:24
  105d9c:    01 ff ff 10 02 00 	if (r1 != 0xff) goto 0x4 <LZ4_decompress_safe_continue+0x310 : 105da6 >
  105da2:    85 f2 f8 3f       	if (r5 < r8) goto -0x10 <LZ4_decompress_safe_continue+0x300 : 105d96 >
  105da6:    03 b5             	r3 = r2 + r4
  105da8:    11 70             	r1 = 0x1
  105daa:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_continue+0x31A : 105db0 >
  105dae:    01 70             	r1 = 0x0
  105db0:    23 32             	if (r1 != 0x0) goto 0x46 <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105db2:    43 b5             	r3 = r2 + r5
  105db4:    11 70             	r1 = 0x1
  105db6:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_continue+0x326 : 105dbc >
  105dba:    01 70             	r1 = 0x0
  105dbc:    1d 32             	if (r1 != 0x0) goto 0x3a <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105dbe:    87 b8             	r7 = r4 + r2			  ## lz4.c:489:18
  105dc0:    83 ba             	r3 = r5 + r2			  ## lz4.c:490:89
  105dc2:    c7 f2 5f 9f       	if (r7 <= r12) goto -0x142 <LZ4_decompress_safe_continue+0x1EE : 105c84 >
  105dc6:    10 02             	r0 = [sp+4]
  105dc8:    07 f2 16 80       	if (r7 > r0) goto 0x2c <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105dcc:    00 02             	r0 = [sp]
  105dce:    03 f2 13 10       	if (r3 != r0) goto 0x26 <LZ4_decompress_safe_continue+0x362 : 105df8 >
  105dd2:    40 08             	r0 = r4			  ## lz4.c:507:13
  105dd4:    51 08             	r1 = r5			  ## lz4.c:507:13
  105dd6:    bf f3 33 d1       	call -0x5d9a <memmove : 100040 >			  ## lz4.c:507:13
  105dda:    90 fb b0 07       	r0 = r7 - r11			  ## lz4.c:622:35
  105dde:    0f 18             	goto 0x1e <LZ4_decompress_safe_continue+0x368 : 105dfe >			  ## lz4.c:622:35
  105de0:    35 08             	r5 = r3
  105de2:    50 02             	r0 = [sp+20]			  ## lz4.c:629:18
  105de4:    f0 8f             	r0 += -0x1			  ## lz4.c:629:18
  105de6:    60 b1             	r0 = r0 - r5			  ## lz4.c:629:47
  105de8:    10 e0 15 b0       	ifs (r0 < 0x1) goto 0x2a <LZ4_decompress_safe_continue+0x380 : 105e16 >
  105dec:    10 f6 0c 90       	[r9 + 0xc] = r0			  ## lz4.c:699:27
  105df0:    80 fb 00 1b       	r1 = r11 + r0			  ## lz4.c:700:42
  105df4:    0e 18             	goto 0x1c <LZ4_decompress_safe_continue+0x37C : 105e12 >			  ## lz4.c:700:42
  105df6:    35 08             	r5 = r3
  105df8:    50 02             	r0 = [sp+20]			  ## lz4.c:629:18
  105dfa:    f0 8f             	r0 += -0x1			  ## lz4.c:629:18
  105dfc:    60 b1             	r0 = r0 - r5			  ## lz4.c:629:47
  105dfe:    10 e0 0a b0       	ifs (r0 < 0x1) goto 0x14 <LZ4_decompress_safe_continue+0x380 : 105e16 >
  105e02:    01 f6 0c 90       	r1 = [r9 + 0xc]			  ## lz4.c:688:27
  105e06:    01 09             	r1 += r0			  ## lz4.c:688:27
  105e08:    11 f6 0c 90       	[r9 + 0xc] = r1			  ## lz4.c:688:27
  105e0c:    01 f6 08 90       	r1 = [r9 + 0x8]			  ## lz4.c:689:27
  105e10:    01 09             	r1 += r0			  ## lz4.c:689:27
  105e12:    11 f6 08 90       	[r9 + 0x8] = r1			  ## lz4.c:689:27
  105e16:    0c 0a             	sp += 0x18
  105e18:    5f 01             	{pc, r15-r4} = [sp++]			  ## lz4.c:704:1
  105e1a:    10 70             	r0 = 0x1
  105e1c:    13 e0 03 10       	if (r3 != 0x1) goto 0x6 <LZ4_decompress_safe_continue+0x390 : 105e26 >
  105e20:    01 62             	r1 = b[r1 + 0x0] (u)
  105e22:    01 32             	if (r1 != 0x0) goto 0x2 <LZ4_decompress_safe_continue+0x390 : 105e26 >
  105e24:    00 70             	r0 = 0x0
  105e26:    60 fb 00 09       	r0 = 0x0 - r0
  105e2a:    f5 1f             	goto -0x16 <LZ4_decompress_safe_continue+0x380 : 105e16 >


Run_App:
  105e2c:    7b 01             	[--sp] = {rets, r11-r4}			  ## bankSwitch.c:15:0
  105e2e:    be 0b             	sp += -0x84			  ## bankSwitch.c:15:0
  105e30:    04 08             	r4 = r0			  ## bankSwitch.c:15:0

  105e32:    12 48             	r2 = [r4 + 0x4]			  ## sdfile.c:29:60
  105e34:    00 48             	r0 = [r4 + 0x0]			  ## sdfile.c:29:27
  105e36:    36 48             	r6 = [r4 + 0xc]			  ## sdfile.c:29:11
  105e38:    45 a6             	r5 = sp + 100			  ## sdfile.c:29:11
  105e3a:    03 72             	r3 = 0x20			  ## sdfile.c:29:5
  105e3c:    51 08             	r1 = r5			  ## sdfile.c:29:5
  105e3e:    86 00             	call r6			  ## sdfile.c:29:5
  105e40:    00 fd 02 59       	r0 = r5 | 0x2			  ## sdfile.c:31:24
  105e44:    e1 71             	r1 = 0x1e			  ## sdfile.c:31:12
  105e46:    4c 14             	call -0x768 <chip_crc16 : 1056e0 >			  ## sdfile.c:31:12
  105e48:    75 20             	if (r0 == 0x0) goto 0xea <Run_App+0x108 : 105f34 >			  ## sdfile.c:31:12
  105e4a:    81 f5 64 00       	r1 = h[sp+100] (u)			  ## sdfile.c:34:29
  105e4e:    01 f2 71 10       	if (r1 != r0) goto 0xe2 <Run_App+0x108 : 105f34 >			  ## sdfile.c:34:29

  105e52:    00 48             	r0 = [r4 + 0x0]			  ## sdfile.c:35:31
  105e54:    35 48             	r5 = [r4 + 0xc]			  ## sdfile.c:35:15
  105e56:    11 48             	r1 = [r4 + 0x4]			  ## sdfile.c:36:31
  105e58:    12 fc 20 00       	r2 = r1 + 0x20			  ## sdfile.c:36:64
  105e5c:    41 a4             	r1 = sp + 68			  ## sdfile.c:36:64
  105e5e:    03 72             	r3 = 0x20			  ## sdfile.c:35:9
  105e60:    85 00             	call r5			  ## sdfile.c:35:9

  105e62:    c5 07             	r5 = -0x4			  ## sdfile.c:35:9
  105e64:    12 18             	goto 0x24 <Run_App+0x5E : 105e8a >			  ## sdfile.c:35:9

  105e66:    11 48             	r1 = [r4 + 0x4]			  ## bankSwitch.c:32:57
  105e68:    22 03             	r2 = [sp+72]			  ## bankSwitch.c:32:75
  105e6a:    00 48             	r0 = [r4 + 0x0]			  ## bankSwitch.c:32:35
  105e6c:    36 48             	r6 = [r4 + 0xc]			  ## bankSwitch.c:32:19
  105e6e:    12 09             	r2 += r1			  ## bankSwitch.c:32:68
  105e70:    41 a3             	r1 = sp + 52			  ## bankSwitch.c:32:68
  105e72:    03 71             	r3 = 0x10			  ## bankSwitch.c:32:13
  105e74:    86 00             	call r6			  ## bankSwitch.c:32:13
  105e76:    08 20             	if (r0 == 0x0) goto 0x10 <Run_App+0x5C : 105e88 >			  ## bankSwitch.c:32:13
  105e78:    40 a3             	r0 = sp + 52
  105e7a:    e1 70             	r1 = 0xe			  ## bankSwitch.c:33:19
  105e7c:    31 14             	call -0x79e <chip_crc16 : 1056e0 >			  ## bankSwitch.c:33:19
  105e7e:    04 20             	if (r0 == 0x0) goto 0x8 <Run_App+0x5C : 105e88 >			  ## bankSwitch.c:33:19
  105e80:    81 f5 42 00       	r1 = h[sp+66] (u)			  ## bankSwitch.c:35:32
  105e84:    01 f2 03 00       	if (r1 == r0) goto 0x6 <Run_App+0x62 : 105e8e >			  ## bankSwitch.c:35:32
  105e88:    15 80             	r5 += 0x1			  ## bankSwitch.c:30:9
  105e8a:    ed 3b             	if (r5 != 0x0) goto -0x26 <Run_App+0x3A : 105e66 >
  105e8c:    53 18             	goto 0xa6 <Run_App+0x108 : 105f34 >

  105e8e:    20 03             	r0 = [sp+72]			  ## bankSwitch.c:36:35
  105e90:    f1 02             	r1 = [sp+60]			  ## bankSwitch.c:36:49
  105e92:    08 f5 38 00       	r8 = [sp+56]			  ## bankSwitch.c:38:35
  105e96:    c2 f5 50 00       	r2 = b[sp+80] (u)			  ## bankSwitch.c:50:14
  105e9a:    89 f5 36 00       	r9 = h[sp+54] (u)			  ## bankSwitch.c:37:29
  105e9e:    05 b2             	r5 = r1 + r0			  ## bankSwitch.c:36:40
  105ea0:    8b 08             	r11 = r8

  105ea2:    06 f3 09 20       	if ((r2 & 0x40) == 0) goto 0x12 <Run_App+0x8C : 105eb8 >
  105ea6:    11 48             	r1 = [r4 + 0x4]			  ## bankSwitch.c:51:68
  105ea8:    00 48             	r0 = [r4 + 0x0]			  ## bankSwitch.c:51:31
  105eaa:    36 48             	r6 = [r4 + 0xc]			  ## bankSwitch.c:51:15
  105eac:    42 b3             	r2 = r1 + r5			  ## bankSwitch.c:51:79
  105eae:    41 a2             	r1 = sp + 36			  ## bankSwitch.c:51:79
  105eb0:    03 71             	r3 = 0x10			  ## bankSwitch.c:51:9
  105eb2:    86 00             	call r6			  ## bankSwitch.c:51:9
  105eb4:    0b f5 2c 00       	r11 = [sp+44]			  ## bankSwitch.c:52:35

  105eb8:    c6 07             	r6 = -0x4
  105eba:    ca ff 04 35 1e 00 	r10 = 0x1e3504 <__stub_uECC_vli_cmp_unsafe+0xDC508 : 1e3504 >
  105ec0:    11 18             	goto 0x22 <Run_App+0xB8 : 105ee4 >
  105ec2:    11 48             	r1 = [r4 + 0x4]			  ## bankSwitch.c:58:67
  105ec4:    00 48             	r0 = [r4 + 0x0]			  ## bankSwitch.c:58:35
  105ec6:    37 48             	r7 = [r4 + 0xc]			  ## bankSwitch.c:58:19
  105ec8:    42 b3             	r2 = r1 + r5			  ## bankSwitch.c:58:78
  105eca:    b1 08             	r1 = r11			  ## bankSwitch.c:58:13
  105ecc:    93 08             	r3 = r9			  ## bankSwitch.c:58:13
  105ece:    87 00             	call r7			  ## bankSwitch.c:58:13
  105ed0:    08 20             	if (r0 == 0x0) goto 0x10 <Run_App+0xB6 : 105ee2 >			  ## bankSwitch.c:58:13
  105ed2:    00 f6 00 a0       	r0 = [r10 + 0x0]			  ## bankSwitch.c:67:27
  105ed6:    81 f5 40 00       	r1 = h[sp+64] (u)			  ## bankSwitch.c:70:24
  105eda:    20 04             	r0 = r0.l (u)			  ## bankSwitch.c:70:28
  105edc:    01 f2 01 10       	if (r1 != r0) goto 0x2 <Run_App+0xB6 : 105ee2 >			  ## bankSwitch.c:70:28
  105ee0:    03 30             	if (r0 != 0x0) goto 0x6 <Run_App+0xBC : 105ee8 >
  105ee2:    16 80             	r6 += 0x1			  ## bankSwitch.c:30:9
  105ee4:    ee 3d             	if (r6 != 0x0) goto -0x24 <Run_App+0x96 : 105ec2 >
  105ee6:    26 18             	goto 0x4c <Run_App+0x108 : 105f34 >

  105ee8:    c0 f5 50 00       	r0 = b[sp+80] (u)			  ## bankSwitch.c:82:14
  105eec:    06 f3 16 00       	if ((r0 & 0x40) == 0) goto 0x2c <Run_App+0xF0 : 105f1c >			  ## bankSwitch.c:82:14

  105ef0:    90 02             	r0 = [sp+36]			  ## bankSwitch.c:85:82
  105ef2:    a1 02             	r1 = [sp+40]			  ## bankSwitch.c:85:57
  105ef4:    48 02             	[sp+16] = r0			  ## lz4.c:661:23
  105ef6:    10 09             	r0 += r1			  ## lz4.c:662:50
  105ef8:    38 02             	[sp+12] = r0			  ## lz4.c:662:22
  105efa:    b0 02             	r0 = [sp+44]			  ## bankSwitch.c:88:91
  105efc:    01 70             	r1 = 0x0			  ## bankSwitch.c:88:91
  105efe:    19 02             	[sp+4] = r1			  ## lz4.c:663:25
  105f00:    29 02             	[sp+8] = r1			  ## lz4.c:664:25
  105f02:    90 fb 80 20       	r2 = r0 - r8			  ## bankSwitch.c:88:101
  105f06:    b1 fc 10 00       	r1 = r11 + 0x10			  ## bankSwitch.c:87:77
  105f0a:    93 fc f0 ff       	r3 = r9 + -0x10			  ## bankSwitch.c:88:52
  105f0e:    40 a0             	r0 = sp + 4			  ## bankSwitch.c:88:52
  105f10:    0a 02             	[sp] = r2			  ## bankSwitch.c:87:24
  105f12:    82 08             	r2 = r8			  ## bankSwitch.c:87:24
  105f14:    c0 15             	call -0x480 <LZ4_decompress_safe_continue : 105a96 >			  ## bankSwitch.c:87:24
  105f16:    c1 02             	r1 = [sp+48]			  ## bankSwitch.c:90:39
  105f18:    10 f2 0c 10      	if (r0 != r1) goto 0x18 <Run_App+0x108 : 105f34 >

  105f1c:    28 fb 00 0b       	r0 = icfg			  ## bankSwitch.c:104:5
  105f20:    70 b4             	r0 &= 0xfffffeff			  ## bankSwitch.c:105:9
  105f22:    29 fb 00 0b       	icfg = r0			  ## bankSwitch.c:106:5
  105f26:    18 00             	cli			  ## bankSwitch.c:107:5
  105f28:    21 03             	r1 = [sp+72]			  ## bankSwitch.c:110:57
  105f2a:    c2 ff 00 fc 00 00 	r2 = 0xfc00 <boot_arg_list : fc00 >			  ## bankSwitch.c:110:5
  105f30:    40 08             	r0 = r4			  ## bankSwitch.c:110:5
  105f32:    88 00             	call r8			  ## bankSwitch.c:110:5
  105f34:    42 0a             	sp += 0x84
  105f36:    5b 01             	{pc, r11-r4} = [sp++]			  ## bankSwitch.c:113:1


spi_unmount:
  105f38:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## spi0.c:40:0
  105f3e:    01 70             	r1 = 0x0			  ## spi0.c:41:18
  105f40:    09 40             	[r0 + 0x0] = r1			  ## spi0.c:41:18
  105f42:    00 fc 08 37       	r0 = r0 + 0x3708			  ## spi0.c:41:18
  105f46:    22 40             	r2 = [r0 + 0x8]			  ## spi0.c:44:35
  105f48:    72 b0             	r2 &= 0xfffffffe			  ## spi0.c:44:35
  105f4a:    2a 40             	[r0 + 0x8] = r2			  ## spi0.c:44:35
  105f4c:    32 40             	r2 = [r0 + 0xc]			  ## spi0.c:45:35
  105f4e:    72 b0             	r2 &= 0xfffffffe			  ## spi0.c:45:35
  105f50:    3a 40             	[r0 + 0xc] = r2			  ## spi0.c:45:35
  105f52:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## spi0.c:46:35
  105f56:    02 fc 48 03       	r2 = r0 + 0x348			  ## spi0.c:46:35
  105f5a:    09 44             	[r2 + 0x0] = r1			  ## spi0.c:47:46
  105f5c:    23 40             	r3 = [r0 + 0x8]			  ## spi0.c:50:34
  105f5e:    f3 b0             	r3 &= 0xfffffffd			  ## spi0.c:50:34
  105f60:    2b 40             	[r0 + 0x8] = r3			  ## spi0.c:50:34
  105f62:    33 40             	r3 = [r0 + 0xc]			  ## spi0.c:51:34
  105f64:    f3 b0             	r3 &= 0xfffffffd			  ## spi0.c:51:34
  105f66:    3b 40             	[r0 + 0xc] = r3			  ## spi0.c:51:34
  105f68:    00 f4 02 09       	[r0 + 0x0] |= 0x2			  ## spi0.c:52:34
  105f6c:    19 44             	[r2 + 0x4] = r1			  ## spi0.c:53:44
  105f6e:    11 f6 3c 04       	[r0 + 0x43c] = r1			  ## spi0.c:54:26
  105f72:    23 40             	r3 = [r0 + 0x8]			  ## spi0.c:57:34
  105f74:    73 b1             	r3 &= 0xfffffffb			  ## spi0.c:57:34
  105f76:    2b 40             	[r0 + 0x8] = r3			  ## spi0.c:57:34
  105f78:    33 40             	r3 = [r0 + 0xc]			  ## spi0.c:58:34
  105f7a:    73 b1             	r3 &= 0xfffffffb			  ## spi0.c:58:34
  105f7c:    3b 40             	[r0 + 0xc] = r3			  ## spi0.c:58:34
  105f7e:    00 f4 04 09       	[r0 + 0x0] |= 0x4			  ## spi0.c:59:34
  105f82:    29 44             	[r2 + 0x8] = r1			  ## spi0.c:60:44
  105f84:    11 f6 40 04       	[r0 + 0x440] = r1			  ## spi0.c:61:26
  105f88:    31 40             	r1 = [r0 + 0xc]			  ## spi0.c:64:34
  105f8a:    f1 b1             	r1 &= 0xfffffff7			  ## spi0.c:64:34
  105f8c:    39 40             	[r0 + 0xc] = r1			  ## spi0.c:64:34
  105f8e:    02 f4 08 09       	[r0 + 0x8] |= 0x8			  ## spi0.c:65:34
  105f92:    00 f4 08 09       	[r0 + 0x0] |= 0x8			  ## spi0.c:66:34
  105f96:    20 00             	rts			  ## spi0.c:67:1


delay:
  105f98:    fe 0b             	sp += -0x4			  ## timer.c:34:0
  105f9a:    08 02             	[sp] = r0			  ## timer.c:34:0
  105f9c:    01 18             	goto 0x2 <delay+0x8 : 105fa0 >			  ## timer.c:34:0
  105f9e:    00 00             	nop			  ## timer.c:39:9
  105fa0:    00 02             	r0 = [sp]			  ## timer.c:38:16
  105fa2:    01 fc ff ff       	r1 = r0 + -0x1			  ## timer.c:38:16
  105fa6:    09 02             	[sp] = r1			  ## timer.c:38:16
  105fa8:    fa 31             	if (r0 != 0x0) goto -0xc <delay+0x6 : 105f9e >			  ## timer.c:38:16
  105faa:    02 0a             	sp += 0x4
  105fac:    20 00             	rts			  ## timer.c:42:1


_pll_init:
  105fae:    34 00             	[--sp] = rets			  ## clock.c:169:0
  105fb0:    c3 ff 00 47 1e 00 	r3 = 0x1e4700 <__stub_uECC_vli_cmp_unsafe+0xDD704 : 1e4700 >			  ## clock.c:169:0
  105fb6:    c4 f4 00 39       	[r3 + 0x10] = 0x0			  ## clock.c:120:23
  105fba:    00 fb 1f 01       	r0 = 0x11f <var_bss_size+0x16 : 11e >			  ## clock.c:121:23
  105fbe:    38 46             	[r3 + 0xc] = r0			  ## clock.c:121:23
  105fc0:    c2 f4 5e 39       	[r3 + 0x8] = 0x5e			  ## clock.c:122:23
  105fc4:    c2 ff 00 fc 00 00 	r2 = 0xfc00 <boot_arg_list : fc00 >			  ## clock.c:194:27
  105fca:    10 44             	r0 = [r2 + 0x4]			  ## clock.c:123:25
  105fcc:    31 fc 80 3d       	r1 = r3 + 0x3d80			  ## clock.c:123:25
  105fd0:    c0 fe 10 00       	r0 = r0 / r1 (u)			  ## clock.c:123:25
  105fd4:    e0 8f             	r0 += -0x2			  ## clock.c:123:25
  105fd6:    90 b5             	r0 |= 0x800			  ## clock.c:123:25
  105fd8:    18 46             	[r3 + 0x4] = r0			  ## clock.c:123:23
  105fda:    c0 ff 88 25 09 00 	r0 = 0x92588 <RAM_LIMIT_H+0x82588 : 92588 >			  ## clock.c:124:23
  105fe0:    08 46             	[r3 + 0x0] = r0			  ## clock.c:124:23
  105fe2:    00 f4 01 39       	[r3 + 0x0] |= 0x1			  ## clock.c:125:22
  105fe6:    a0 70             	r0 = 0xa			  ## clock.c:126:5
  105fe8:    bf f3 e8 f8       	call -0xe30 <udelay : 1051bc >			  ## clock.c:126:5
  105fec:    00 f4 02 39       	[r3 + 0x0] |= 0x2			  ## clock.c:127:22
  105ff0:    00 7a             	r0 = 0xa0			  ## clock.c:128:5
  105ff2:    bf f3 e3 f8       	call -0xe3a <udelay : 1051bc >			  ## clock.c:128:5
  105ff6:    03 f4 02 3a       	[r3 + 0xc] |= 0x200			  ## clock.c:129:22
  105ffa:    33 fc 0c b9       	r3 = r3 + -0x46f4			  ## clock.c:129:22
  105ffe:    00 46             	r0 = [r3 + 0x0]			  ## clock.c:172:24
  106000:    30 fd 70 09       	r0 = r0 & 0xffffff8f			  ## clock.c:172:24
  106004:    08 46             	[r3 + 0x0] = r0			  ## clock.c:172:24
  106006:    00 f4 50 39       	[r3 + 0x0] |= 0x50			  ## clock.c:173:24
  10600a:    00 f4 01 3a       	[r3 + 0x0] |= 0x100			  ## clock.c:174:24
  10600e:    00 46             	r0 = [r3 + 0x0]			  ## clock.c:175:24
  106010:    f0 b4             	r0 &= 0xfffffdff			  ## clock.c:175:24
  106012:    08 46             	[r3 + 0x0] = r0			  ## clock.c:175:24
  106014:    00 46             	r0 = [r3 + 0x0]			  ## clock.c:177:24
  106016:    70 b5             	r0 &= 0xfffffbff			  ## clock.c:177:24
  106018:    08 46             	[r3 + 0x0] = r0			  ## clock.c:177:24
  10601a:    20 46             	r0 = [r3 + 0x8]			  ## clock.c:179:24
  10601c:    30 fd 03 0a       	r0 = r0 & 0xfffffcff			  ## clock.c:179:24
  106020:    28 46             	[r3 + 0x8] = r0			  ## clock.c:179:24
  106022:    10 46             	r0 = [r3 + 0x4]			  ## clock.c:182:24
  106024:    30 fd 07 09       	r0 = r0 & 0xfffffff8			  ## clock.c:182:24
  106028:    18 46             	[r3 + 0x4] = r0			  ## clock.c:182:24
  10602a:    01 f4 05 39       	[r3 + 0x4] |= 0x5			  ## clock.c:183:24
  10602e:    10 46             	r0 = [r3 + 0x4]			  ## clock.c:184:24
  106030:    30 fd f0 09       	r0 = r0 & 0xffffff0f			  ## clock.c:184:24
  106034:    18 46             	[r3 + 0x4] = r0			  ## clock.c:184:24
  106036:    01 f4 80 39       	[r3 + 0x4] |= 0x80			  ## clock.c:185:24
  10603a:    a0 70             	r0 = 0xa			  ## clock.c:187:5
  10603c:    ad 17             	call -0xa6 <delay : 105f98 >			  ## clock.c:187:5
  10603e:    10 46             	r0 = [r3 + 0x4]			  ## clock.c:188:24
  106040:    30 fd 07 0a       	r0 = r0 & 0xfffff8ff			  ## clock.c:188:24
  106044:    18 46             	[r3 + 0x4] = r0			  ## clock.c:188:24
  106046:    08 00             	csync			  ## clock.c:189:5
  106048:    01 f4 06 3a       	[r3 + 0x4] |= 0x600			  ## clock.c:190:24
  10604c:    08 00             	csync			  ## clock.c:191:5
  10604e:    a0 70             	r0 = 0xa			  ## clock.c:192:5
  106050:    a3 17             	call -0xba <delay : 105f98 >			  ## clock.c:192:5
  106052:    c0 ff 00 6c dc 02 	r0 = 0x2dc6c00 <__stub_uECC_vli_cmp_unsafe+0x2CBFC04 : 2dc6c00 >			  ## clock.c:194:27
  106058:    28 44             	[r2 + 0x8] = r0			  ## clock.c:194:27
  10605a:    30 00             	pc = [sp++]			  ## clock.c:196:1


main:
  10605c:    bf f3 ba fa       	call -0xa8c <osc_clk_init : 1055d4 >			  ## main.c:73:0
  106060:    c0 ff e4 fc 00 00 	r0 = 0xfce4 <mask_putchar : fce4 >			  ## uart.c:42:18
  106066:    c1 ff b8 63 10 00 	r1 = 0x1063b8 <ut_empty : 1063b8 >			  ## uart.c:42:18
  10606c:    09 40             	[r0 + 0x0] = r1			  ## uart.c:42:18
  10606e:    bf f3 83 d1       	call -0x5cfa <nvram_boot_state : 100378 >			  ## boot_mode.c:107:25
  106072:    c9 ff c0 13 00 00 	r9 = 0x13c0 <var_bss_begin : 13c0 >
  106078:    cd ff 00 54 1e 00 	r13 = 0x1e5400 <__stub_uECC_vli_cmp_unsafe+0xDE404 : 1e5400 >
  10607e:    72 30             	if (r0 != 0x0) goto 0xe4 <main+0x108 : 106164 >

  106080:    c0 ff ff ff 00 00 	r0 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >			  ## usb_key.c:45:16
  106086:    10 f7 04 90       	h[r9 + 0x4] = r0			  ## usb_key.c:45:16
  10608a:    00 f4 04 d9       	[r13 + 0x0] |= 0x4			  ## usb_key.c:72:5
  10608e:    00 f4 08 d9       	[r13 + 0x0] |= 0x8			  ## usb_key.c:73:5
  106092:    00 f4 01 da       	[r13 + 0x0] |= 0x100			  ## usb_key.c:75:5
  106096:    00 f4 02 da       	[r13 + 0x0] |= 0x200			  ## usb_key.c:76:5
  10609a:    c1 ff 50 63 10 00 	r1 = 0x106350 <usb_key_isr : 106350 >			  ## usb_key.c:79:5
  1060a0:    70 70             	r0 = 0x7			  ## usb_key.c:79:5
  1060a2:    02 70             	r2 = 0x0			  ## usb_key.c:79:5
  1060a4:    07 70             	r7 = 0x0			  ## usb_key.c:79:5
  1060a6:    bf f3 68 f8       	call -0xf30 <HWI_Install : 10517a >			  ## usb_key.c:79:5
  1060aa:    00 70             	r0 = 0x0			  ## usb_key.c:81:5
  1060ac:    bf f3 a0 fa       	call -0xac0 <set_timer3_captrue_dp : 1055f0 >			  ## usb_key.c:81:5
  1060b0:    d6 fc 00 b3       	r6 = r13 + -0x4d00			  ## usb_key.c:81:5
  1060b4:    2f 4c             	[r6 + 0x8] = r7			  ## usb_key.c:83:20
  1060b6:    1f 4c             	[r6 + 0x4] = r7			  ## usb_key.c:84:20
  1060b8:    c0 f4 12 69       	[r6 + 0x0] = 0x12			  ## usb_key.c:85:20
  1060bc:    c8 ff f8 fb 00 00 	r8 = 0xfbf8 <g_boot_soft_flag : fbf8 >			  ## usb_key.c:85:20
  1060c2:    00 f9 01 80       	r0 = b[r8 + 0x1] (u)			  ## uart_key.c:212:38

  1060c6:    64 fc 08 52       	r4 = r6 + 0x5208			  ## uart_key.c:212:38
  1060ca:    24 f3 09 00       	if ((r0 & 0x10) != 0) goto 0x12 <main+0x84 : 1060e0 >			  ## uart_key.c:212:38
  1060ce:    20 48             	r0 = [r4 + 0x8]			  ## uart_key.c:213:46
  1060d0:    70 b0             	r0 &= 0xfffffffe			  ## uart_key.c:213:46
  1060d2:    28 48             	[r4 + 0x8] = r0			  ## uart_key.c:213:46
  1060d4:    03 f4 01 49       	[r4 + 0xc] |= 0x1			  ## uart_key.c:214:46
  1060d8:    00 f4 01 49       	[r4 + 0x0] |= 0x1			  ## uart_key.c:215:47
  1060dc:    01 f4 01 49       	[r4 + 0x4] |= 0x1			  ## uart_key.c:216:47
  1060e0:    17 f6 08 90       	[r9 + 0x8] = r7			  ## uart_key.c:194:13
  1060e4:    bf f3 be f9       	call -0xc84 <reset_status : 105464 >			  ## uart_key.c:195:5
  1060e8:    4a fc 24 fe       	r10 = r4 + -0x1dc			  ## uart_key.c:195:5
  1060ec:    c0 f4 1e a9       	[r10 + 0x0] = 0x1e			  ## uart_key.c:200:26
  1060f0:    45 fc f8 ab       	r5 = r4 + -0x5408			  ## uart_key.c:200:26
  1060f4:    c0 f4 40 5a       	[r5 + 0x0] = 0x4000			  ## uart_key.c:202:18
  1060f8:    c1 ff e4 54 10 00 	r1 = 0x1054e4 <capture_isr : 1054e4 >			  ## uart_key.c:203:5

  1060fe:    50 70             	r0 = 0x5			  ## uart_key.c:203:5
  106100:    02 70             	r2 = 0x0			  ## uart_key.c:203:5
  106102:    bf f3 3a f8       	call -0xf8c <HWI_Install : 10517a >			  ## uart_key.c:203:5

  106106:    c3 f4 01 99       	[r9 + 0xc] = 0x1			  ## uart_key.c:204:15
  10610a:    1f 4a             	[r5 + 0x4] = r7			  ## uart_key.c:205:18
  10610c:    2f 4a             	[r5 + 0x8] = r7			  ## uart_key.c:206:18
  10610e:    c0 f4 42 59       	[r5 + 0x0] = 0x42			  ## uart_key.c:207:18
  106112:    bf f3 d1 f9       	call -0xc5e <set_cap_timeout : 1054b8 >			  ## boot_mode.c:71:5

  106116:    42 fc f8 ac       	r2 = r4 + -0x5308			  ## boot_mode.c:71:5
  10611a:    01 44             	r1 = [r2 + 0x0]			  ## boot_mode.c:40:21
  10611c:    71 04             	r1 = r1.l (s)			  ## boot_mode.c:72:12
  10611e:    01 e0 0f b0       	ifs (r1 < 0x0) goto 0x1e <main+0xE4 : 106140 >			  ## boot_mode.c:72:12
  106122:    00 f7 04 90       	r0 = h[r9 + 0x4] (u)			  ## boot_mode.c:75:35
  106126:    bf f3 88 fa       	call -0xaf0 <check_key_type : 10563a >			  ## boot_mode.c:75:20
  10612a:    10 e0 08 00       	if (r0 == 0x1) goto 0x10 <main+0xE2 : 10613e >
  10612e:    00 f7 02 90       	r0 = h[r9 + 0x2] (u)			  ## boot_mode.c:82:35
  106132:    bf f3 82 fa       	call -0xafc <check_key_type : 10563a >			  ## boot_mode.c:82:20
  106136:    40 e0 f0 1f       	if (r0 != 0x4) goto -0x20 <main+0xBE : 10611a >
  10613a:    40 70             	r0 = 0x4
  10613c:    01 18             	goto 0x2 <main+0xE4 : 106140 >
  10613e:    10 70             	r0 = 0x1

  106140:    01 fb 00 40       	r1 = 0x4000 <os_code_size+0x1F6B : 4000 >			  ## boot_mode.c:44:17
  106144:    09 44             	[r2 + 0x0] = r1			  ## boot_mode.c:44:17
  106146:    09 4c             	[r6 + 0x0] = r1			  ## clock.c:322:20
  106148:    00 f4 04 d9       	[r13 + 0x0] |= 0x4			  ## usb_key.c:91:5
  10614c:    00 f4 08 d9       	[r13 + 0x0] |= 0x8			  ## usb_key.c:92:5
  106150:    09 4a             	[r5 + 0x0] = r1			  ## uart_key.c:79:18
  106152:    c0 f4 00 a9       	[r10 + 0x0] = 0x0			  ## uart_key.c:80:26
  106156:    01 f9 01 80       	r1 = b[r8 + 0x1] (u)			  ## uart_key.c:229:38
  10615a:    24 f3 03 10       	if ((r1 & 0x10) != 0) goto 0x6 <main+0x108 : 106164 >			  ## uart_key.c:229:38
  10615e:    31 48             	r1 = [r4 + 0xc]			  ## uart_key.c:230:46
  106160:    71 b0             	r1 &= 0xfffffffe			  ## uart_key.c:230:46
  106162:    39 48             	[r4 + 0xc] = r1			  ## uart_key.c:230:46






  106164:    01 fc ff ff       	r1 = r0 + -0x1			  ## main.c:101:5
  106168:    c2 ff 00 fc 00 00 	r2 = 0xfc00 <boot_arg_list : fc00 >
  10616e:    21 e0 07 30       	if (r1 < 0x2) goto 0xe <main+0x124 : 106180 >			  ## main.c:101:5
  106172:    d0 8f             	r0 += -0x3
  106174:    10 e0 08 80       	if (r0 > 0x1) goto 0x10 <main+0x12C : 106188 >
  106178:    00 70             	r0 = 0x0			  ## main.c:106:9
  10617a:    bf f3 78 fb       	call -0x910 <uart_upgrade_init : 10586e >			  ## main.c:106:9
  10617e:    b4 18             	goto 0x168 <main+0x28C : 1062e8 >			  ## main.c:106:9


  106180:    30 70             	r0 = 0x3			  ## main.c:113:9
  106182:    bf f3 d6 fb       	call -0x854 <check_usb_sof : 105932 >			  ## main.c:113:9
  106186:    b0 18             	goto 0x160 <main+0x28C : 1062e8 >			  ## main.c:113:9



  106188:    0a 70             	r10 = 0x0
  10618a:    1a f9 00 20       	b[r2 + 0x0] = r10			  ## main.c:34:31
  10618e:    cf ff f0 fb 00 00 	r15 = 0xfbf0 <spi_port : fbf0 >			  ## main.c:34:31
  106194:    c7 ff 10 6d 10 00 	r7 = 0x106d10 <nvram_boot_tag+0xC : 106d10 >			  ## main.c:34:31
  10619a:    c4 ff e0 fb 00 00 	r4 = 0xfbe0 <spi_flash_io : fbe0 >			  ## main.c:34:31
  1061a0:    4e fb ae da       	r14 = r13 + 0xae00			  ## main.c:34:31
  1061a4:    d6 fc 00 c8       	r6 = r13 + -0x3800			  ## main.c:34:31
  1061a8:    68 fc 00 37       	r8 = r6 + 0x3700			  ## main.c:34:31
  1061ac:    0b 70             	r11 = 0x0			  ## main.c:34:31
  1061ae:    02 18             	goto 0x4 <main+0x158 : 1061b4 >			  ## main.c:34:31

  1061b0:    bf f3 57 fa       	call -0xb52 <wdt_clr : 105662 >			  ## main.c:59:9
  1061b4:    10 70             	r0 = 0x1			  ## boot_flash.c:102:20
  1061b6:    10 f9 04 f0       	b[r15 + 0x4] = r0			  ## boot_flash.c:102:20
  1061ba:    c0 ff 00 6d 10 00 	r0 = 0x106d00 <norflash_check_in.spi0_porta_config : 106d00 >			  ## boot_flash.c:103:28
  1061c0:    10 f6 00 f0       	[r15 + 0x0] = r0			  ## boot_flash.c:103:28
  1061c4:    a0 70             	r0 = 0xa			  ## boot_flash.c:105:5
  1061c6:    bf f3 21 f8       	call -0xfbe <flash_poweron : 10520c >			  ## boot_flash.c:105:5
  1061ca:    41 9f             	r1 = r7 + 0x14			  ## boot_flash.c:78:5
  1061cc:    02 71             	r2 = 0x10			  ## boot_flash.c:78:5
  1061ce:    40 08             	r0 = r4			  ## boot_flash.c:78:5
  1061d0:    bf f3 36 cf       	call -0x6194 <memmove : 100040 >			  ## boot_flash.c:78:5
  1061d4:    03 f6 00 f0       	r3 = [r15 + 0x0]			  ## boot_flash.c:80:27
  1061d8:    1a f6 00 e0       	[r14 + 0x0] = r10			  ## spi0.c:90:17
  1061dc:    c0 f4 20 69       	[r6 + 0x0] = 0x20			  ## spi0.c:91:18
  1061e0:    10 66             	r0 = b[r3 + 0x1] (u)			  ## spi0.c:92:28
  1061e2:    18 4c             	[r6 + 0x4] = r0			  ## spi0.c:92:19
  1061e4:    bf f3 f4 fb       	call -0x818 <spi_port_io_init : 1059d0 >			  ## spi0.c:94:5

  1061e8:    01 56             	r1 = h[r3 + 0x0] (u)			  ## spi0.c:96:16
  1061ea:    00 4c             	r0 = [r6 + 0x0]			  ## spi0.c:96:16
  1061ec:    60 ff 07 19 06 00 	if ((r1 & 0x7) == 0) goto 0xc <main+0x1A2 : 1061fe >			  ## spi0.c:96:9
  1061f2:    90 b1             	r0 |= 0x8			  ## spi0.c:97:22
  1061f4:    08 4c             	[r6 + 0x0] = r0			  ## spi0.c:97:22
  1061f6:    00 f6 14 d0       	r0 = [r13 + 0x14]			  ## spi0.c:98:24
  1061fa:    f0 b9             	r0 &= 0xfff7ffff			  ## spi0.c:98:24
  1061fc:    05 18             	goto 0xa <main+0x1AC : 106208 >			  ## spi0.c:98:24

  1061fe:    f0 b1             	r0 &= 0xfffffff7			  ## spi0.c:101:22
  106200:    08 4c             	[r6 + 0x0] = r0			  ## spi0.c:101:22
  106202:    00 f6 14 d0       	r0 = [r13 + 0x14]			  ## spi0.c:102:24
  106206:    90 b9             	r0 |= 0x80000			  ## spi0.c:102:24

  106208:    10 f6 14 d0       	[r13 + 0x14] = r0
  10620c:    00 f4 01 69       	[r6 + 0x0] |= 0x1			  ## spi0.c:105:18
  106210:    10 70             	r0 = 0x1			  ## spi0.c:106:5
  106212:    12 14             	call -0x7dc <SPI0_cs : 105a38 >			  ## spi0.c:106:5
  106214:    00 70             	r0 = 0x0			  ## norflash.c:221:5
  106216:    10 14             	call -0x7e0 <SPI0_cs : 105a38 >			  ## norflash.c:221:5
  106218:    b0 7a             	r0 = 0xab			  ## norflash.c:223:5
  10621a:    26 14             	call -0x7b4 <SPI0_WriteByte : 105a68 >			  ## norflash.c:223:5
  10621c:    f0 7f             	r0 = 0xff			  ## norflash.c:226:5
  10621e:    24 14             	call -0x7b8 <SPI0_WriteByte : 105a68 >			  ## norflash.c:226:5
  106220:    f0 7f             	r0 = 0xff			  ## norflash.c:227:5
  106222:    22 14             	call -0x7bc <SPI0_WriteByte : 105a68 >			  ## norflash.c:227:5
  106224:    f0 7f             	r0 = 0xff			  ## norflash.c:228:5
  106226:    20 14             	call -0x7c0 <SPI0_WriteByte : 105a68 >			  ## norflash.c:228:5
  106228:    27 14             	call -0x7b2 <SPI0_ReadByte : 105a78 >			  ## norflash.c:230:5
  10622a:    10 70             	r0 = 0x1			  ## norflash.c:231:5
  10622c:    05 14             	call -0x7f6 <SPI0_cs : 105a38 >			  ## norflash.c:231:5

  10622e:    0c fb 6a ff       	r12 = -0x96 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF8F6E : ffffffffffffff6a >
  106232:    04 18             	goto 0x8 <main+0x1E0 : 10623c >

  106234:    10 70             	r0 = 0x1			  ## norflash.c:66:9
  106236:    bf f3 e0 f7       	call -0x1040 <mdelay : 1051fa >			  ## norflash.c:66:9
  10623a:    1c 80             	r12 += 0x1			  ## norflash.c:66:9

  10623c:    0c e0 0c 00       	if (r12 == 0x0) goto 0x18 <main+0x1FC : 106258 >
  106240:    00 70             	r0 = 0x0			  ## norflash.c:58:9
  106242:    bf f3 f9 fb       	call -0x80e <SPI0_cs : 105a38 >			  ## norflash.c:58:9
  106246:    50 70             	r0 = 0x5			  ## norflash.c:59:9
  106248:    0f 14             	call -0x7e2 <SPI0_WriteByte : 105a68 >			  ## norflash.c:59:9
  10624a:    16 14             	call -0x7d4 <SPI0_ReadByte : 105a78 >			  ## norflash.c:60:19
  10624c:    05 08             	r5 = r0			  ## norflash.c:60:19
  10624e:    10 70             	r0 = 0x1			  ## norflash.c:61:9
  106250:    bf f3 f2 fb       	call -0x81c <SPI0_cs : 105a38 >			  ## norflash.c:61:9
  106254:    20 f3 ee 5f       	if ((r5 & 0x1) != 0) goto -0x24 <main+0x1D8 : 106234 >			  ## norflash.c:61:9

  106258:    00 70             	r0 = 0x0			  ## norflash.c:254:5
  10625a:    05 70             	r5 = 0x0			  ## norflash.c:254:5
  10625c:    bf f3 ec fb       	call -0x828 <SPI0_cs : 105a38 >			  ## norflash.c:254:5
  106260:    60 76             	r0 = 0x66			  ## norflash.c:255:5
  106262:    02 14             	call -0x7fc <SPI0_WriteByte : 105a68 >			  ## norflash.c:255:5
  106264:    10 70             	r0 = 0x1			  ## norflash.c:257:5
  106266:    bf f3 e7 fb       	call -0x832 <SPI0_cs : 105a38 >			  ## norflash.c:257:5
  10626a:    00 70             	r0 = 0x0			  ## norflash.c:259:5
  10626c:    bf f3 e4 fb       	call -0x838 <SPI0_cs : 105a38 >			  ## norflash.c:259:5
  106270:    90 79             	r0 = 0x99			  ## norflash.c:261:5
  106272:    bf f3 f9 fb       	call -0x80e <SPI0_WriteByte : 105a68 >			  ## norflash.c:261:5
  106276:    10 70             	r0 = 0x1			  ## norflash.c:263:5
  106278:    bf f3 de fb       	call -0x844 <SPI0_cs : 105a38 >			  ## norflash.c:263:5
  10627c:    20 70             	r0 = 0x2			  ## norflash.c:264:5
  10627e:    bf f3 bc f7       	call -0x1088 <mdelay : 1051fa >			  ## norflash.c:264:5
  106282:    1d 48             	[r4 + 0x4] = r5			  ## boot_flash.c:82:29
  106284:    06 18             	goto 0xc <main+0x236 : 106292 >			  ## boot_flash.c:82:29


  106286:    40 08             	r0 = r4			  ## boot_flash.c:85:9
  106288:    d1 15             	call -0x45e <Run_App : 105e2c >			  ## boot_flash.c:85:9
  10628a:    c0 bb             	r0 = r5 + r7			  ## boot_flash.c:86:35
  10628c:    90 40             	r0 = [r0 + 0x24]			  ## boot_flash.c:86:35
  10628e:    18 48             	[r4 + 0x4] = r0			  ## boot_flash.c:86:33
  106290:    45 80             	r5 += 0x4			  ## boot_flash.c:84:5
  106292:    45 e1 f8 1f       	if (r5 != 0x14) goto -0x10 <main+0x22A : 106286 >

  106296:    50 16             	call -0x360 <spi_unmount : 105f38 >			  ## boot_flash.c:89:5
  106298:    00 f6 1c 80       	r0 = [r8 + 0x1c]			  ## norflash.c:413:19
  10629c:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:413:19
  10629e:    10 f6 1c 80       	[r8 + 0x1c] = r0			  ## norflash.c:413:19
  1062a2:    00 f6 18 80       	r0 = [r8 + 0x18]			  ## norflash.c:414:19
  1062a6:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:414:19
  1062a8:    10 f6 18 80       	[r8 + 0x18] = r0			  ## norflash.c:414:19
  1062ac:    02 f4 10 89       	[r8 + 0x8] |= 0x10			  ## norflash.c:415:19
  1062b0:    00 f6 10 80       	r0 = [r8 + 0x10]			  ## norflash.c:416:19
  1062b4:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:416:19
  1062b6:    10 f6 10 80       	[r8 + 0x10] = r0			  ## norflash.c:416:19
  1062ba:    05 f4 10 89       	[r8 + 0x14] |= 0x10			  ## norflash.c:417:19
  1062be:    00 f6 00 80       	r0 = [r8 + 0x0]			  ## norflash.c:418:19
  1062c2:    70 b2             	r0 &= 0xffffffef			  ## norflash.c:418:19
  1062c4:    10 f6 00 80       	[r8 + 0x0] = r0			  ## norflash.c:418:19
  1062c8:    10 70             	r0 = 0x1			  ## norflash.c:419:5
  1062ca:    bf f3 96 f7       	call -0x10d4 <mdelay : 1051fa >			  ## norflash.c:419:5
  1062ce:    00 70             	r0 = 0x0			  ## norflash.c:420:5
  1062d0:    bf f3 88 f7       	call -0x10f0 <spi_cs_pu : 1051e4 >			  ## norflash.c:420:5
  1062d4:    0b e0 04 10       	if (r11 != 0x0) goto 0x8 <main+0x284 : 1062e0 >			  ## norflash.c:420:5
  1062d8:    10 70             	r0 = 0x1			  ## main.c:48:13
  1062da:    1b 70             	r11 = 0x1			  ## main.c:48:13
  1062dc:    bf f3 c7 fa       	call -0xa72 <uart_upgrade_init : 10586e >			  ## main.c:48:13

  1062e0:    00 70             	r0 = 0x0			  ## main.c:53:19
  1062e2:    bf f3 26 fb       	call -0x9b4 <check_usb_sof : 105932 >			  ## main.c:53:19
  1062e6:    64 21             	if (r0 == 0x0) goto -0x138 <main+0x154 : 1061b0 >





  1062e8:    c0 ff 95 18 1a 00 	r0 = 0x1a1895 <__stub_uECC_vli_cmp_unsafe+0x9A898 : 1a1894 >
  1062ee:    01 60             	r1 = b[r0 + 0x0] (u)			  ## main.c:126:5
  1062f0:    21 fd f8 19       	r1 = r1 & 0xf8			  ## main.c:126:5
  1062f4:    01 fd 06 19       	r1 = r1 | 0x6			  ## main.c:126:5
  1062f8:    09 60             	b[r0 + 0x0] = r1			  ## main.c:126:5

  1062fa:    01 f6 20 90       	r1 = [r9 + 0x20]			  ## main.c:126:5
  1062fe:    c7 ff 00 fc 00 00 	r7 = 0xfc00 <boot_arg_list : fc00 >			  ## main.c:126:5
  106304:    c1 f4 00 79       	[r7 + 0x4] = 0x0			  ## clock.c:149:28
  106308:    10 fc 60 f0       	r0 = r1 + -0xfa0			  ## clock.c:151:10
  10630c:    62 fb 00 19       	r2 = 0x0 - r1			  ## clock.c:151:10
  106310:    03 fb a0 0f       	r3 = 0xfa0 <_stack+0x380 : fa0 >			  ## clock.c:151:10
  106314:    c1 ff 00 09 3d 00 	r1 = 0x3d0900 <__stub_uECC_vli_cmp_unsafe+0x2C9904 : 3d0900 >			  ## clock.c:151:10
  10631a:    c4 ff 80 bb 00 00 	r4 = 0xbb80 <text_size+0x4B80 : bb80 >			  ## clock.c:151:10
  106320:    d5 fc 80 30       	r5 = r13 + 0x3080			  ## clock.c:151:10
  106324:    05 18             	goto 0xa <main+0x2D4 : 106330 >			  ## clock.c:151:10

  106326:    51 09             	r1 += r5			  ## clock.c:151:5
  106328:    00 fc 30 f8       	r0 = r0 + -0x7d0			  ## clock.c:151:5
  10632c:    33 fc d0 07       	r3 = r3 + 0x7d0			  ## clock.c:151:44
  106330:    43 f2 08 80       	if (r3 > r4) goto 0x10 <main+0x2E8 : 106344 >

  106334:    c6 b4             	r6 = r2 + r3			  ## clock.c:153:13
  106336:    f6 ef 01 c0       	ifs (r6 > -0x1) goto 0x2 <main+0x2E0 : 10633c >			  ## clock.c:153:13
  10633a:    06 08             	r6 = r0			  ## clock.c:153:13
  10633c:    0c ff e8 63 f2 ff 	ifs (r6 > 0x3e8) goto -0x1c <main+0x2CA : 106326 >			  ## clock.c:153:13
  106342:    19 4e             	[r7 + 0x4] = r1			  ## clock.c:154:36

  106344:    34 16             	call -0x398 <_pll_init : 105fae >			  ## clock.c:213:5
  106346:    20 73             	r0 = 0x32			  ## clock.c:214:5
  106348:    bf f3 57 f7       	call -0x1152 <mdelay : 1051fa >			  ## clock.c:214:5
  10634c:    bf f3 38 e5       	call -0x3590 <usb_slave_mode : 102dc0 >			  ## main.c:132:5


usb_key_isr:
  106350:    e9 01             	[--sp] = {psr, rets, reti}			  ## usb_key.c:16:0
  106352:    78 f3 07 00       	[--sp] = {r2-r0}			  ## usb_key.c:19:20
  106356:    c0 ff 00 07 1e 00 	r0 = 0x1e0700 <__stub_uECC_vli_cmp_unsafe+0xD9704 : 1e0700 >			  ## usb_key.c:19:20
  10635c:    00 f4 40 0a       	[r0 + 0x0] |= 0x4000			  ## usb_key.c:19:20
  106360:    00 fc 00 11       	r0 = r0 + 0x1100			  ## usb_key.c:21:9
  106364:    00 40             	r0 = [r0 + 0x0]			  ## usb_key.c:21:9
  106366:    c1 ff c0 13 00 00 	r1 = 0x13c0 <var_bss_begin : 13c0 >			  ## usb_key.c:21:9
  10636c:    22 52             	r2 = h[r1 + 0x4] (u)			  ## usb_key.c:21:9
  10636e:    81 fd 80 00       	r0 = uextra(r0, p:0x10, l:0x1)			  ## usb_key.c:21:9
  106372:    df fd 08 02       	r0 <= insert(r2, p:0x1, l:0x1f)			  ## usb_key.c:21:9
  106376:    28 52             	h[r1 + 0x4] = r0			  ## usb_key.c:21:9
  106378:    20 52             	r0 = h[r1 + 0x4] (u)			  ## usb_key.c:27:9
  10637a:    01 fb ef 16       	r1 = 0x16ef <_system_bss_end+0x226 : 16ee >			  ## usb_key.c:27:20
  10637e:    10 f2 17 10       	if (r0 != r1) goto 0x2e <usb_key_isr+0x60 : 1063b0 >			  ## usb_key.c:27:20
  106382:    00 70             	r0 = 0x0
  106384:    c1 ff 00 54 1e 00 	r1 = 0x1e5400 <__stub_uECC_vli_cmp_unsafe+0xDE404 : 1e5400 >
  10638a:    10 f6 68 12       	[r1 + 0x268] = r0			  ## usb_key.c:29:28
  10638e:    10 f6 64 12       	[r1 + 0x264] = r0			  ## usb_key.c:30:28
  106392:    00 42             	r0 = [r1 + 0x0]			  ## usb_key.c:31:9
  106394:    70 b0             	r0 &= 0xfffffffe			  ## usb_key.c:31:9
  106396:    08 42             	[r1 + 0x0] = r0			  ## usb_key.c:31:9
  106398:    00 42             	r0 = [r1 + 0x0]			  ## usb_key.c:32:9
  10639a:    f0 b0             	r0 &= 0xfffffffd			  ## usb_key.c:32:9
  10639c:    08 42             	[r1 + 0x0] = r0			  ## usb_key.c:32:9
  10639e:    00 42             	r0 = [r1 + 0x0]			  ## usb_key.c:33:9
  1063a0:    70 b1             	r0 &= 0xfffffffb			  ## usb_key.c:33:9
  1063a2:    08 42             	[r1 + 0x0] = r0			  ## usb_key.c:33:9
  1063a4:    00 42             	r0 = [r1 + 0x0]			  ## usb_key.c:34:9
  1063a6:    f0 b1             	r0 &= 0xfffffff7			  ## usb_key.c:34:9
  1063a8:    08 42             	[r1 + 0x0] = r0			  ## usb_key.c:34:9
  1063aa:    20 70             	r0 = 0x2			  ## usb_key.c:35:9
  1063ac:    bf f3 25 f7       	call -0x11b6 <mdelay : 1051fa >			  ## usb_key.c:35:9
  1063b0:    70 f3 07 00       	{r2-r0} = [sp++]			  ## usb_key.c:37:1
  1063b4:    a9 01             	{psr, rets, reti} = [sp++]			  ## usb_key.c:37:1
  1063b6:    22 00             	rti			  ## usb_key.c:37:1


ut_empty:
  1063b8:    20 00             	rts			  ## uart.c:19:0


putchar:
  1063ba:    c1 ff e4 fc 00 00 	r1 = 0xfce4 <mask_putchar : fce4 >			  ## uart.c:48:0
  1063c0:    01 42             	r1 = [r1 + 0x0]			  ## uart.c:49:5
  1063c2:    91 00             	goto r1			  ## uart.c:49:5


switch_to_hrc_asm:
  1063c4:    c0 ff 08 00 1e 00 	r0 = 0x1e0008 <__stub_uECC_vli_cmp_unsafe+0xD900C : 1e0008 >			  ## clock.c:219:0
  1063ca:    01 40             	r1 = [r0 + 0x0]			  ## clock.c:220:23
  1063cc:    02 fb 00 fc       	r2 = -0x400 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF8C04 : fffffffffffffc00 >			  ## clock.c:220:23
  1063d0:    51 b5             	r1 &= r2			  ## clock.c:220:23
  1063d2:    09 40             	[r0 + 0x0] = r1			  ## clock.c:220:23
  1063d4:    01 f4 01 09       	[r0 + 0x4] |= 0x1			  ## clock.c:221:24
  1063d8:    08 00             	csync			  ## clock.c:222:5
  1063da:    00 00             	nop			  ## clock.c:223:5
  1063dc:    00 00             	nop			  ## clock.c:224:5
  1063de:    00 00             	nop			  ## clock.c:225:5
  1063e0:    21 40             	r1 = [r0 + 0x8]			  ## clock.c:226:5
  1063e2:    31 fd 07 1a       	r1 = r1 & 0xfffff8ff			  ## clock.c:226:5
  1063e6:    01 fd 03 1a       	r1 = r1 | 0x300			  ## clock.c:226:5
  1063ea:    29 40             	[r0 + 0x8] = r1			  ## clock.c:226:5
  1063ec:    08 00             	csync			  ## clock.c:227:5
  1063ee:    00 00             	nop			  ## clock.c:228:5
  1063f0:    00 00             	nop			  ## clock.c:229:5
  1063f2:    00 00             	nop			  ## clock.c:230:5
  1063f4:    20 00             	rts			  ## clock.c:231:1


tmr3_isr:
  1063f6:    e9 01             	[--sp] = {psr, rets, reti}			  ## clock.c:267:0
  1063f8:    78 f3 1f 00       	[--sp] = {r4-r0}			  ## clock.c:271:5
  1063fc:    40 76             	r0 = 0x64			  ## clock.c:271:5
  1063fe:    cc 15             	call -0x468 <delay : 105f98 >			  ## clock.c:271:5
  106400:    c2 ff 00 07 1e 00 	r2 = 0x1e0700 <__stub_uECC_vli_cmp_unsafe+0xD9704 : 1e0700 >			  ## clock.c:271:5
  106406:    00 f4 40 2a       	[r2 + 0x0] |= 0x4000			  ## clock.c:272:20
  10640a:    21 44             	r1 = [r2 + 0x8]			  ## clock.c:274:30
  10640c:    c0 ff c0 13 00 00 	r0 = 0x13c0 <var_bss_begin : 13c0 >			  ## clock.c:274:30
  106412:    94 40             	r4 = [r0 + 0x24]			  ## clock.c:274:36
  106414:    23 44             	r3 = [r2 + 0x8]			  ## clock.c:275:27
  106416:    9b 40             	[r0 + 0x24] = r3			  ## clock.c:275:14
  106418:    a3 40             	r3 = [r0 + 0x28]			  ## clock.c:282:21
  10641a:    21 b3             	r1 = r1 - r4			  ## clock.c:274:34
  10641c:    34 fc fc fe       	r4 = r3 + -0x104			  ## clock.c:282:30
  106420:    41 f2 11 90       	if (r1 <= r4) goto 0x22 <tmr3_isr+0x50 : 106446 >			  ## clock.c:282:30
  106424:    33 fc 04 01       	r3 = r3 + 0x104			  ## clock.c:282:62
  106428:    31 f2 0d 20       	if (r1 >= r3) goto 0x1a <tmr3_isr+0x50 : 106446 >			  ## clock.c:282:62
  10642c:    83 40             	r3 = [r0 + 0x20]			  ## clock.c:283:23
  10642e:    13 09             	r3 += r1			  ## clock.c:283:23
  106430:    8b 40             	[r0 + 0x20] = r3			  ## clock.c:283:23
  106432:    b3 40             	r3 = [r0 + 0x2c]			  ## clock.c:285:16
  106434:    13 80             	r3 += 0x1			  ## clock.c:285:16
  106436:    bb 40             	[r0 + 0x2c] = r3			  ## clock.c:285:16
  106438:    43 e0 08 10       	if (r3 != 0x4) goto 0x10 <tmr3_isr+0x56 : 10644c >			  ## clock.c:285:16
  10643c:    c0 f4 40 2a       	[r2 + 0x0] = 0x4000			  ## clock.c:288:28
  106440:    cc f4 01 09       	[r0 + 0x30] = 0x1			  ## clock.c:290:26
  106444:    03 18             	goto 0x6 <tmr3_isr+0x56 : 10644c >			  ## clock.c:290:26
  106446:    02 70             	r2 = 0x0
  106448:    ba 40             	[r0 + 0x2c] = r2			  ## clock.c:293:17
  10644a:    8a 40             	[r0 + 0x20] = r2			  ## clock.c:294:23
  10644c:    a9 40             	[r0 + 0x28] = r1			  ## clock.c:297:14
  10644e:    70 f3 1f 00       	{r4-r0} = [sp++]			  ## clock.c:298:1
  106452:    a9 01             	{psr, rets, reti} = [sp++]			  ## clock.c:298:1
  106454:    22 00             	rti			  ## clock.c:298:1


sfc_suspend:
  106456:    08 00             	csync			  ## sfc.c:7:0
  106458:    c1 ff 00 e4 1b 00 	r1 = 0x1be400 <__stub_uECC_vli_cmp_unsafe+0xB7404 : 1be400 >			  ## sfc.c:9:5
  10645e:    02 42             	r2 = [r1 + 0x0]			  ## sfc.c:9:5
  106460:    f2 ef fd cf       	ifs (r2 > -0x1) goto -0x6 <sfc_suspend+0x8 : 10645e >			  ## sfc.c:9:5
  106464:    08 00             	csync			  ## sfc.c:10:5
  106466:    c1 ff 00 05 1b 00 	r1 = 0x1b0500 <__stub_uECC_vli_cmp_unsafe+0xA9504 : 1b0500 >			  ## sfc.c:10:5
  10646c:    02 42             	r2 = [r1 + 0x0]			  ## sfc.c:10:5
  10646e:    f2 ef fd cf       	ifs (r2 > -0x1) goto -0x6 <sfc_suspend+0x16 : 10646c >			  ## sfc.c:10:5
  106472:    c1 ff 00 02 1f 00 	r1 = 0x1f0200 <__stub_uECC_vli_cmp_unsafe+0xE9204 : 1f0200 >
  106478:    02 42             	r2 = [r1 + 0x0]			  ## sfc.c:13:20
  10647a:    02 e0 fd bf       	ifs (r2 < 0x0) goto -0x6 <sfc_suspend+0x22 : 106478 >			  ## sfc.c:13:5
  10647e:    02 42             	r2 = [r1 + 0x0]			  ## sfc.c:15:17
  106480:    72 b0             	r2 &= 0xfffffffe			  ## sfc.c:15:17
  106482:    0a 42             	[r1 + 0x0] = r2			  ## sfc.c:15:17
  106484:    05 20             	if (r0 == 0x0) goto 0xa <sfc_suspend+0x3A : 106490 >			  ## sfc.c:15:17
  106486:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## sfc.c:17:22
  10648c:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## sfc.c:17:22
  106490:    20 00             	rts			  ## sfc.c:19:1


sfc_resume:
  106492:    06 20             	if (r0 == 0x0) goto 0xc <sfc_resume+0xE : 1064a0 >			  ## sfc.c:22:0
  106494:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_uECC_vli_cmp_unsafe+0xDAC04 : 1e1c00 >			  ## sfc.c:22:0
  10649a:    01 40             	r1 = [r0 + 0x0]			  ## sfc.c:25:22
  10649c:    71 b0             	r1 &= 0xfffffffe			  ## sfc.c:25:22
  10649e:    09 40             	[r0 + 0x0] = r1			  ## sfc.c:25:22
  1064a0:    c0 ff 00 02 1f 00 	r0 = 0x1f0200 <__stub_uECC_vli_cmp_unsafe+0xE9204 : 1f0200 >			  ## sfc.c:27:17
  1064a6:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## sfc.c:27:17
  1064aa:    20 00             	rts			  ## sfc.c:30:1


IcuCmdKst:
  1064ac:    61 00             	cli r1			  ## cache.c:90:0
  1064ae:    08 00             	csync			  ## cache.c:92:5
  1064b0:    c2 ff 00 e4 1b 00 	r2 = 0x1be400 <__stub_uECC_vli_cmp_unsafe+0xB7404 : 1be400 >			  ## cache.c:92:5
  1064b6:    03 44             	r3 = [r2 + 0x0]			  ## cache.c:92:5
  1064b8:    f3 ef fd cf       	ifs (r3 > -0x1) goto -0x6 <IcuCmdKst+0xA : 1064b6 >			  ## cache.c:92:5
  1064bc:    13 70             	r3 = 0x1			  ## cache.c:93:54
  1064be:    f8 fd 00 03       	r0 = r3 << r0			  ## cache.c:93:54
  1064c2:    00 fd ca 0c       	r0 = r0 | 0xca000000			  ## cache.c:93:52
  1064c6:    48 44             	[r2 + 0x10] = r0			  ## cache.c:93:39
  1064c8:    08 00             	csync			  ## cache.c:94:5
  1064ca:    00 44             	r0 = [r2 + 0x0]			  ## cache.c:94:5
  1064cc:    f0 ef fd cf       	ifs (r0 > -0x1) goto -0x6 <IcuCmdKst+0x1E : 1064ca >			  ## cache.c:94:5
  1064d0:    71 00             	sti r1			  ## hwi.h:107:5
  1064d2:    20 00             	rts			  ## cache.c:96:1


IcuCmdSend:
  1064d4:    74 01             	[--sp] = {rets, r4}			  ## cache.c:108:0
  1064d6:    64 00             	cli r4			  ## hwi.h:101:5
  1064d8:    c3 ff 14 e4 1b 00 	r3 = 0x1be414 <__stub_uECC_vli_cmp_unsafe+0xB7418 : 1be414 >
  1064de:    08 46             	[r3 + 0x0] = r0			  ## cache.c:110:39
  1064e0:    10 09             	r0 += r1			  ## cache.c:111:50
  1064e2:    f0 8f             	r0 += -0x1			  ## cache.c:111:56
  1064e4:    18 46             	[r3 + 0x4] = r0			  ## cache.c:111:39
  1064e6:    10 70             	r0 = 0x1			  ## cache.c:113:19
  1064e8:    2b ff 10 1a 01 00 	ifs (r1 < 0x1000) goto 0x2 <IcuCmdSend+0x1C : 1064f0 >			  ## cache.c:113:19
  1064ee:    00 70             	r0 = 0x0			  ## cache.c:113:19
  1064f0:    20 09             	r0 += r2			  ## cache.c:113:19
  1064f2:    dc 17             	call -0x48 <IcuCmdKst : 1064ac >			  ## cache.c:114:5
  1064f4:    74 00             	sti r4			  ## hwi.h:107:5
  1064f6:    54 01             	{pc, r4} = [sp++]			  ## cache.c:116:1


DcuCmdKst:
  1064f8:    61 00             	cli r1			  ## cache.c:99:0
  1064fa:    08 00             	csync			  ## cache.c:101:5
  1064fc:    c2 ff 00 05 1b 00 	r2 = 0x1b0500 <__stub_uECC_vli_cmp_unsafe+0xA9504 : 1b0500 >			  ## cache.c:101:5
  106502:    03 44             	r3 = [r2 + 0x0]			  ## cache.c:101:5
  106504:    f3 ef fd cf       	ifs (r3 > -0x1) goto -0x6 <DcuCmdKst+0xA : 106502 >			  ## cache.c:101:5
  106508:    13 70             	r3 = 0x1			  ## cache.c:102:36
  10650a:    f8 fd 00 03       	r0 = r3 << r0			  ## cache.c:102:36
  10650e:    00 fd ca 0c       	r0 = r0 | 0xca000000			  ## cache.c:102:34
  106512:    48 44             	[r2 + 0x10] = r0			  ## cache.c:102:21
  106514:    08 00             	csync			  ## cache.c:103:5
  106516:    00 44             	r0 = [r2 + 0x0]			  ## cache.c:103:5
  106518:    f0 ef fd cf       	ifs (r0 > -0x1) goto -0x6 <DcuCmdKst+0x1E : 106516 >			  ## cache.c:103:5
  10651c:    71 00             	sti r1			  ## hwi.h:107:5
  10651e:    20 00             	rts			  ## cache.c:105:1


DcuCmdSend:
  106520:    74 01             	[--sp] = {rets, r4}			  ## cache.c:119:0
  106522:    64 00             	cli r4			  ## hwi.h:101:5
  106524:    c3 ff 14 05 1b 00 	r3 = 0x1b0514 <__stub_uECC_vli_cmp_unsafe+0xA9518 : 1b0514 >
  10652a:    08 46             	[r3 + 0x0] = r0			  ## cache.c:121:21
  10652c:    10 09             	r0 += r1			  ## cache.c:122:32
  10652e:    f0 8f             	r0 += -0x1			  ## cache.c:122:38
  106530:    18 46             	[r3 + 0x4] = r0			  ## cache.c:122:21
  106532:    10 70             	r0 = 0x1			  ## cache.c:124:19
  106534:    2b ff 08 1a 01 00 	ifs (r1 < 0x800) goto 0x2 <DcuCmdSend+0x1C : 10653c >			  ## cache.c:124:19
  10653a:    00 70             	r0 = 0x0			  ## cache.c:124:19
  10653c:    20 09             	r0 += r2			  ## cache.c:124:19
  10653e:    dc 17             	call -0x48 <DcuCmdKst : 1064f8 >			  ## cache.c:125:5
  106540:    74 00             	sti r4			  ## hwi.h:107:5
  106542:    54 01             	{pc, r4} = [sp++]			  ## cache.c:127:1


sfc_drop_cache:
  106544:    75 01             	[--sp] = {rets, r5, r4}			  ## sfc.c:32:0
  106546:    14 08             	r4 = r1			  ## sfc.c:32:0
  106548:    05 08             	r5 = r0			  ## sfc.c:32:0
  10654a:    52 70             	r2 = 0x5			  ## cache.c:146:5
  10654c:    c3 17             	call -0x7a <IcuCmdSend : 1064d4 >			  ## cache.c:146:5
  10654e:    52 70             	r2 = 0x5			  ## cache.c:174:5
  106550:    50 08             	r0 = r5			  ## cache.c:174:5
  106552:    41 08             	r1 = r4			  ## cache.c:174:5
  106554:    15 01             	{rets, r5, r4} = [sp++]			  ## cache.c:174:5
  106556:    e4 1f             	goto -0x38 <DcuCmdSend : 106520 >			  ## cache.c:174:5


IcuInitial:
  106558:    34 00             	[--sp] = rets			  ## cache.c:194:0
  10655a:    40 70             	r0 = 0x4			  ## cache.c:136:5
  10655c:    a7 17             	call -0xb2 <IcuCmdKst : 1064ac >			  ## cache.c:136:5
  10655e:    c0 ff 00 e4 1b 00 	r0 = 0x1be400 <__stub_uECC_vli_cmp_unsafe+0xB7404 : 1be400 >			  ## cache.c:61:35
  106564:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## cache.c:61:35
  106568:    30 00             	pc = [sp++]			  ## cache.c:197:1


DcuInitial:
  10656a:    34 00             	[--sp] = rets			  ## cache.c:200:0
  10656c:    40 70             	r0 = 0x4			  ## cache.c:164:5
  10656e:    c4 17             	call -0x78 <DcuCmdKst : 1064f8 >			  ## cache.c:164:5
  106570:    c0 ff 00 05 1b 00 	r0 = 0x1b0500 <__stub_uECC_vli_cmp_unsafe+0xA9504 : 1b0500 >			  ## cache.c:66:17
  106576:    00 f4 01 09       	[r0 + 0x0] |= 0x1			  ## cache.c:66:17
  10657a:    30 00             	pc = [sp++]			  ## cache.c:203:1


norflash_read:
  10657c:    78 01             	[--sp] = {rets, r8-r4}			  ## norflash.c:314:0
  10657e:    40 60             	r0 = b[r0 + 0x4] (u)			  ## norflash.c:318:19
  106580:    34 08             	r4 = r3
  106582:    26 08             	r6 = r2
  106584:    15 08             	r5 = r1

  106586:    c8 ff 00 41 1e 00 	r8 = 0x1e4100 <__stub_uECC_vli_cmp_unsafe+0xDD104 : 1e4100 >
  10658c:    04 20             	if (r0 == 0x0) goto 0x8 <norflash_read+0x1A : 106596 >
  10658e:    c2 f4 00 89       	[r8 + 0x8] = 0x0			  ## norflash.c:319:28
  106592:    c0 f4 83 89       	[r8 + 0x0] = 0x83			  ## norflash.c:320:28

  106596:    00 70             	r0 = 0x0			  ## norflash.c:324:5
  106598:    07 70             	r7 = 0x0			  ## norflash.c:324:5
  10659a:    bf f3 4d fa       	call -0xb66 <SPI0_cs : 105a38 >			  ## norflash.c:324:5
  10659e:    30 70             	r0 = 0x3			  ## norflash.c:326:5
  1065a0:    bf f3 62 fa       	call -0xb3c <SPI0_WriteByte : 105a68 >			  ## norflash.c:326:5
  1065a4:    88 fd 80 06       	r0 = uextra(r6, p:0x10, l:0x8)			  ## norflash.c:111:5
  1065a8:    bf f3 5e fa       	call -0xb44 <SPI0_WriteByte : 105a68 >			  ## norflash.c:111:5
  1065ac:    88 fd 40 06       	r0 = uextra(r6, p:0x8, l:0x8)			  ## norflash.c:112:5
  1065b0:    bf f3 5a fa       	call -0xb4c <SPI0_WriteByte : 105a68 >			  ## norflash.c:112:5
  1065b4:    80 05             	r0 = r6.b0 (u)			  ## norflash.c:113:5
  1065b6:    bf f3 57 fa       	call -0xb52 <SPI0_WriteByte : 105a68 >			  ## norflash.c:113:5
  1065ba:    80 fc 04 f4       	r0 = r8 + -0xbfc			  ## norflash.c:330:17
  1065be:    0f 40             	[r0 + 0x0] = r7			  ## norflash.c:330:17
  1065c0:    02 fc fc e6       	r2 = r0 + -0x1904
  1065c4:    00 f4 10 2a       	[r2 + 0x0] |= 0x1000			  ## spi0.c:180:18
  1065c8:    a0 70             	r0 = 0xa			  ## spi0.c:181:5
  1065ca:    bf f3 f7 f5       	call -0x1412 <udelay : 1051bc >			  ## spi0.c:181:5
  1065ce:    00 44             	r0 = [r2 + 0x0]			  ## spi0.c:182:18
  1065d0:    30 fd 0c 0a       	r0 = r0 & 0xfffff3ff			  ## spi0.c:182:18
  1065d4:    08 44             	[r2 + 0x0] = r0			  ## spi0.c:182:18
  1065d6:    3d 44             	[r2 + 0xc] = r5			  ## spi0.c:184:18
  1065d8:    20 05             	r0 = r4.l (u)			  ## spi0.c:185:20
  1065da:    48 44             	[r2 + 0x10] = r0			  ## spi0.c:185:18
  1065dc:    bf f3 3a fa       	call -0xb8c <spi0_wait_ok : 105a54 >			  ## spi0.c:187:5
  1065e0:    10 70             	r0 = 0x1			  ## norflash.c:335:5
  1065e2:    bf f3 29 fa       	call -0xbae <SPI0_cs : 105a38 >			  ## norflash.c:335:5
  1065e6:    10 70             	r0 = 0x1			  ## norflash.c:341:5
  1065e8:    17 f6 00 80       	[r8 + 0x0] = r7			  ## norflash.c:338:24
  1065ec:    58 01             	{pc, r8-r4} = [sp++]			  ## norflash.c:341:5


uart_isr:
  1065ee:    e9 01             	[--sp] = {psr, rets, reti}			  ## uart_upgrade.c:185:0
  1065f0:    78 f3 3f 00       	[--sp] = {r5-r0}			  ## uart_upgrade.c:185:0
  1065f4:    20 fb 71 44       	r4 = 0x1e2000			  ## uart_upgrade.c:185:0
  1065f8:    00 48             	r0 = [r4 + 0x0]			  ## uart_upgrade.c:186:16
  1065fa:    0b f3 2a 00       	if ((r0 & 0x800) == 0) goto 0x54 <uart_isr+0x64 : 106652 >			  ## uart_upgrade.c:186:16
  1065fe:    00 f4 80 49       	[r4 + 0x0] |= 0x80			  ## uart_upgrade.c:187:20
  106602:    00 f4 14 4a       	[r4 + 0x0] |= 0x1400			  ## uart_upgrade.c:188:20
  106606:    08 00             	csync			  ## uart_upgrade.c:189:9
  106608:    a0 48             	r0 = [r4 + 0x28]			  ## uart_upgrade.c:190:28
  10660a:    02 70             	r2 = 0x0
  10660c:    c0 ff 80 13 00 00 	r0 = 0x1380 <uart_dma_buffer : 1380 >
  106612:    21 08             	r1 = r2
  106614:    d1 e3 1d 80       	if (r1 > 0x3d) goto 0x3a <uart_isr+0x64 : 106652 >
  106618:    03 fa 00 10       	r3 = b[r1+r0] (u)			  ## uart_upgrade.c:125:14
  10661c:    12 92             	r2 = r1 + 0x1			  ## uart_upgrade.c:125:14
  10661e:    53 e5 f8 1f       	if (r3 != 0x55) goto -0x10 <uart_isr+0x24 : 106612 >			  ## uart_upgrade.c:125:14
  106622:    03 b2             	r3 = r1 + r0			  ## uart_upgrade.c:125:37
  106624:    13 66             	r3 = b[r3 + 0x1] (u)			  ## uart_upgrade.c:125:37
  106626:    01 ff aa 30 f3 ff 	if (r3 != 0xaa) goto -0x1a <uart_isr+0x24 : 106612 >			  ## uart_upgrade.c:125:37
  10662c:    02 70             	r2 = 0x0
  10662e:    c3 ff 40 13 00 00 	r3 = 0x1340 <ut_cmd : 1340 >
  106634:    09 18             	goto 0x12 <uart_isr+0x5A : 106648 >
  106636:    85 b2             	r5 = r1 + r2			  ## uart_upgrade.c:129:45
  106638:    f5 83             	r5 += 0x3f			  ## uart_upgrade.c:129:45
  10663a:    25 fd 3f 59       	r5 = r5 & 0x3f			  ## uart_upgrade.c:129:45
  10663e:    05 fa 00 50       	r5 = b[r5+r0] (u)			  ## uart_upgrade.c:129:30
  106642:    15 fa 00 23       	b[r2+r3] = r5			  ## uart_upgrade.c:129:28
  106646:    12 80             	r2 += 0x1			  ## uart_upgrade.c:128:50
  106648:    52 e1 f5 1f       	if (r2 != 0x15) goto -0x16 <uart_isr+0x48 : 106636 >
  10664c:    bf f3 57 f8       	call -0xf52 <uart_cmd_verify : 1056fe >			  ## uart_upgrade.c:137:20
  106650:    04 30             	if (r0 != 0x0) goto 0x8 <uart_isr+0x6C : 10665a >
  106652:    70 f3 3f 00       	{r5-r0} = [sp++]
  106656:    a9 01             	{psr, rets, reti} = [sp++]
  106658:    22 00             	rti
  10665a:    00 48             	r0 = [r4 + 0x0]			  ## uart_upgrade.c:194:24
  10665c:    f0 b2             	r0 &= 0xffffffdf			  ## uart_upgrade.c:194:24
  10665e:    08 48             	[r4 + 0x0] = r0			  ## uart_upgrade.c:194:24
  106660:    bf f3 84 f8       	call -0xef8 <uart_recv_loader : 10576c >			  ## uart_upgrade.c:195:13


LZ4_setStreamDecode:
  106664:    03 08             	r3 = r0			  ## lz4.c:659:0
  106666:    3a 46             	[r3 + 0xc] = r2			  ## lz4.c:661:23
  106668:    80 b2             	r0 = r1 + r2			  ## lz4.c:662:50
  10666a:    28 46             	[r3 + 0x8] = r0			  ## lz4.c:662:22
  10666c:    01 70             	r1 = 0x0			  ## lz4.c:662:22
  10666e:    09 46             	[r3 + 0x0] = r1			  ## lz4.c:663:25
  106670:    10 70             	r0 = 0x1			  ## lz4.c:665:5
  106672:    19 46             	[r3 + 0x4] = r1			  ## lz4.c:664:25
  106674:    20 00             	rts			  ## lz4.c:665:5


LZ4_decompress_safe_usingDict:
  106676:    7f 01             	[--sp] = {rets, r15-r4}			  ## lz4.c:759:0
  106678:    f8 0b             	sp += -0x10			  ## lz4.c:759:0
  10667a:    0b f5 48 00       	r11 = [sp+72]			  ## lz4.c:759:0
  10667e:    19 08             	r9 = r1			  ## lz4.c:759:0
  106680:    01 08             	r1 = r0			  ## lz4.c:759:0
  106682:    39 02             	[sp+12] = r1			  ## lz4.c:746:9
  106684:    0b e0 bd 00       	if (r11 == 0x0) goto 0x17a <LZ4_decompress_safe_usingDict+0x18C : 106802 >			  ## lz4.c:746:9
  106688:    10 03             	r0 = [sp+68]
  10668a:    b0 09             	r0 += r11			  ## lz4.c:749:19
  10668c:    28 02             	[sp+8] = r0
  10668e:    90 f2 2f 01       	if (r0 == r9) goto 0x25e <LZ4_decompress_safe_usingDict+0x27A : 1068f0 >
  106692:    03 e0 45 02       	if (r3 == 0x0) goto 0x48a <LZ4_decompress_safe_usingDict+0x4AA : 106b20 >
  106696:    80 b2             	r0 = r1 + r2			  ## lz4.c:440:33
  106698:    80 fb 30 29       	r2 = r9 + r3			  ## lz4.c:443:27
  10669c:    2f fc f4 ff       	r15 = r2 + -0xc			  ## lz4.c:456:44
  1066a0:    08 fc f1 ff       	r8 = r0 + -0xf
  1066a4:    0e fc fb ff       	r14 = r0 + -0x5
  1066a8:    1a 02             	[sp+4] = r2
  1066aa:    2a fc fb ff       	r10 = r2 + -0x5
  1066ae:    08 02             	[sp] = r0
  1066b0:    0d fc f8 ff       	r13 = r0 + -0x8
  1066b4:    0c 70             	r12 = 0x0
  1066b6:    97 08             	r7 = r9
  1066b8:    16 08             	r6 = r1
  1066ba:    7a 18             	goto 0xf4 <LZ4_decompress_safe_usingDict+0x13A : 1067b0 >
  1066bc:    d3 f2 98 80       	if (r3 > r13) goto 0x130 <LZ4_decompress_safe_usingDict+0x17A : 1067f0 >
  1066c0:    01 70             	r1 = 0x0
  1066c2:    05 18             	goto 0xa <LZ4_decompress_safe_usingDict+0x58 : 1066ce >
  1066c4:    05 fa 00 61       	r5 = b[r6+r1] (u)			  ## lz4.c:317:16
  1066c8:    15 fa 00 71       	b[r7+r1] = r5			  ## lz4.c:317:14
  1066cc:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  1066ce:    21 f2 f9 bf       	ifs (r1 < r2) goto -0xe <LZ4_decompress_safe_usingDict+0x4E : 1066c4 >
  1066d2:    12 66             	r2 = b[r3 + 0x1] (u)			  ## lz4.c:517:18
  1066d4:    81 f9 02 30       	r1 = b[r3 ++= 0x2] (u)			  ## lz4.c:517:18
  1066d8:    c8 fd 40 12       	r1 <= insert(r2, p:0x8, l:0x8)			  ## lz4.c:517:18
  1066dc:    f2 fd 80 5b       	r5 = r11 >> 0x10			  ## lz4.c:520:27
  1066e0:    62 b8             	r2 = r4 - r1			  ## lz4.c:519:20
  1066e2:    04 3a             	if (r5 != 0x0) goto 0x8 <LZ4_decompress_safe_usingDict+0x76 : 1066ec >
  1066e4:    80 fb b0 52       	r5 = r2 + r11			  ## lz4.c:520:31
  1066e8:    95 f2 13 32       	if (r5 < r9) goto 0x426 <LZ4_decompress_safe_usingDict+0x49C : 106b12 >			  ## lz4.c:520:31
  1066ec:    1c f9 03 40       	b[r4 + 0x3] = r12			  ## lz4.c:234:30
  1066f0:    1c f9 02 40       	b[r4 + 0x2] = r12			  ## lz4.c:234:30
  1066f4:    09 68             	b[r4 + 0x0] = r1			  ## lz4.c:234:30
  1066f6:    0d d2             	r5 = r1 >> 0x8			  ## lz4.c:234:30
  1066f8:    20 fd 0f 09       	r0 = r0 & 0xf			  ## lz4.c:526:24
  1066fc:    1d 68             	b[r4 + 0x1] = r5			  ## lz4.c:234:30
  1066fe:    f0 e0 11 10       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_usingDict+0xAE : 106724 >			  ## lz4.c:234:30
  106702:    f0 70             	r0 = 0xf
  106704:    16 96             	r6 = r3 + 0x1			  ## lz4.c:530:24
  106706:    e6 f2 05 82       	if (r6 > r14) goto 0x40a <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  10670a:    05 66             	r5 = b[r3 + 0x0] (u)			  ## lz4.c:530:21
  10670c:    50 09             	r0 += r5			  ## lz4.c:534:24
  10670e:    63 08             	r3 = r6
  106710:    00 ff ff 50 f7 ff 	if (r5 == 0xff) goto -0x12 <LZ4_decompress_safe_usingDict+0x8E : 106704 >
  106716:    05 b1             	r5 = r0 + r4
  106718:    13 70             	r3 = 0x1
  10671a:    05 f2 01 30       	if (r5 < r0) goto 0x2 <LZ4_decompress_safe_usingDict+0xAA : 106720 >
  10671e:    03 70             	r3 = 0x0
  106720:    02 26             	if (r3 == 0x0) goto 0x4 <LZ4_decompress_safe_usingDict+0xB0 : 106726 >
  106722:    f8 19             	goto 0x3f0 <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  106724:    36 08             	r6 = r3
  106726:    45 90             	r5 = r0 + 0x4			  ## lz4.c:540:16
  106728:    47 b9             	r7 = r4 + r5
  10672a:    92 f2 22 a0       	ifs (r2 >= r9) goto 0x44 <LZ4_decompress_safe_usingDict+0xFC : 106772 >			  ## lz4.c:543:13
  10672e:    a7 f2 f1 81       	if (r7 > r10) goto 0x3e2 <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  106732:    ac 08             	r12 = r10
  106734:    90 fb 20 a9       	r10 = r9 - r2			  ## lz4.c:549:46
  106738:    a5 f2 2a 90       	if (r5 <= r10) goto 0x54 <LZ4_decompress_safe_usingDict+0x11A : 106790 >
  10673c:    20 02             	r0 = [sp+8]			  ## lz4.c:557:36
  10673e:    90 fb a0 10       	r1 = r0 - r10			  ## lz4.c:557:36
  106742:    40 08             	r0 = r4			  ## lz4.c:557:17
  106744:    a2 08             	r2 = r10			  ## lz4.c:557:17
  106746:    bf f3 7b cc       	call -0x670a <memmove : 100040 >			  ## lz4.c:557:17
  10674a:    90 fb a0 55       	r5 = r5 - r10			  ## lz4.c:556:48
  10674e:    80 fb a0 74       	r7 = r4 + r10			  ## lz4.c:558:20
  106752:    90 fb 90 07       	r0 = r7 - r9			  ## lz4.c:559:44
  106756:    05 f2 23 90       	if (r5 <= r0) goto 0x46 <LZ4_decompress_safe_usingDict+0x12A : 1067a0 >			  ## lz4.c:559:21
  10675a:    40 bf             	r0 = r7 + r5			  ## lz4.c:560:49
  10675c:    91 08             	r1 = r9
  10675e:    ca 08             	r10 = r12
  106760:    0c 70             	r12 = 0x0
  106762:    04 18             	goto 0x8 <LZ4_decompress_safe_usingDict+0xF6 : 10676c >
  106764:    82 f9 01 10       	r2 = b[r1 ++= 0x1] (u)			  ## lz4.c:563:33
  106768:    92 f9 01 70       	b[r7 ++= 0x1] = r2			  ## lz4.c:563:31
  10676c:    07 f2 fa 3f       	if (r7 < r0) goto -0xc <LZ4_decompress_safe_usingDict+0xEE : 106764 >
  106770:    1f 18             	goto 0x3e <LZ4_decompress_safe_usingDict+0x13A : 1067b0 >
  106772:    a7 f2 cf 81       	if (r7 > r10) goto 0x39e <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  106776:    60 fb 00 19       	r0 = 0x0 - r1			  ## lz4.c:519:20
  10677a:    01 70             	r1 = 0x0			  ## lz4.c:519:20
  10677c:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x114 : 10678a >			  ## lz4.c:519:20
  10677e:    42 b0             	r2 = r0 + r1			  ## lz4.c:317:16
  106780:    02 fa 00 42       	r2 = b[r4+r2] (u)			  ## lz4.c:317:16
  106784:    12 fa 00 41       	b[r4+r1] = r2			  ## lz4.c:317:14
  106788:    11 80             	r1 += 0x1			  ## lz4.c:316:32
  10678a:    51 f2 f8 bf       	ifs (r1 < r5) goto -0x10 <LZ4_decompress_safe_usingDict+0x108 : 10677e >
  10678e:    10 18             	goto 0x20 <LZ4_decompress_safe_usingDict+0x13A : 1067b0 >
  106790:    20 02             	r0 = [sp+8]			  ## lz4.c:551:37
  106792:    90 fb a0 10       	r1 = r0 - r10			  ## lz4.c:551:37
  106796:    40 08             	r0 = r4			  ## lz4.c:551:17
  106798:    52 08             	r2 = r5			  ## lz4.c:551:17
  10679a:    bf f3 51 cc       	call -0x675e <memmove : 100040 >			  ## lz4.c:551:17
  10679e:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x136 : 1067ac >			  ## lz4.c:551:17
  1067a0:    70 08             	r0 = r7			  ## lz4.c:566:21
  1067a2:    91 08             	r1 = r9			  ## lz4.c:566:21
  1067a4:    52 08             	r2 = r5			  ## lz4.c:566:21
  1067a6:    bf f3 4b cc       	call -0x676a <memmove : 100040 >			  ## lz4.c:566:21
  1067aa:    57 09             	r7 += r5			  ## lz4.c:567:24
  1067ac:    ca 08             	r10 = r12
  1067ae:    0c 70             	r12 = 0x0
  1067b0:    00 6c             	r0 = b[r6 + 0x0] (u)			  ## lz4.c:473:32
  1067b2:    02 d1             	r2 = r0 >> 0x4			  ## lz4.c:474:30
  1067b4:    16 80             	r6 += 0x1			  ## lz4.c:473:35
  1067b6:    f2 e0 17 10       	if (r2 != 0xf) goto 0x2e <LZ4_decompress_safe_usingDict+0x172 : 1067e8 >
  1067ba:    f2 70             	r2 = 0xf
  1067bc:    81 f9 01 60       	r1 = b[r6 ++= 0x1] (u)			  ## lz4.c:477:21
  1067c0:    12 09             	r2 += r1			  ## lz4.c:478:24
  1067c2:    01 ff ff 10 02 00 	if (r1 != 0xff) goto 0x4 <LZ4_decompress_safe_usingDict+0x156 : 1067cc >
  1067c8:    86 f2 f8 3f       	if (r6 < r8) goto -0x10 <LZ4_decompress_safe_usingDict+0x146 : 1067bc >
  1067cc:    c3 b5             	r3 = r2 + r7
  1067ce:    11 70             	r1 = 0x1
  1067d0:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x160 : 1067d6 >
  1067d4:    01 70             	r1 = 0x0
  1067d6:    01 e0 9d 11       	if (r1 != 0x0) goto 0x33a <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  1067da:    83 b5             	r3 = r2 + r6
  1067dc:    11 70             	r1 = 0x1
  1067de:    23 f2 01 30       	if (r3 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x16E : 1067e4 >
  1067e2:    01 70             	r1 = 0x0
  1067e4:    01 e0 96 11       	if (r1 != 0x0) goto 0x32c <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  1067e8:    84 be             	r4 = r7 + r2			  ## lz4.c:489:18
  1067ea:    83 bc             	r3 = r6 + r2			  ## lz4.c:490:89
  1067ec:    f4 f2 66 9f       	if (r4 <= r15) goto -0x134 <LZ4_decompress_safe_usingDict+0x46 : 1066bc >
  1067f0:    10 02             	r0 = [sp+4]
  1067f2:    04 f2 8f 81       	if (r4 > r0) goto 0x31e <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  1067f6:    00 02             	r0 = [sp]
  1067f8:    03 f2 8c 11       	if (r3 != r0) goto 0x318 <LZ4_decompress_safe_usingDict+0x49E : 106b14 >
  1067fc:    70 08             	r0 = r7			  ## lz4.c:507:13
  1067fe:    61 08             	r1 = r6			  ## lz4.c:507:13
  106800:    72 19             	goto 0x2e4 <LZ4_decompress_safe_usingDict+0x470 : 106ae6 >			  ## lz4.c:507:13
  106802:    03 e0 8d 01       	if (r3 == 0x0) goto 0x31a <LZ4_decompress_safe_usingDict+0x4AA : 106b20 >
  106806:    8c b2             	r12 = r1 + r2			  ## lz4.c:440:33
  106808:    80 fb 30 09       	r0 = r9 + r3			  ## lz4.c:443:27
  10680c:    0d fc f4 ff       	r13 = r0 + -0xc			  ## lz4.c:456:44
  106810:    c6 fc f1 ff       	r6 = r12 + -0xf
  106814:    ca fc fb ff       	r10 = r12 + -0x5
  106818:    18 02             	[sp+4] = r0
  10681a:    b0 8f             	r0 += -0x5
  10681c:    28 02             	[sp+8] = r0
  10681e:    ce fc f8 ff       	r14 = r12 + -0x8
  106822:    0b 70             	r11 = 0x0
  106824:    90 08             	r0 = r9
  106826:    0c 18             	goto 0x18 <LZ4_decompress_safe_usingDict+0x1CA : 106840 >
  106828:    62 fb 00 29       	r2 = 0x0 - r2			  ## lz4.c:519:20
  10682c:    05 70             	r5 = 0x0			  ## lz4.c:519:20
  10682e:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x1C6 : 10683c >			  ## lz4.c:519:20
  106830:    47 b5             	r7 = r2 + r5			  ## lz4.c:317:16
  106832:    07 fa 00 47       	r7 = b[r4+r7] (u)			  ## lz4.c:317:16
  106836:    17 fa 00 45       	b[r4+r5] = r7			  ## lz4.c:317:14
  10683a:    15 80             	r5 += 0x1			  ## lz4.c:316:32
  10683c:    35 f2 f8 bf       	ifs (r5 < r3) goto -0x10 <LZ4_decompress_safe_usingDict+0x1BA : 106830 >
  106840:    0f f9 00 10       	r15 = b[r1 + 0x0] (u)			  ## lz4.c:473:32
  106844:    f2 fd 20 2f       	r2 = r15 >> 0x4			  ## lz4.c:474:30
  106848:    11 80             	r1 += 0x1			  ## lz4.c:473:35
  10684a:    f2 e0 17 10       	if (r2 != 0xf) goto 0x2e <LZ4_decompress_safe_usingDict+0x206 : 10687c >
  10684e:    f2 70             	r2 = 0xf
  106850:    83 f9 01 10       	r3 = b[r1 ++= 0x1] (u)			  ## lz4.c:477:21
  106854:    32 09             	r2 += r3			  ## lz4.c:478:24
  106856:    01 ff ff 30 02 00 	if (r3 != 0xff) goto 0x4 <LZ4_decompress_safe_usingDict+0x1EA : 106860 >
  10685c:    61 f2 f8 3f       	if (r1 < r6) goto -0x10 <LZ4_decompress_safe_usingDict+0x1DA : 106850 >
  106860:    04 b4             	r4 = r2 + r0
  106862:    13 70             	r3 = 0x1
  106864:    24 f2 01 30       	if (r4 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x1F4 : 10686a >
  106868:    03 70             	r3 = 0x0
  10686a:    03 e0 65 11       	if (r3 != 0x0) goto 0x2ca <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  10686e:    44 b4             	r4 = r2 + r1
  106870:    13 70             	r3 = 0x1
  106872:    24 f2 01 30       	if (r4 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x202 : 106878 >
  106876:    03 70             	r3 = 0x0
  106878:    03 e0 5e 11       	if (r3 != 0x0) goto 0x2bc <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  10687c:    84 b0             	r4 = r0 + r2			  ## lz4.c:489:18
  10687e:    83 b2             	r3 = r1 + r2			  ## lz4.c:490:89
  106880:    d4 f2 2c 81       	if (r4 > r13) goto 0x258 <LZ4_decompress_safe_usingDict+0x466 : 106adc >
  106884:    e3 f2 2a 81       	if (r3 > r14) goto 0x254 <LZ4_decompress_safe_usingDict+0x466 : 106adc >
  106888:    05 70             	r5 = 0x0
  10688a:    05 18             	goto 0xa <LZ4_decompress_safe_usingDict+0x220 : 106896 >
  10688c:    08 fa 00 15       	r8 = b[r1+r5] (u)			  ## lz4.c:317:16
  106890:    18 fa 00 05       	b[r0+r5] = r8			  ## lz4.c:317:14
  106894:    15 80             	r5 += 0x1			  ## lz4.c:316:32
  106896:    25 f2 f9 bf       	ifs (r5 < r2) goto -0xe <LZ4_decompress_safe_usingDict+0x216 : 10688c >
  10689a:    10 66             	r0 = b[r3 + 0x1] (u)			  ## lz4.c:517:18
  10689c:    82 f9 02 30       	r2 = b[r3 ++= 0x2] (u)			  ## lz4.c:517:18
  1068a0:    c8 fd 40 20       	r2 <= insert(r0, p:0x8, l:0x8)			  ## lz4.c:517:18
  1068a4:    a0 b8             	r0 = r4 - r2			  ## lz4.c:519:20
  1068a6:    90 f2 39 31       	if (r0 < r9) goto 0x272 <LZ4_decompress_safe_usingDict+0x4A6 : 106b1c >
  1068aa:    1b f9 03 40       	b[r4 + 0x3] = r11			  ## lz4.c:234:30
  1068ae:    1b f9 02 40       	b[r4 + 0x2] = r11			  ## lz4.c:234:30
  1068b2:    0a 68             	b[r4 + 0x0] = r2			  ## lz4.c:234:30
  1068b4:    11 d2             	r1 = r2 >> 0x8			  ## lz4.c:234:30
  1068b6:    20 fd 0f f9       	r0 = r15 & 0xf			  ## lz4.c:526:24
  1068ba:    19 68             	b[r4 + 0x1] = r1			  ## lz4.c:234:30
  1068bc:    f0 e0 11 10       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_usingDict+0x26C : 1068e2 >			  ## lz4.c:234:30
  1068c0:    f0 70             	r0 = 0xf
  1068c2:    11 96             	r1 = r3 + 0x1			  ## lz4.c:530:24
  1068c4:    a1 f2 38 81       	if (r1 > r10) goto 0x270 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1068c8:    05 66             	r5 = b[r3 + 0x0] (u)			  ## lz4.c:530:21
  1068ca:    50 09             	r0 += r5			  ## lz4.c:534:24
  1068cc:    13 08             	r3 = r1
  1068ce:    00 ff ff 50 f7 ff 	if (r5 == 0xff) goto -0x12 <LZ4_decompress_safe_usingDict+0x24C : 1068c2 >
  1068d4:    05 b1             	r5 = r0 + r4
  1068d6:    13 70             	r3 = 0x1
  1068d8:    05 f2 01 30       	if (r5 < r0) goto 0x2 <LZ4_decompress_safe_usingDict+0x268 : 1068de >
  1068dc:    03 70             	r3 = 0x0
  1068de:    02 26             	if (r3 == 0x0) goto 0x4 <LZ4_decompress_safe_usingDict+0x26E : 1068e4 >
  1068e0:    2b 19             	goto 0x256 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1068e2:    31 08             	r1 = r3
  1068e4:    43 90             	r3 = r0 + 0x4			  ## lz4.c:540:16
  1068e6:    c0 b8             	r0 = r4 + r3			  ## lz4.c:574:18
  1068e8:    25 02             	r5 = [sp+8]
  1068ea:    50 f2 9d 9f       	if (r0 <= r5) goto -0xc6 <LZ4_decompress_safe_usingDict+0x1B2 : 106828 >
  1068ee:    24 19             	goto 0x248 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1068f0:    c0 ff ff ff 00 00 	r0 = 0xffff <_IRQ_MEM_ADDR+0xFE : fffe >			  ## lz4.c:750:13
  1068f6:    0b f2 7f b0       	ifs (r11 < r0) goto 0xfe <LZ4_decompress_safe_usingDict+0x382 : 1069f8 >			  ## lz4.c:750:13
  1068fa:    03 e0 11 01       	if (r3 == 0x0) goto 0x222 <LZ4_decompress_safe_usingDict+0x4AA : 106b20 >
  1068fe:    88 b2             	r8 = r1 + r2			  ## lz4.c:440:33
  106900:    80 fb 30 09       	r0 = r9 + r3			  ## lz4.c:443:27
  106904:    0b fc f4 ff       	r11 = r0 + -0xc			  ## lz4.c:456:44
  106908:    87 fc f1 ff       	r7 = r8 + -0xf
  10690c:    8c fc fb ff       	r12 = r8 + -0x5
  106910:    b0 8f             	r0 += -0x5
  106912:    28 02             	[sp+8] = r0
  106914:    8e fc f8 ff       	r14 = r8 + -0x8
  106918:    0a 70             	r10 = 0x0
  10691a:    0c 18             	goto 0x18 <LZ4_decompress_safe_usingDict+0x2BE : 106934 >
  10691c:    60 fb 00 09       	r0 = 0x0 - r0			  ## lz4.c:316:14
  106920:    05 70             	r5 = 0x0			  ## lz4.c:316:14
  106922:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x2BA : 106930 >
  106924:    44 b1             	r4 = r0 + r5			  ## lz4.c:317:16
  106926:    04 fa 00 64       	r4 = b[r6+r4] (u)			  ## lz4.c:317:16
  10692a:    14 fa 00 65       	b[r6+r5] = r4			  ## lz4.c:317:14
  10692e:    15 80             	r5 += 0x1			  ## lz4.c:316:32
  106930:    25 f2 f8 bf       	ifs (r5 < r2) goto -0x10 <LZ4_decompress_safe_usingDict+0x2AE : 106924 >
  106934:    0f f9 00 10       	r15 = b[r1 + 0x0] (u)			  ## lz4.c:473:32
  106938:    80 fb a0 09       	r0 = r9 + r10			  ## lz4.c:439:17
  10693c:    f2 fd 20 2f       	r2 = r15 >> 0x4			  ## lz4.c:474:30
  106940:    11 80             	r1 += 0x1			  ## lz4.c:473:35
  106942:    f2 e0 15 10       	if (r2 != 0xf) goto 0x2a <LZ4_decompress_safe_usingDict+0x2FA : 106970 >
  106946:    f2 70             	r2 = 0xf
  106948:    85 f9 01 10       	r5 = b[r1 ++= 0x1] (u)			  ## lz4.c:477:21
  10694c:    52 09             	r2 += r5			  ## lz4.c:478:24
  10694e:    01 ff ff 50 02 00 	if (r5 != 0xff) goto 0x4 <LZ4_decompress_safe_usingDict+0x2E2 : 106958 >
  106954:    71 f2 f8 3f       	if (r1 < r7) goto -0x10 <LZ4_decompress_safe_usingDict+0x2D2 : 106948 >
  106958:    06 b4             	r6 = r2 + r0
  10695a:    15 70             	r5 = 0x1
  10695c:    26 f2 01 30       	if (r6 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x2EC : 106962 >
  106960:    05 70             	r5 = 0x0
  106962:    ea 3a             	if (r5 != 0x0) goto 0x1d4 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106964:    46 b4             	r6 = r2 + r1
  106966:    15 70             	r5 = 0x1
  106968:    26 f2 01 30       	if (r6 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x2F8 : 10696e >
  10696c:    05 70             	r5 = 0x0
  10696e:    e4 3a             	if (r5 != 0x0) goto 0x1c8 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106970:    80 fb a0 42       	r4 = r2 + r10			  ## lz4.c:489:18
  106974:    80 fb 40 69       	r6 = r9 + r4			  ## lz4.c:444:11
  106978:    8d b2             	r13 = r1 + r2			  ## lz4.c:490:89
  10697a:    b6 f2 b9 80       	if (r6 > r11) goto 0x172 <LZ4_decompress_safe_usingDict+0x47A : 106af0 >
  10697e:    ed f2 b7 80       	if (r13 > r14) goto 0x16e <LZ4_decompress_safe_usingDict+0x47A : 106af0 >
  106982:    0a 70             	r10 = 0x0
  106984:    05 18             	goto 0xa <LZ4_decompress_safe_usingDict+0x31A : 106990 >
  106986:    05 fa 00 1a       	r5 = b[r1+r10] (u)			  ## lz4.c:317:16
  10698a:    15 fa 00 0a       	b[r0+r10] = r5			  ## lz4.c:317:14
  10698e:    1a 80             	r10 += 0x1			  ## lz4.c:316:32
  106990:    2a f2 f9 bf       	ifs (r10 < r2) goto -0xe <LZ4_decompress_safe_usingDict+0x310 : 106986 >
  106994:    01 f9 01 d0       	r1 = b[r13 + 0x1] (u)			  ## lz4.c:517:18
  106998:    80 f9 02 d0       	r0 = b[r13 ++= 0x2] (u)			  ## lz4.c:517:18
  10699c:    c8 fd 40 01       	r0 <= insert(r1, p:0x8, l:0x8)			  ## lz4.c:517:18
  1069a0:    21 b8             	r1 = r4 - r0			  ## lz4.c:519:20
  1069a2:    c2 ff 00 00 ff ff 	r2 = 0xffff0000 <__stub_uECC_vli_cmp_unsafe+0xFFEE9004 : ffff0000 >
  1069a8:    21 f2 c3 b0       	ifs (r1 < r2) goto 0x186 <LZ4_decompress_safe_usingDict+0x4BC : 106b32 >
  1069ac:    01 70             	r1 = 0x0
  1069ae:    39 6c             	b[r6 + 0x3] = r1			  ## lz4.c:234:30
  1069b0:    29 6c             	b[r6 + 0x2] = r1			  ## lz4.c:234:30
  1069b2:    08 6c             	b[r6 + 0x0] = r0			  ## lz4.c:234:30
  1069b4:    01 d2             	r1 = r0 >> 0x8			  ## lz4.c:234:30
  1069b6:    22 fd 0f f9       	r2 = r15 & 0xf			  ## lz4.c:526:24
  1069ba:    19 6c             	b[r6 + 0x1] = r1			  ## lz4.c:234:30
  1069bc:    f2 e0 13 10       	if (r2 != 0xf) goto 0x26 <LZ4_decompress_safe_usingDict+0x370 : 1069e6 >			  ## lz4.c:234:30
  1069c0:    f2 70             	r2 = 0xf
  1069c2:    d1 fc 01 00       	r1 = r13 + 0x1			  ## lz4.c:530:24
  1069c6:    c1 f2 b7 80       	if (r1 > r12) goto 0x16e <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1069ca:    05 f9 00 d0       	r5 = b[r13 + 0x0] (u)			  ## lz4.c:530:21
  1069ce:    52 09             	r2 += r5			  ## lz4.c:534:24
  1069d0:    1d 08             	r13 = r1
  1069d2:    00 ff ff 50 f5 ff 	if (r5 == 0xff) goto -0x16 <LZ4_decompress_safe_usingDict+0x34C : 1069c2 >
  1069d8:    8a b5             	r10 = r2 + r6
  1069da:    15 70             	r5 = 0x1
  1069dc:    2a f2 01 30       	if (r10 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x36C : 1069e2 >
  1069e0:    05 70             	r5 = 0x0
  1069e2:    02 2a             	if (r5 == 0x0) goto 0x4 <LZ4_decompress_safe_usingDict+0x372 : 1069e8 >
  1069e4:    a9 18             	goto 0x152 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1069e6:    d1 08             	r1 = r13
  1069e8:    42 80             	r2 += 0x4			  ## lz4.c:540:16
  1069ea:    0a b5             	r10 = r2 + r4			  ## lz4.c:574:18
  1069ec:    80 fb a0 59       	r5 = r9 + r10			  ## lz4.c:444:11
  1069f0:    24 02             	r4 = [sp+8]
  1069f2:    45 f2 93 9f       	if (r5 <= r4) goto -0xda <LZ4_decompress_safe_usingDict+0x2A6 : 10691c >
  1069f6:    a0 18             	goto 0x140 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  1069f8:    93 26             	if (r3 == 0x0) goto 0x126 <LZ4_decompress_safe_usingDict+0x4AA : 106b20 >
  1069fa:    8c b2             	r12 = r1 + r2			  ## lz4.c:440:33
  1069fc:    90 fb b0 d9       	r13 = r9 - r11			  ## lz4.c:753:120
  106a00:    80 fb 30 09       	r0 = r9 + r3			  ## lz4.c:443:27
  106a04:    0e fc f4 ff       	r14 = r0 + -0xc			  ## lz4.c:456:44
  106a08:    c7 fc f1 ff       	r7 = r12 + -0xf
  106a0c:    cb fc fb ff       	r11 = r12 + -0x5
  106a10:    18 02             	[sp+4] = r0
  106a12:    b0 8f             	r0 += -0x5
  106a14:    28 02             	[sp+8] = r0
  106a16:    cf fc f8 ff       	r15 = r12 + -0x8
  106a1a:    90 08             	r0 = r9
  106a1c:    0c 18             	goto 0x18 <LZ4_decompress_safe_usingDict+0x3C0 : 106a36 >
  106a1e:    62 fb 00 29       	r2 = 0x0 - r2			  ## lz4.c:519:20
  106a22:    06 70             	r6 = 0x0			  ## lz4.c:519:20
  106a24:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x3BC : 106a32 >			  ## lz4.c:519:20
  106a26:    83 b5             	r3 = r2 + r6			  ## lz4.c:317:16
  106a28:    03 fa 00 53       	r3 = b[r5+r3] (u)			  ## lz4.c:317:16
  106a2c:    13 fa 00 56       	b[r5+r6] = r3			  ## lz4.c:317:14
  106a30:    16 80             	r6 += 0x1			  ## lz4.c:316:32
  106a32:    46 f2 f8 bf       	ifs (r6 < r4) goto -0x10 <LZ4_decompress_safe_usingDict+0x3B0 : 106a26 >
  106a36:    06 62             	r6 = b[r1 + 0x0] (u)			  ## lz4.c:473:32
  106a38:    32 d1             	r2 = r6 >> 0x4			  ## lz4.c:474:30
  106a3a:    11 80             	r1 += 0x1			  ## lz4.c:473:35
  106a3c:    f2 e0 15 10       	if (r2 != 0xf) goto 0x2a <LZ4_decompress_safe_usingDict+0x3F4 : 106a6a >
  106a40:    f2 70             	r2 = 0xf
  106a42:    84 f9 01 10       	r4 = b[r1 ++= 0x1] (u)			  ## lz4.c:477:21
  106a46:    42 09             	r2 += r4			  ## lz4.c:478:24
  106a48:    01 ff ff 40 02 00 	if (r4 != 0xff) goto 0x4 <LZ4_decompress_safe_usingDict+0x3DC : 106a52 >
  106a4e:    71 f2 f8 3f       	if (r1 < r7) goto -0x10 <LZ4_decompress_safe_usingDict+0x3CC : 106a42 >
  106a52:    05 b4             	r5 = r2 + r0
  106a54:    14 70             	r4 = 0x1
  106a56:    25 f2 01 30       	if (r5 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x3E6 : 106a5c >
  106a5a:    04 70             	r4 = 0x0
  106a5c:    6d 38             	if (r4 != 0x0) goto 0xda <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106a5e:    45 b4             	r5 = r2 + r1
  106a60:    14 70             	r4 = 0x1
  106a62:    25 f2 01 30       	if (r5 < r2) goto 0x2 <LZ4_decompress_safe_usingDict+0x3F2 : 106a68 >
  106a66:    04 70             	r4 = 0x0
  106a68:    67 38             	if (r4 != 0x0) goto 0xce <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106a6a:    85 b0             	r5 = r0 + r2			  ## lz4.c:489:18
  106a6c:    84 b2             	r4 = r1 + r2			  ## lz4.c:490:89
  106a6e:    e5 f2 46 80       	if (r5 > r14) goto 0x8c <LZ4_decompress_safe_usingDict+0x488 : 106afe >
  106a72:    f4 f2 44 80       	if (r4 > r15) goto 0x88 <LZ4_decompress_safe_usingDict+0x488 : 106afe >
  106a76:    08 70             	r8 = 0x0
  106a78:    05 18             	goto 0xa <LZ4_decompress_safe_usingDict+0x40E : 106a84 >
  106a7a:    0a fa 00 18       	r10 = b[r1+r8] (u)			  ## lz4.c:317:16
  106a7e:    1a fa 00 08       	b[r0+r8] = r10			  ## lz4.c:317:14
  106a82:    18 80             	r8 += 0x1			  ## lz4.c:316:32
  106a84:    28 f2 f9 bf       	ifs (r8 < r2) goto -0xe <LZ4_decompress_safe_usingDict+0x404 : 106a7a >
  106a88:    10 68             	r0 = b[r4 + 0x1] (u)			  ## lz4.c:517:18
  106a8a:    82 f9 02 40       	r2 = b[r4 ++= 0x2] (u)			  ## lz4.c:517:18
  106a8e:    c8 fd 40 20       	r2 <= insert(r0, p:0x8, l:0x8)			  ## lz4.c:517:18
  106a92:    a0 ba             	r0 = r5 - r2			  ## lz4.c:519:20
  106a94:    d0 f2 4f 30       	if (r0 < r13) goto 0x9e <LZ4_decompress_safe_usingDict+0x4C0 : 106b36 >
  106a98:    00 70             	r0 = 0x0
  106a9a:    38 6a             	b[r5 + 0x3] = r0			  ## lz4.c:234:30
  106a9c:    28 6a             	b[r5 + 0x2] = r0			  ## lz4.c:234:30
  106a9e:    0a 6a             	b[r5 + 0x0] = r2			  ## lz4.c:234:30
  106aa0:    11 d2             	r1 = r2 >> 0x8			  ## lz4.c:234:30
  106aa2:    20 fd 0f 69       	r0 = r6 & 0xf			  ## lz4.c:526:24
  106aa6:    19 6a             	b[r5 + 0x1] = r1			  ## lz4.c:234:30
  106aa8:    f0 e0 11 10       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_usingDict+0x458 : 106ace >			  ## lz4.c:234:30
  106aac:    f0 70             	r0 = 0xf
  106aae:    11 98             	r1 = r4 + 0x1			  ## lz4.c:530:24
  106ab0:    b1 f2 42 80       	if (r1 > r11) goto 0x84 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106ab4:    06 68             	r6 = b[r4 + 0x0] (u)			  ## lz4.c:530:21
  106ab6:    60 09             	r0 += r6			  ## lz4.c:534:24
  106ab8:    14 08             	r4 = r1
  106aba:    00 ff ff 60 f7 ff 	if (r6 == 0xff) goto -0x12 <LZ4_decompress_safe_usingDict+0x438 : 106aae >
  106ac0:    46 b1             	r6 = r0 + r5
  106ac2:    14 70             	r4 = 0x1
  106ac4:    06 f2 01 30       	if (r6 < r0) goto 0x2 <LZ4_decompress_safe_usingDict+0x454 : 106aca >
  106ac8:    04 70             	r4 = 0x0
  106aca:    02 28             	if (r4 == 0x0) goto 0x4 <LZ4_decompress_safe_usingDict+0x45A : 106ad0 >
  106acc:    35 18             	goto 0x6a <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106ace:    41 08             	r1 = r4
  106ad0:    44 90             	r4 = r0 + 0x4			  ## lz4.c:540:16
  106ad2:    00 bb             	r0 = r5 + r4			  ## lz4.c:574:18
  106ad4:    23 02             	r3 = [sp+8]
  106ad6:    30 f2 a2 9f       	if (r0 <= r3) goto -0xbc <LZ4_decompress_safe_usingDict+0x3A8 : 106a1e >
  106ada:    2e 18             	goto 0x5c <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106adc:    15 02             	r5 = [sp+4]
  106ade:    54 f2 2b 80       	if (r4 > r5) goto 0x56 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106ae2:    c3 f2 29 10       	if (r3 != r12) goto 0x52 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106ae6:    bf f3 ab ca       	call -0x6aaa <memmove : 100040 >
  106aea:    90 fb 90 44       	r4 = r4 - r9
  106aee:    27 18             	goto 0x4e <LZ4_decompress_safe_usingDict+0x4C8 : 106b3e >
  106af0:    34 f2 22 c0       	ifs (r4 > r3) goto 0x44 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106af4:    8d f2 20 10       	if (r13 != r8) goto 0x40 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106af8:    bf f3 a2 ca       	call -0x6abc <memmove : 100040 >			  ## lz4.c:507:13
  106afc:    20 18             	goto 0x40 <LZ4_decompress_safe_usingDict+0x4C8 : 106b3e >
  106afe:    13 02             	r3 = [sp+4]
  106b00:    35 f2 1a 80       	if (r5 > r3) goto 0x34 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106b04:    c4 f2 18 10       	if (r4 != r12) goto 0x30 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106b08:    bf f3 9a ca       	call -0x6acc <memmove : 100040 >			  ## lz4.c:507:13
  106b0c:    90 fb 90 45       	r4 = r5 - r9			  ## lz4.c:622:35
  106b10:    16 18             	goto 0x2c <LZ4_decompress_safe_usingDict+0x4C8 : 106b3e >
  106b12:    36 08             	r6 = r3
  106b14:    30 02             	r0 = [sp+12]			  ## lz4.c:629:18
  106b16:    f0 8f             	r0 += -0x1			  ## lz4.c:629:18
  106b18:    a4 b1             	r4 = r0 - r6			  ## lz4.c:629:47
  106b1a:    11 18             	goto 0x22 <LZ4_decompress_safe_usingDict+0x4C8 : 106b3e >			  ## lz4.c:629:47
  106b1c:    31 08             	r1 = r3
  106b1e:    0c 18             	goto 0x18 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106b20:    10 70             	r0 = 0x1
  106b22:    12 e0 03 10       	if (r2 != 0x1) goto 0x6 <LZ4_decompress_safe_usingDict+0x4B6 : 106b2c >
  106b26:    01 62             	r1 = b[r1 + 0x0] (u)
  106b28:    01 32             	if (r1 != 0x0) goto 0x2 <LZ4_decompress_safe_usingDict+0x4B6 : 106b2c >
  106b2a:    00 70             	r0 = 0x0
  106b2c:    64 fb 00 09       	r4 = 0x0 - r0
  106b30:    06 18             	goto 0xc <LZ4_decompress_safe_usingDict+0x4C8 : 106b3e >
  106b32:    d1 08             	r1 = r13
  106b34:    01 18             	goto 0x2 <LZ4_decompress_safe_usingDict+0x4C2 : 106b38 >
  106b36:    41 08             	r1 = r4
  106b38:    30 02             	r0 = [sp+12]
  106b3a:    f0 8f             	r0 += -0x1
  106b3c:    64 b0             	r4 = r0 - r1
  106b3e:    40 08             	r0 = r4			  ## lz4.c:760:5
  106b40:    08 0a             	sp += 0x10			  ## lz4.c:760:5
  106b42:    5f 01             	{pc, r15-r4} = [sp++]			  ## lz4.c:760:5


doe:
  106b44:    76 01             	[--sp] = {rets, r6-r4}			  ## crc.c:116:0
  106b46:    02 26             	if (r3 == 0x0) goto 0x4 <doe+0x8 : 106b4c >			  ## crc.c:116:0
  106b48:    9b d0             	r3 = r3 >> 0x2			  ## crc.c:106:19
  106b4a:    d0 b6             	r0 ^= r3			  ## crc.c:106:25
  106b4c:    f2 8f             	r2 += -0x1
  106b4e:    03 fb de ef       	r3 = -0x1022 <__stub_uECC_vli_cmp_unsafe+0xFFFFFFFFFFEF7FE2 : ffffffffffffefde >
  106b52:    04 08             	r4 = r0
  106b54:    13 18             	goto 0x26 <doe+0x38 : 106b7c >
  106b56:    44 c0             	r4 = r0 << 0x1			  ## crc.c:91:24
  106b58:    54 b7             	r4 &= r3			  ## crc.c:92:19
  106b5a:    20 04             	r0 = r0.l (u)			  ## crc.c:89:33
  106b5c:    c5 d3             	r5 = r0 >> 0xf			  ## crc.c:89:33
  106b5e:    54 ba             	r4 |= r5			  ## crc.c:92:19
  106b60:    c6 d2             	r6 = r0 >> 0xb			  ## crc.c:92:30
  106b62:    d6 ba             	r6 ^= r5			  ## crc.c:92:34
  106b64:    36 c3             	r6 = r6 << 0xc			  ## crc.c:92:19
  106b66:    26 fd 10 6a       	r6 = r6 & 0x1000			  ## crc.c:92:19
  106b6a:    54 bc             	r4 |= r6			  ## crc.c:93:18
  106b6c:    00 d1             	r0 = r0 >> 0x4			  ## crc.c:93:29
  106b6e:    d0 ba             	r0 ^= r5			  ## crc.c:93:32
  106b70:    40 c1             	r0 = r0 << 0x5			  ## crc.c:93:18
  106b72:    20 fd 20 09       	r0 = r0 & 0x20			  ## crc.c:93:18
  106b76:    50 b8             	r0 |= r4			  ## crc.c:94:18
  106b78:    04 04             	r4 = r0.b0 (u)			  ## crc.c:98:21
  106b7a:    f2 8f             	r2 += -0x1			  ## crc.c:110:5
  106b7c:    05 62             	r5 = b[r1 + 0x0] (u)
  106b7e:    d4 ba             	r4 ^= r5
  106b80:    94 f9 01 10       	b[r1 ++= 0x1] = r4
  106b84:    e8 35             	if (r2 != 0x0) goto -0x30 <doe+0x12 : 106b56 >
  106b86:    56 01             	{pc, r6-r4} = [sp++]			  ## crc.c:119:1


_sdk_mkey_lock:
  106b88:    76 01             	[--sp] = {rets, r6-r4}			  ## crc.c:178:0
  106b8a:    f0 0b             	sp += -0x20			  ## crc.c:178:0
  106b8c:    04 08             	r4 = r0			  ## crc.c:178:0
  106b8e:    05 a0             	r5 = sp + 0			  ## crc.c:178:0
  106b90:    02 72             	r2 = 0x20			  ## crc.c:180:5
  106b92:    50 08             	r0 = r5			  ## crc.c:180:5
  106b94:    41 08             	r1 = r4			  ## crc.c:180:5
  106b96:    bf f3 53 ca       	call -0x6b5a <memmove : 100040 >			  ## crc.c:180:5
  106b9a:    46 02             	r6 = [sp+16]			  ## crc.c:182:35
  106b9c:    a0 05             	r0 = r6.l (u)			  ## crc.c:183:5
  106b9e:    02 72             	r2 = 0x20			  ## crc.c:183:5
  106ba0:    03 70             	r3 = 0x0			  ## crc.c:183:5
  106ba2:    51 08             	r1 = r5			  ## crc.c:183:5
  106ba4:    cf 17             	call -0x62 <doe : 106b44 >			  ## crc.c:183:5
  106ba6:    4e 02             	[sp+16] = r6			  ## crc.c:185:29
  106ba8:    60 9a             	r0 = r5 + 0x6			  ## crc.c:187:41
  106baa:    a1 71             	r1 = 0x1a			  ## crc.c:187:15
  106bac:    bf f3 98 f5       	call -0x14d0 <chip_crc16 : 1056e0 >			  ## crc.c:187:15
  106bb0:    82 f5 04 00       	r2 = h[sp+4] (u)			  ## crc.c:189:30
  106bb4:    c1 ff 0c fc 00 00 	r1 = 0xfc0c <puk : fc0c >			  ## crc.c:189:30
  106bba:    20 f2 05 10       	if (r0 != r2) goto 0xa <_sdk_mkey_lock+0x40 : 106bc8 >			  ## crc.c:189:30
  106bbe:    c0 ff 98 36 6c f3 	r0 = 0xf36c3698 <__stub_uECC_vli_cmp_unsafe+0xF35BC69C : f36c3698 >			  ## crc.c:192:29
  106bc4:    d0 b8             	r0 ^= r4			  ## crc.c:192:29
  106bc6:    04 18             	goto 0x8 <_sdk_mkey_lock+0x48 : 106bd0 >			  ## crc.c:192:29
  106bc8:    00 42             	r0 = [r1 + 0x0]			  ## crc.c:190:27
  106bca:    c2 f5 07 00       	r2 = b[sp+7] (u)			  ## crc.c:190:33
  106bce:    d0 b4             	r0 ^= r2			  ## crc.c:190:31
  106bd0:    03 02             	r3 = [sp]			  ## crc.c:195:37
  106bd2:    08 42             	[r1 + 0x0] = r0			  ## crc.c:195:37
  106bd4:    c5 ff 4a 4b 59 53 	r5 = 0x53594b4a <__stub_uECC_vli_cmp_unsafe+0x5348DB4E : 53594b4a >			  ## crc.c:195:20
  106bda:    c2 ff 00 3b 1e 00 	r2 = 0x1e3b00 <__stub_uECC_vli_cmp_unsafe+0xDCB04 : 1e3b00 >			  ## crc.c:195:20
  106be0:    64 08             	r4 = r6			  ## crc.c:195:20
  106be2:    53 f2 01 00       	if (r3 == r5) goto 0x2 <_sdk_mkey_lock+0x60 : 106be8 >
  106be6:    14 44             	r4 = [r2 + 0x4]			  ## crc.c:196:42
  106be8:    c5 f5 07 00       	r5 = b[sp+7] (u)			  ## crc.c:201:30
  106bec:    15 e0 01 10       	if (r5 != 0x1) goto 0x2 <_sdk_mkey_lock+0x6A : 106bf2 >			  ## crc.c:201:30
  106bf0:    63 08             	r3 = r6			  ## crc.c:201:9
  106bf2:    86 f5 1e 00       	r6 = h[sp+30] (u)			  ## crc.c:207:25
  106bf6:    d0 b8             	r0 ^= r4
  106bf8:    d0 b6             	r0 ^= r3
  106bfa:    08 42             	[r1 + 0x0] = r0
  106bfc:    f6 e0 04 00       	if (r6 == 0xf) goto 0x8 <_sdk_mkey_lock+0x80 : 106c08 >
  106c00:    02 44             	r2 = [r2 + 0x0]			  ## crc.c:208:68
  106c02:    d0 ba             	r0 ^= r5			  ## crc.c:208:31
  106c04:    d0 b4             	r0 ^= r2			  ## crc.c:208:57
  106c06:    08 42             	[r1 + 0x0] = r0			  ## crc.c:208:13
  106c08:    10 0a             	sp += 0x20
  106c0a:    56 01             	{pc, r6-r4} = [sp++]			  ## crc.c:212:1


endian_change:
  106c0c:    76 01             	[--sp] = {rets, r6-r4}			  ## crc.c:124:0
  106c0e:    10 22             	if (r1 == 0x0) goto 0x20 <endian_change+0x24 : 106c30 >			  ## crc.c:124:0
  106c10:    12 fc ff ff       	r2 = r1 + -0x1			  ## crc.c:124:0
  106c14:    49 d0             	r1 = r1 >> 0x1			  ## crc.c:124:0
  106c16:    03 08             	r3 = r0			  ## crc.c:124:0
  106c18:    0a 18             	goto 0x14 <endian_change+0x22 : 106c2e >			  ## crc.c:124:0
  106c1a:    a4 04             	r4 = r2.l (u)			  ## crc.c:133:22
  106c1c:    05 66             	r5 = b[r3 + 0x0] (u)			  ## crc.c:134:25
  106c1e:    06 fa 00 04       	r6 = b[r0+r4] (u)			  ## crc.c:133:22
  106c22:    15 fa 00 04       	b[r0+r4] = r5			  ## crc.c:134:23
  106c26:    96 f9 01 30       	b[r3 ++= 0x1] = r6			  ## crc.c:135:16
  106c2a:    f2 8f             	r2 += -0x1			  ## crc.c:132:5
  106c2c:    f1 8f             	r1 += -0x1			  ## crc.c:132:5
  106c2e:    f5 33             	if (r1 != 0x0) goto -0x16 <endian_change+0xE : 106c1a >
  106c30:    56 01             	{pc, r6-r4} = [sp++]			  ## crc.c:138:1


p11_boot:
  106c32:    28 fb 00 e3       	r14 = rets			  ## p11.S:7:0
  106c36:    c0 ff 04 3e 1e 00 	r0 = 0x1e3e04 <__stub_uECC_vli_cmp_unsafe+0xDCE08 : 1e3e04 >			  ## p11.S:8:0
  106c3c:    01 40             	r1 = [r0 + 0x0]			  ## p11.S:10:0
  106c3e:    05 f3 fd 1f       	if ((r1 & 0x20) == 0) goto -0x6 <p11_boot+0xA : 106c3c >			  ## p11.S:11:0
  106c42:    f1 7f             	r1 = 0xff			  ## p11.S:13:0
  106c44:    e2 7e             	r2 = 0xee			  ## p11.S:14:0
  106c46:    b3 7a             	r3 = 0xab			  ## p11.S:15:0
  106c48:    e4 70             	r4 = 0xe			  ## p11.S:16:0
  106c4a:    55 75             	r5 = 0x55			  ## p11.S:17:0
  106c4c:    c6 ff ff 1f 1a 00 	r6 = 0x1a1fff <__stub_uECC_vli_cmp_unsafe+0x9B002 : 1a1ffe >			  ## p11.S:19:0
  106c52:    08 18             	goto 0x10 <p11_boot+0x32 : 106c64 >			  ## p11.S:21:0
  106c54:    09 6c             	b[r6 + 0x0] = r1			  ## p11.S:23:0
  106c56:    0a 6c             	b[r6 + 0x0] = r2			  ## p11.S:24:0
  106c58:    0b 6c             	b[r6 + 0x0] = r3			  ## p11.S:25:0
  106c5a:    0c 6c             	b[r6 + 0x0] = r4			  ## p11.S:26:0
  106c5c:    0d 6c             	b[r6 + 0x0] = r5			  ## p11.S:27:0
  106c5e:    08 00             	csync			  ## p11.S:28:0
  106c60:    00 00             	nop			  ## p11.S:29:0
  106c62:    00 00             	nop			  ## p11.S:30:0
  106c64:    07 40             	r7 = [r0 + 0x0]			  ## p11.S:32:0
  106c66:    00 f3 f5 7f       	if ((r7 & 0x1) == 0) goto -0x16 <p11_boot+0x22 : 106c54 >			  ## p11.S:33:0
  106c6a:    c0 ff 8a 1f 1a 00 	r0 = 0x1a1f8a <__stub_uECC_vli_cmp_unsafe+0x9AF8E : 1a1f8a >			  ## p11.S:44:0
  106c70:    00 60             	r0 = b[r0 + 0x0] (u)			  ## p11.S:45:0
  106c72:    27 f3 17 00       	if ((r0 & 0x80) != 0) goto 0x2e <p11_boot+0x72 : 106ca4 >			  ## p11.S:46:0
  106c76:    c0 ff ec 0f 1a 00 	r0 = 0x1a0fec <__stub_uECC_vli_cmp_unsafe+0x99FF0 : 1a0fec >			  ## p11.S:49:0
  106c7c:    16 10             	call 0x2c <read_32 : 106caa >			  ## p11.S:50:0
  106c7e:    c2 ff ef 27 12 ab 	r2 = 0xab1227ef <__stub_uECC_vli_cmp_unsafe+0xAB01B7F2 : ab1227ee >			  ## p11.S:51:0
  106c84:    20 f2 0e 10       	if (r0 != r2) goto 0x1c <p11_boot+0x72 : 106ca4 >			  ## p11.S:52:0
  106c88:    c0 ff f0 0f 1a 00 	r0 = 0x1a0ff0 <__stub_uECC_vli_cmp_unsafe+0x99FF4 : 1a0ff0 >			  ## p11.S:54:0
  106c8e:    0d 10             	call 0x1a <read_32 : 106caa >			  ## p11.S:55:0
  106c90:    29 fb 00 0d       	ssp = r0			  ## p11.S:56:0
  106c94:    c0 ff f4 0f 1a 00 	r0 = 0x1a0ff4 <__stub_uECC_vli_cmp_unsafe+0x99FF8 : 1a0ff4 >			  ## p11.S:58:0
  106c9a:    07 10             	call 0xe <read_32 : 106caa >			  ## p11.S:59:0
  106c9c:    29 fb 00 0c       	usp = r0			  ## p11.S:60:0
  106ca0:    29 fb 00 0e       	sp = r0			  ## p11.S:61:0
  106ca4:    29 fb 00 e3       	rets = r14			  ## p11.S:63:0
  106ca8:    20 00             	rts			  ## p11.S:64:0


read_32:
  106caa:    31 60             	r1 = b[r0 + 0x3] (u)			  ## p11.S:71:0
  106cac:    22 60             	r2 = b[r0 + 0x2] (u)			  ## p11.S:72:0
  106cae:    c8 fd 40 21       	r2 <= insert(r1, p:0x8, l:0x8)			  ## p11.S:73:0
  106cb2:    13 60             	r3 = b[r0 + 0x1] (u)			  ## p11.S:74:0
  106cb4:    00 60             	r0 = b[r0 + 0x0] (u)			  ## p11.S:75:0
  106cb6:    c8 fd 40 03       	r0 <= insert(r3, p:0x8, l:0x8)			  ## p11.S:76:0
  106cba:    d0 fd 80 02       	r0 <= insert(r2, p:0x10, l:0x10)			  ## p11.S:77:0
  106cbe:    20 00             	rts			  ## p11.S:78:0


__muldi3:
  106cc0:    76 01             	[--sp] = {rets, r6-r4}
  106cc2:    89 0e             	r1 = r1 * r2
  106cc4:    80 fe 00 13       	r1 += r3 * r0
  106cc8:    03 d4             	r3 = r0 >> 0x10
  106cca:    14 d4             	r4 = r2 >> 0x10
  106ccc:    80 fe 30 14       	r1 += r4 * r3
  106cd0:    20 04             	r0 = r0.l (u)
  106cd2:    a2 04             	r2 = r2.l (u)
  106cd4:    15 0e             	r5 = r2 * r0
  106cd6:    2e d4             	r6 = r5 >> 0x10
  106cd8:    80 fe 30 62       	r6 += r2 * r3
  106cdc:    32 d4             	r2 = r6 >> 0x10
  106cde:    81 b2             	r1 = r1 + r2
  106ce0:    a2 05             	r2 = r6.l (u)
  106ce2:    80 fe 00 24       	r2 += r4 * r0
  106ce6:    12 d4             	r2 = r2 >> 0x10
  106ce8:    81 b2             	r1 = r1 + r2
  106cea:    80 fe 00 64       	r6 += r4 * r0
  106cee:    60 05             	r0 = r5.l (u)
  106cf0:    d0 fd 80 06       	r0 <= insert(r6, p:0x10, l:0x10)
  106cf4:    56 01             	{pc, r6-r4} = [sp++]
  106cf6:    00 00             	nop
  106cf8:    00 00             	nop
  106cfa:    00 00             	nop
  106cfc:    00 00             	nop
  106cfe:    00 00             	nop


norflash_check_in.spi0_porta_config:
  106d00:	 00 00 00 00                     ....


nvram_boot_tag:
  106d04:	 bf ec cb d9 c6 f4 b6 af         ........
  106d0c:	 00 00 00 00 73 79 73 00         ....sys.
  106d14:	 6f 73 63 00                     osc.


ack_cmd:
  106d18:	 55 aa 01 20 22 75 61 72         U.. "uar
  106d20:	 74 00 00 00                     t...


spi_flash_io_nor:
  106d24:	 f0 fb 00 00 00 00 00 00         ........
  106d2c:	 00 00 00 00 7c 65 10 00         ....|e..


nor_flash_boot_table:
  106d34:	 00 10 00 00 00 00 01 00         ........
  106d3c:	 00 00 02 00 00 00 04 00         ........


CrcDecode.keylcode:
  106d44:	 c3 cf c0 e8 ce d2 b0 ae         ........
  106d4c:	 c4 e3 a3 ac d3 f1 c1 d6         ........
  106d54:	 53 48 41 2d 32 35 36 00         SHA-256.


rom_size:
  106d5c:    00 00             	nop
  106d5e:    00 00             	nop
  106d60:    00 00             	nop
  106d62:    00 00             	nop
  106d64:    00 00             	nop
  106d66:    00 00             	nop
  106d68:    00 00             	nop
  106d6a:    00 00             	nop
  106d6c:    00 00             	nop
  106d6e:    00 00             	nop
  106d70:    00 00             	nop
  106d72:    00 00             	nop
  106d74:    00 00             	nop
  106d76:    00 00             	nop
  106d78:    00 00             	nop
  106d7a:    00 00             	nop
  106d7c:    00 00             	nop
  106d7e:    00 00             	nop
  106d80:    00 00             	nop
  106d82:    00 00             	nop
  106d84:    00 00             	nop
  106d86:    00 00             	nop
  106d88:    00 00             	nop
  106d8a:    00 00             	nop
  106d8c:    00 00             	nop
  106d8e:    00 00             	nop
  106d90:    00 00             	nop
  106d92:    00 00             	nop
  106d94:    00 00             	nop
  106d96:    00 00             	nop


__stub_local_irq_enable:
  106d98:    ff f3 4a cb       	goto -0x696c <local_irq_enable : 100430 >			  ## entry_list.S:7:0


__stub_local_irq_disable:
  106d9c:    ff f3 40 cb       	goto -0x6980 <local_irq_disable : 100420 >			  ## entry_list.S:14:0


__stub_lp_signature_set:
  106da0:    ff f3 89 f1       	goto -0x1cee <lp_signature_set : 1050b6 >			  ## entry_list.S:21:0


__stub_os_init:
  106da4:    ff f3 72 d5       	goto -0x551c <os_init : 10188c >			  ## entry_list.S:28:0


__stub_os_start:
  106da8:    ff f3 91 d5       	goto -0x54de <os_start : 1018ce >			  ## entry_list.S:35:0


__stub_os_get_curr_tcb_var:
  106dac:    ff f3 74 d5       	goto -0x5518 <os_get_curr_tcb_var : 101898 >			  ## entry_list.S:42:0


__stub_os_task_create:
  106db0:    ff f3 c7 d5       	goto -0x5472 <os_task_create : 101942 >			  ## entry_list.S:49:0


__stub_os_current_task_rom:
  106db4:    ff f3 fb d5       	goto -0x540a <os_current_task_rom : 1019ae >			  ## entry_list.S:56:0


__stub_os_time_dly:
  106db8:    ff f3 04 d6       	goto -0x53f8 <os_time_dly : 1019c4 >			  ## entry_list.S:63:0


__stub_os_time_get:
  106dbc:    ff f3 11 d6       	goto -0x53de <os_time_get : 1019e2 >			  ## entry_list.S:70:0


__stub_os_task_del_req:
  106dc0:    ff f3 4c d6       	goto -0x5368 <os_task_del_req : 101a5c >			  ## entry_list.S:77:0


__stub_os_task_del_res:
  106dc4:    ff f3 6c d6       	goto -0x5328 <os_task_del_res : 101aa0 >			  ## entry_list.S:84:0


__stub_os_task_del:
  106dc8:    ff f3 72 d6       	goto -0x531c <os_task_del : 101ab0 >			  ## entry_list.S:91:0


__stub___os_taskq_pend:
  106dcc:    ff f3 d4 d6       	goto -0x5258 <__os_taskq_pend : 101b78 >			  ## entry_list.S:98:0


__stub_os_taskq_pend:
  106dd0:    ff f3 4d d7       	goto -0x5166 <os_taskq_pend : 101c6e >			  ## entry_list.S:105:0


__stub_os_task_pend:
  106dd4:    ff f3 4e d7       	goto -0x5164 <os_task_pend : 101c74 >			  ## entry_list.S:112:0


__stub___os_taskq_post:
  106dd8:    ff f3 4f d7       	goto -0x5162 <__os_taskq_post : 101c7a >			  ## entry_list.S:119:0


__stub_os_taskq_post:
  106ddc:    ff f3 89 d7       	goto -0x50ee <os_taskq_post : 101cf2 >			  ## entry_list.S:126:0


__stub_os_taskq_post_type:
  106de0:    ff f3 a2 d7       	goto -0x50bc <os_taskq_post_type : 101d28 >			  ## entry_list.S:133:0


__stub_os_taskq_flush:
  106de4:    ff f3 a1 d7       	goto -0x50be <os_taskq_flush : 101d2a >			  ## entry_list.S:140:0


__stub_task_queue_post_event:
  106de8:    ff f3 f9 d7       	goto -0x500e <task_queue_post_event : 101dde >			  ## entry_list.S:147:0


__stub_os_taskq_post_msg:
  106dec:    ff f3 fb d7       	goto -0x500a <os_taskq_post_msg : 101de6 >			  ## entry_list.S:154:0


__stub_os_taskq_post_event:
  106df0:    ff f3 14 d8       	goto -0x4fd8 <os_taskq_post_event : 101e1c >			  ## entry_list.S:161:0


__stub_os_taskq_accept:
  106df4:    ff f3 2d d8       	goto -0x4fa6 <os_taskq_accept : 101e52 >			  ## entry_list.S:168:0


__stub_os_taskq_del:
  106df8:    ff f3 2e d8       	goto -0x4fa4 <os_taskq_del : 101e58 >			  ## entry_list.S:175:0


__stub_os_taskq_del_type:
  106dfc:    ff f3 94 d8       	goto -0x4ed8 <os_taskq_del_type : 101f28 >			  ## entry_list.S:182:0


__stub_os_sem_create:
  106e00:    ff f3 93 d8       	goto -0x4eda <os_sem_create : 101f2a >			  ## entry_list.S:189:0


__stub_os_sem_del:
  106e04:    ff f3 b2 d8       	goto -0x4e9c <os_sem_del : 101f6c >			  ## entry_list.S:196:0


__stub_os_sem_pend:
  106e08:    ff f3 b5 d8       	goto -0x4e96 <os_sem_pend : 101f76 >			  ## entry_list.S:203:0


__stub_os_sem_post:
  106e0c:    ff f3 60 d6       	goto -0x5340 <os_sem_post : 101ad0 >			  ## entry_list.S:210:0


__stub_os_sem_set:
  106e10:    ff f3 c5 d8       	goto -0x4e76 <os_sem_set : 101f9e >			  ## entry_list.S:217:0


__stub_os_sem_valid:
  106e14:    ff f3 dc d8       	goto -0x4e48 <os_sem_valid : 101fd0 >			  ## entry_list.S:224:0


__stub_os_sem_query:
  106e18:    ff f3 e1 d8       	goto -0x4e3e <os_sem_query : 101fde >			  ## entry_list.S:231:0


__stub_os_mutex_create:
  106e1c:    ff f3 eb d8       	goto -0x4e2a <os_mutex_create : 101ff6 >			  ## entry_list.S:238:0


__stub_os_mutex_del:
  106e20:    ff f3 ff d8       	goto -0x4e02 <os_mutex_del : 102022 >			  ## entry_list.S:245:0


__stub_os_mutex_pend:
  106e24:    ff f3 0c d9       	goto -0x4de8 <os_mutex_pend : 102040 >			  ## entry_list.S:252:0


__stub_os_mutex_post:
  106e28:    ff f3 4a d9       	goto -0x4d6c <os_mutex_post : 1020c0 >			  ## entry_list.S:259:0


__stub_os_mutex_valid:
  106e2c:    ff f3 7c d9       	goto -0x4d08 <os_mutex_valid : 102128 >			  ## entry_list.S:266:0


__stub_xTaskCreate:
  106e30:    ff f3 55 d2       	goto -0x5b56 <xTaskCreate : 1012de >			  ## entry_list.S:273:0


__stub_xTaskGetCurrentTaskHandle:
  106e34:    ff f3 1e d5       	goto -0x55c4 <xTaskGetCurrentTaskHandle : 101874 >			  ## entry_list.S:280:0


__stub_xTaskGetTickCount:
  106e38:    ff f3 35 d4       	goto -0x5796 <xTaskGetTickCount : 1016a6 >			  ## entry_list.S:287:0


__stub_xTaskGetHandle:
  106e3c:    ff f3 79 d4       	goto -0x570e <xTaskGetHandle : 101732 >			  ## entry_list.S:294:0


__stub_vTaskDelete:
  106e40:    ff f3 43 d3       	goto -0x597a <vTaskDelete : 1014ca >			  ## entry_list.S:301:0


__stub_xTaskGetApplicationTaskTag:
  106e44:    ff f3 e7 d4       	goto -0x5632 <xTaskGetApplicationTaskTag : 101816 >			  ## entry_list.S:308:0


__stub_vTaskSetApplicationTaskTag:
  106e48:    ff f3 d1 d4       	goto -0x565e <vTaskSetApplicationTaskTag : 1017ee >			  ## entry_list.S:315:0


__stub_xQueueGenericCreateStatic:
  106e4c:    ff f3 5f cc       	goto -0x6742 <xQueueGenericCreateStatic : 10070e >			  ## entry_list.S:322:0


__stub_xQueueGenericReset:
  106e50:    ff f3 28 cc       	goto -0x67b0 <xQueueGenericReset : 1006a4 >			  ## entry_list.S:329:0


__stub_xQueueGenericSend:
  106e54:    ff f3 74 cf       	goto -0x6118 <xQueueGenericSend : 100d40 >			  ## entry_list.S:336:0


__stub_xQueueGenericSendFromISR:
  106e58:    ff f3 50 d1       	goto -0x5d60 <xQueueGenericSendFromISR : 1010fc >			  ## entry_list.S:343:0


__stub_xQueueGenericReceive:
  106e5c:    ff f3 30 d0       	goto -0x5fa0 <xQueueGenericReceive : 100ec0 >			  ## entry_list.S:350:0


__stub_xQueueReceiveFromISR:
  106e60:    ff f3 9e d1       	goto -0x5cc4 <xQueueReceiveFromISR : 1011a0 >			  ## entry_list.S:357:0


__stub_vQueueDelete:
  106e64:    ff f3 1e d2       	goto -0x5bc4 <vQueueDelete : 1012a4 >			  ## entry_list.S:364:0


__stub_uxQueueMessagesWaiting:
  106e68:    ff f3 d8 d1       	goto -0x5c50 <uxQueueMessagesWaiting : 10121c >			  ## entry_list.S:371:0


__stub_uxQueueMessagesWaitingFromISR:
  106e6c:    ff f3 08 d2       	goto -0x5bf0 <uxQueueMessagesWaitingFromISR : 101280 >			  ## entry_list.S:378:0


__stub_uxQueueSpacesAvailable:
  106e70:    ff f3 ec d1       	goto -0x5c28 <uxQueueSpacesAvailable : 10124c >			  ## entry_list.S:385:0


__stub_pcTaskGetName:
  106e74:    ff f3 1c d4       	goto -0x57c8 <pcTaskGetName : 1016b0 >			  ## entry_list.S:392:0


__stub_prvGetExpectedIdleTime:
  106e78:    ff f3 93 d3       	goto -0x58da <prvGetExpectedIdleTime : 1015a2 >			  ## entry_list.S:399:0


__stub_eTaskConfirmSleepModeStatus:
  106e7c:    ff f3 df d4       	goto -0x5642 <eTaskConfirmSleepModeStatus : 10183e >			  ## entry_list.S:406:0


__stub_vTaskStepTick:
  106e80:    ff f3 97 d4       	goto -0x56d2 <vTaskStepTick : 1017b2 >			  ## entry_list.S:413:0


__stub_pxPortInitialiseStack:
  106e84:    ff f3 57 d9       	goto -0x4d52 <pxPortInitialiseStack : 102136 >			  ## entry_list.S:420:0


__stub_xPortStartScheduler:
  106e88:    ff f3 0f d5       	goto -0x55e2 <xPortStartScheduler : 1018aa >			  ## entry_list.S:427:0


__stub_vPortEndScheduler:
  106e8c:    ff f3 5a d9       	goto -0x4d4c <vPortEndScheduler : 102144 >			  ## entry_list.S:434:0


__stub_vPortYield:
  106e90:    ff f3 e2 cb       	goto -0x683c <vPortYield : 100658 >			  ## entry_list.S:441:0


__stub_vPortExitCritical:
  106e94:    ff f3 6c d9       	goto -0x4d28 <vPortExitCritical : 102170 >			  ## entry_list.S:448:0


__stub_OS_ClrPending:
  106e98:    ff f3 84 d9       	goto -0x4cf8 <OS_ClrPending : 1021a4 >			  ## entry_list.S:455:0


__stub_vTickISR:
  106e9c:    ff f3 90 d9       	goto -0x4ce0 <vTickISR : 1021c0 >			  ## entry_list.S:462:0


__stub_pmalloc_init:
  106ea0:    ff f3 03 db       	goto -0x49fa <pmalloc_init : 1024aa >			  ## entry_list.S:469:0


__stub_pmalloc:
  106ea4:    ff f3 44 db       	goto -0x4978 <pmalloc : 102530 >			  ## entry_list.S:476:0


__stub_pfree:
  106ea8:    ff f3 7a db       	goto -0x490c <pfree : 1025a0 >			  ## entry_list.S:483:0


__stub_pmalloc_get_unused_pages:
  106eac:    ff f3 37 db       	goto -0x4992 <pmalloc_get_unused_pages : 10251e >			  ## entry_list.S:490:0


__stub_get_physic_address:
  106eb0:    ff f3 6c db       	goto -0x4928 <get_physic_address : 10258c >			  ## entry_list.S:497:0


__stub_pmm_get_var:
  106eb4:    ff f3 2f db       	goto -0x49a2 <pmm_get_var : 102516 >			  ## entry_list.S:504:0


__stub_vmm_init_:
  106eb8:    ff f3 a2 db       	goto -0x48bc <vmm_init_ : 102600 >			  ## entry_list.S:511:0


__stub_vmalloc_:
  106ebc:    ff f3 c8 db       	goto -0x4870 <vmalloc_ : 102650 >			  ## entry_list.S:518:0


__stub_vfree_:
  106ec0:    ff f3 57 dc       	goto -0x4752 <vfree_ : 102772 >			  ## entry_list.S:525:0


__stub_vmem_get_phy_adr:
  106ec4:    ff f3 a4 dd       	goto -0x44b8 <vmem_get_phy_adr : 102a10 >			  ## entry_list.S:532:0


__stub_vmem_start:
  106ec8:    ff f3 bf dd       	goto -0x4482 <vmem_start : 102a4a >			  ## entry_list.S:539:0


__stub_vmem_end:
  106ecc:    ff f3 c4 dd       	goto -0x4478 <vmem_end : 102a58 >			  ## entry_list.S:546:0


__stub_vmm_get_var:
  106ed0:    ff f3 ba db       	goto -0x488c <vmm_get_var : 102648 >			  ## entry_list.S:553:0


__stub_vmalloc_v2:
  106ed4:    ff f3 b7 dc       	goto -0x4692 <vmalloc_v2 : 102846 >			  ## entry_list.S:560:0


__stub_vfree_v2:
  106ed8:    ff f3 1c dd       	goto -0x45c8 <vfree_v2 : 102914 >			  ## entry_list.S:567:0


__stub_vcopy_:
  106edc:    ff f3 73 dd       	goto -0x451a <vcopy_ : 1029c6 >			  ## entry_list.S:574:0


__stub_memmem:
  106ee0:    ff f3 31 c9       	goto -0x6d9e <memmem : 100146 >			  ## entry_list.S:581:0


__stub_memcpy:
  106ee4:    ff f3 ac c8       	goto -0x6ea8 <memmove : 100040 >			  ## entry_list.S:588:0


__stub_memmove:
  106ee8:    ff f3 aa c8       	goto -0x6eac <memmove : 100040 >			  ## entry_list.S:595:0


__stub_memcmp:
  106eec:    ff f3 8a c8       	goto -0x6eec <memcmp : 100004 >			  ## entry_list.S:602:0


__stub_memset:
  106ef0:    ff f3 3d c9       	goto -0x6d86 <memset : 10016e >			  ## entry_list.S:609:0


__stub_strcmp:
  106ef4:    ff f3 71 c9       	goto -0x6d1e <strcmp : 1001da >			  ## entry_list.S:616:0


__stub_strcpy:
  106ef8:    ff f3 c3 c9       	goto -0x6c7a <strcpy : 100282 >			  ## entry_list.S:623:0


__stub_strlen:
  106efc:    ff f3 02 ca       	goto -0x6bfc <strlen : 100304 >			  ## entry_list.S:630:0


__stub_strncmp:
  106f00:    ff f3 07 ca       	goto -0x6bf2 <strncmp : 100312 >			  ## entry_list.S:637:0


__stub_strstr:
  106f04:    ff f3 17 ca       	goto -0x6bd2 <strstr : 100336 >			  ## entry_list.S:644:0


__stub_strchr:
  106f08:    ff f3 5c c9       	goto -0x6d48 <strchr : 1001c4 >			  ## entry_list.S:651:0


__stub_IcuInitial:
  106f0c:    ff f3 24 fb       	goto -0x9b8 <IcuInitial : 106558 >			  ## entry_list.S:658:0


__stub_DcuInitial:
  106f10:    ff f3 2b fb       	goto -0x9aa <DcuInitial : 10656a >			  ## entry_list.S:665:0


__stub_IcuCmdKst:
  106f14:    ff f3 ca fa       	goto -0xa6c <IcuCmdKst : 1064ac >			  ## entry_list.S:672:0


__stub_DcuCmdKst:
  106f18:    ff f3 ee fa       	goto -0xa24 <DcuCmdKst : 1064f8 >			  ## entry_list.S:679:0


__stub_IcuCmdSend:
  106f1c:    ff f3 da fa       	goto -0xa4c <IcuCmdSend : 1064d4 >			  ## entry_list.S:686:0


__stub_DcuCmdSend:
  106f20:    ff f3 fe fa       	goto -0xa04 <DcuCmdSend : 106520 >			  ## entry_list.S:693:0


__stub_sfc_suspend:
  106f24:    ff f3 97 fa       	goto -0xad2 <sfc_suspend : 106456 >			  ## entry_list.S:700:0


__stub_sfc_resume:
  106f28:    ff f3 b3 fa       	goto -0xa9a <sfc_resume : 106492 >			  ## entry_list.S:707:0


__stub_sfc_drop_cache:
  106f2c:    ff f3 0a fb       	goto -0x9ec <sfc_drop_cache : 106544 >			  ## entry_list.S:714:0


__stub_chip_crc16:
  106f30:    ff f3 d6 f3       	goto -0x1854 <chip_crc16 : 1056e0 >			  ## entry_list.S:721:0


__stub_CrcDecode:
  106f34:    ff f3 f7 f3       	goto -0x1812 <CrcDecode : 105726 >			  ## entry_list.S:728:0


__stub_mask_init:
  106f38:    ff f3 8d ca       	goto -0x6ae6 <mask_init : 100456 >			  ## entry_list.S:735:0


__stub_wdt_clr:
  106f3c:    ff f3 91 f3       	goto -0x18de <wdt_clr : 105662 >			  ## entry_list.S:742:0


__stub_nvram_set_boot_state:
  106f40:    ff f3 41 ca       	goto -0x6b7e <nvram_set_boot_state : 1003c6 >			  ## entry_list.S:749:0


__stub_chip_reset:
  106f44:    ff f3 5f ca       	goto -0x6b42 <chip_reset : 100406 >			  ## entry_list.S:756:0


__stub_the_debug_isr:
  106f48:    ff f3 3d f0       	goto -0x1f86 <the_debug_isr : 104fc6 >			  ## entry_list.S:763:0


__stub_doe:
  106f4c:    ff f3 fa fd       	goto -0x40c <doe : 106b44 >			  ## entry_list.S:770:0


__stub__pll_init:
  106f50:    ff f3 2d f8       	goto -0xfa6 <_pll_init : 105fae >			  ## entry_list.S:777:0


__stub_flash_poweron:
  106f54:    ff f3 5a f1       	goto -0x1d4c <flash_poweron : 10520c >			  ## entry_list.S:784:0


__stub_spi_unmount:
  106f58:    ff f3 ee f7       	goto -0x1024 <spi_unmount : 105f38 >			  ## entry_list.S:791:0


__stub_spi_port_io_init:
  106f5c:    ff f3 38 f5       	goto -0x1590 <spi_port_io_init : 1059d0 >			  ## entry_list.S:798:0


__stub_LZ4_setStreamDecode:
  106f60:    ff f3 80 fb       	goto -0x900 <LZ4_setStreamDecode : 106664 >			  ## entry_list.S:805:0


__stub_LZ4_decompress_safe_continue:
  106f64:    ff f3 97 f5       	goto -0x14d2 <LZ4_decompress_safe_continue : 105a96 >			  ## entry_list.S:812:0


__stub_LZ4_decompress_safe_usingDict:
  106f68:    ff f3 85 fb       	goto -0x8f6 <LZ4_decompress_safe_usingDict : 106676 >			  ## entry_list.S:819:0


__stub__sdk_mkey_lock:
  106f6c:    ff f3 0c fe       	goto -0x3e8 <_sdk_mkey_lock : 106b88 >			  ## entry_list.S:826:0


__stub_g_hash_function:
  106f70:    ff f3 74 e5       	goto -0x3518 <g_hash_function : 103a5c >			  ## entry_list.S:833:0


__stub_f1_hash_function:
  106f74:    ff f3 50 e5       	goto -0x3560 <f1_hash_function : 103a18 >			  ## entry_list.S:840:0


__stub_f2_hash_function:
  106f78:    ff f3 a6 e5       	goto -0x34b4 <f2_hash_function : 103ac8 >			  ## entry_list.S:847:0


__stub_f3_hash_function:
  106f7c:    ff f3 df e5       	goto -0x3442 <f3_hash_function : 103b3e >			  ## entry_list.S:854:0


__stub_h2_hash_function:
  106f80:    ff f3 15 e6       	goto -0x33d6 <h2_hash_function : 103bae >			  ## entry_list.S:861:0


__stub_h3_hash_function:
  106f84:    ff f3 25 e6       	goto -0x33b6 <h3_hash_function : 103bd2 >			  ## entry_list.S:868:0


__stub_h4_hash_function:
  106f88:    ff f3 63 e6       	goto -0x333a <h4_hash_function : 103c52 >			  ## entry_list.S:875:0


__stub_h5_hash_function:
  106f8c:    ff f3 8a e6       	goto -0x32ec <h5_hash_function : 103ca4 >			  ## entry_list.S:882:0


__stub_g_function:
  106f90:    ff f3 a6 e6       	goto -0x32b4 <g_function : 103ce0 >			  ## entry_list.S:889:0


__stub_f1_function:
  106f94:    ff f3 ed e6       	goto -0x3226 <f1_function : 103d72 >			  ## entry_list.S:896:0


__stub_f2_function:
  106f98:    ff f3 1f e7       	goto -0x31c2 <f2_function : 103dda >			  ## entry_list.S:903:0


__stub_f3_function:
  106f9c:    ff f3 7f e7       	goto -0x3102 <f3_function : 103e9e >			  ## entry_list.S:910:0


__stub_sha256Compute:
  106fa0:    ff f3 de e4       	goto -0x3644 <sha256Compute : 103960 >			  ## entry_list.S:917:0


__stub_uECC_compute_public_key:
  106fa4:    ff f3 d7 ed       	goto -0x2452 <uECC_compute_public_key : 104b56 >			  ## entry_list.S:924:0


__stub_uECC_valid_public_key:
  106fa8:    ff f3 83 ed       	goto -0x24fa <uECC_valid_public_key : 104ab2 >			  ## entry_list.S:931:0


__stub_uECC_make_key:
  106fac:    ff f3 d8 ec       	goto -0x2650 <uECC_make_key : 104960 >			  ## entry_list.S:938:0


__stub_uECC_shared_secret:
  106fb0:    ff f3 2f ed       	goto -0x25a2 <uECC_shared_secret : 104a12 >			  ## entry_list.S:945:0


__stub_bi_initialize:
  106fb4:    ff f3 e4 ef       	goto -0x2038 <bi_initialize : 104f80 >			  ## entry_list.S:952:0


__stub_bi_read_from_byte:
  106fb8:    ff f3 bf ef       	goto -0x2082 <bi_read_from_byte : 104f3a >			  ## entry_list.S:959:0


__stub_bi_poly_mod2:
  106fbc:    ff f3 18 ef       	goto -0x21d0 <bi_poly_mod2 : 104df0 >			  ## entry_list.S:966:0


__stub_bi_poly_mul:
  106fc0:    ff f3 68 ef       	goto -0x2130 <bi_poly_mul : 104e94 >			  ## entry_list.S:973:0


__stub_trim:
  106fc4:    ff f3 14 ee       	goto -0x23d8 <trim : 104bf0 >			  ## entry_list.S:980:0


__stub_bi_wirte_to_byte:
  106fc8:    ff f3 9f ef       	goto -0x20c2 <bi_wirte_to_byte : 104f0a >			  ## entry_list.S:987:0


__stub_bi_free:
  106fcc:    ff f3 f9 ee       	goto -0x220e <bi_free : 104dc2 >			  ## entry_list.S:994:0


__stub_bi_terminate:
  106fd0:    ff f3 ec ef       	goto -0x2028 <bi_terminate : 104fac >			  ## entry_list.S:1001:0


__stub_uECC_vli_isZero:
  106fd4:    ff f3 99 e8       	goto -0x2ece <uECC_vli_isZero : 10410a >			  ## entry_list.S:1008:0


__stub_uECC_vli_modSquare_fast:
  106fd8:    ff f3 b8 e9       	goto -0x2c90 <uECC_vli_modSquare_fast : 10434c >			  ## entry_list.S:1015:0


__stub_uECC_vli_modMult_fast:
  106fdc:    ff f3 4f e9       	goto -0x2d62 <uECC_vli_modMult_fast : 10427e >			  ## entry_list.S:1022:0


__stub_uECC_vli_modAdd:
  106fe0:    ff f3 0d e9       	goto -0x2de6 <uECC_vli_modAdd : 1041fe >			  ## entry_list.S:1029:0


__stub_uECC_vli_modSub:
  106fe4:    ff f3 1e e9       	goto -0x2dc4 <uECC_vli_modSub : 104224 >			  ## entry_list.S:1036:0


__stub_uECC_vli_testBit:
  106fe8:    ff f3 9d e8       	goto -0x2ec6 <uECC_vli_testBit : 104126 >			  ## entry_list.S:1043:0


__stub_uECC_vli_add:
  106fec:    ff f3 ee e8       	goto -0x2e24 <uECC_vli_add : 1041cc >			  ## entry_list.S:1050:0


__stub_uECC_vli_rshift1:
  106ff0:    ff f3 dc e8       	goto -0x2e48 <uECC_vli_rshift1 : 1041ac >			  ## entry_list.S:1057:0


__stub_uECC_vli_set:
  106ff4:    ff f3 a1 e8       	goto -0x2ebe <uECC_vli_set : 10413a >			  ## entry_list.S:1064:0


__stub_uECC_vli_sub:
  106ff8:    ff f3 bf e8       	goto -0x2e82 <uECC_vli_sub : 10417a >			  ## entry_list.S:1071:0


__stub_uECC_vli_cmp_unsafe:
  106ffc:    ff f3 a8 e8       	goto -0x2eb0 <uECC_vli_cmp_unsafe : 104150 >			  ## entry_list.S:1078:0

